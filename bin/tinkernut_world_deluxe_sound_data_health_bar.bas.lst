------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_sound_data_health_bar.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 41	    _Data_Player_Damaged_length =	.skipL0311-_Data_Player_Damaged
      4  10000 ????
      5  10000 ????		00 35	    _Data_Enemy_Destroyed_length =	.skipL0310-_Data_Enemy_Destroyed
      6  10000 ????
      7  10000 ????		00 19	    _Data_Fire_B_Sound_length =	.skipL0309-_Data_Fire_B_Sound
      8  10000 ????
      9  10000 ????		00 99	    _P_Edge_Right =	153
     10  10000 ????
     11  10000 ????		00 01	    _P_Edge_Left =	1
     12  10000 ????
     13  10000 ????		00 53	    _P_Edge_Bottom =	83
     14  10000 ????
     15  10000 ????		00 0a	    _P_Edge_Top =	10
     16  10000 ????
     17  10000 ????		00 01	    pfscore    =	1
     18  10000 ????
     19  10000 ????		00 ed	    rand16     =	z
     20  10000 ????
     21  10000 ????		00 ec	    _Bit7_Last_Life =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     26  10000 ????
     27  10000 ????		00 ec	    _Bit2_Game_Control =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     32  10000 ????
     33  10000 ????		00 ec	    _BitOp_01  =	y
     34  10000 ????
     35  10000 ????		00 eb	    _High_Score3 =	x
     36  10000 ????
     37  10000 ????		00 ea	    _High_Score2 =	w
     38  10000 ????
     39  10000 ????		00 e9	    _High_Score1 =	v
     40  10000 ????
     41  10000 ????		00 e8	    _Score3_Mem =	u
     42  10000 ????
     43  10000 ????		00 e7	    _Score2_Mem =	t
     44  10000 ????
     45  10000 ????		00 e6	    _Score1_Mem =	s
     46  10000 ????
     47  10000 ????		00 95	    _sc3       =	score + 2
     48  10000 ????
     49  10000 ????		00 94	    _sc2       =	score + 1
     50  10000 ????
     51  10000 ????		00 93	    _sc1       =	score
     52  10000 ????
     53  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     54  10000 ????
     55  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     56  10000 ????
     57  10000 ????		00 e5	    _Bit1_BW_Check =	r
     58  10000 ????
     59  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     60  10000 ????
     61  10000 ????		00 e5	    _BitOp_02  =	r
     62  10000 ????
     63  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     64  10000 ????
     65  10000 ????		00 dd	    _AP_Dir_Counter =	j
     66  10000 ????
     67  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     68  10000 ????
     69  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     70  10000 ????
     71  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     72  10000 ????
     73  10000 ????		00 d8	    _Ch0_Counter =	e
     74  10000 ????
     75  10000 ????		00 d7	    _Ch0_Duration =	d
     76  10000 ????
     77  10000 ????		00 d6	    _Ch0_Sound =	c
     78  10000 ????
     79  10000 ????		00 d5	    _Frame_Counter =	b
     80  10000 ????
     81  10000 ????		00 d4	    _Master_Counter =	a
     82  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 41	    _Data_Player_Damaged_length =	.skipL0311-_Data_Player_Damaged
      4  10000 ????
      5  10000 ????		00 35	    _Data_Enemy_Destroyed_length =	.skipL0310-_Data_Enemy_Destroyed
      6  10000 ????
      7  10000 ????		00 19	    _Data_Fire_B_Sound_length =	.skipL0309-_Data_Fire_B_Sound
      8  10000 ????
      9  10000 ????		00 99	    _P_Edge_Right =	153
     10  10000 ????
     11  10000 ????		00 01	    _P_Edge_Left =	1
     12  10000 ????
     13  10000 ????		00 53	    _P_Edge_Bottom =	83
     14  10000 ????
     15  10000 ????		00 0a	    _P_Edge_Top =	10
     16  10000 ????
     17  10000 ????		00 01	    pfscore    =	1
     18  10000 ????
     19  10000 ????		00 ed	    rand16     =	z
     20  10000 ????
     21  10000 ????		00 ec	    _Bit7_Last_Life =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     26  10000 ????
     27  10000 ????		00 ec	    _Bit2_Game_Control =	y
     28  10000 ????
     29  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     30  10000 ????
     31  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     32  10000 ????
     33  10000 ????		00 ec	    _BitOp_01  =	y
     34  10000 ????
     35  10000 ????		00 eb	    _High_Score3 =	x
     36  10000 ????
     37  10000 ????		00 ea	    _High_Score2 =	w
     38  10000 ????
     39  10000 ????		00 e9	    _High_Score1 =	v
     40  10000 ????
     41  10000 ????		00 e8	    _Score3_Mem =	u
     42  10000 ????
     43  10000 ????		00 e7	    _Score2_Mem =	t
     44  10000 ????
     45  10000 ????		00 e6	    _Score1_Mem =	s
     46  10000 ????
     47  10000 ????		00 95	    _sc3       =	score + 2
     48  10000 ????
     49  10000 ????		00 94	    _sc2       =	score + 1
     50  10000 ????
     51  10000 ????		00 93	    _sc1       =	score
     52  10000 ????
     53  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     54  10000 ????
     55  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     56  10000 ????
     57  10000 ????		00 e5	    _Bit1_BW_Check =	r
     58  10000 ????
     59  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     60  10000 ????
     61  10000 ????		00 e5	    _BitOp_02  =	r
     62  10000 ????
     63  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     64  10000 ????
     65  10000 ????		00 dd	    _AP_Dir_Counter =	j
     66  10000 ????
     67  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     68  10000 ????
     69  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     70  10000 ????
     71  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     72  10000 ????
     73  10000 ????		00 d8	    _Ch0_Counter =	e
     74  10000 ????
     75  10000 ????		00 d7	    _Ch0_Duration =	d
     76  10000 ????
     77  10000 ????		00 d6	    _Ch0_Sound =	c
     78  10000 ????
     79  10000 ????		00 d5	    _Frame_Counter =	b
     80  10000 ????
     81  10000 ????		00 d4	    _Master_Counter =	a
     82  10000 ????
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_sound_data_health_bar.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 67 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc					      ifconst	pfscore
    765  f1cc		       a5 f4		      lda	pfscorecolor
    766  f1ce		       85 08		      sta	COLUPF
    767  f1d0					      endif
    768  f1d0		       85 02		      sta	WSYNC
    769  f1d2		       a2 00		      ldx	#0
    770  f1d4		       86 1b		      STx	GRP0
    771  f1d6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d8
    773  f1d8		       a5 9b		      lda	scorepointers+5
    774  f1da							; ldy temp5
    775  f1da		       95 a0		      sta	temp5,x
    776  f1dc							; sty scorepointers+5
    777  f1dc		       a9 ff		      lda	#>scoretable
    778  f1de		       85 97		      sta	scorepointers+1
    779  f1e0		       85 99		      sta	scorepointers+3
    780  f1e2		       85 9b		      sta	scorepointers+5
    781  f1e4		       85 9d		      sta	temp2
    782  f1e6		       85 9f		      sta	temp4
    783  f1e8		       85 a1		      sta	temp6
    784  f1ea		       a0 07		      LDY	#7
    785  f1ec		       84 25		      STY	VDELP0
    786  f1ee		       85 10		      STA	RESP0
    787  f1f0		       85 11		      STA	RESP1
    788  f1f2
    789  f1f2
    790  f1f2		       a9 03		      LDA	#$03
    791  f1f4		       85 04		      STA	NUSIZ0
    792  f1f6		       85 05		      STA	NUSIZ1
    793  f1f8		       85 26		      STA	VDELP1
    794  f1fa		       a9 f0		      LDA	#$F0
    795  f1fc		       85 21		      STA	HMP1
    796  f1fe		       b1 96		      lda	(scorepointers),y
    797  f200		       85 1b		      sta	GRP0
    798  f202		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f204		       4c 10 f2 	      jmp	beginscore
    800  f207
    801  f207
    802  f207				  -	      if	((<*)>$d4)
    803  f207				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f207					      endif
    805  f207
    806  f207				   loop2
    807  f207		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f209		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20b					      ifconst	pfscore
    810  f20b		       ad f2 00 	      lda.w	pfscore1
    811  f20e		       85 0e		      sta	PF1
    812  f210				  -	      else
    813  f210				  -	      ifconst	scorefade
    814  f210				  -	      sleep	2
    815  f210				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f210				  -	      else
    817  f210				  -	      sleep	7
    818  f210				  -	      endif
    819  f210					      endif
    820  f210							; cycle 0
    821  f210				   beginscore
    822  f210		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f212		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f214		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f216		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f218		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21a		       9a		      txs
    828  f21b		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21d				  -	      ifconst	scorefade
    830  f21d				  -	      lda	stack2
    831  f21d					      else
      0  f21d					      sleep	3
      1  f21d				   .CYCLES    SET	3
      2  f21d
      3  f21d				  -	      IF	.CYCLES < 2
      4  f21d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21d				  -	      ERR
      6  f21d					      ENDIF
      7  f21d
      8  f21d					      IF	.CYCLES & 1
      9  f21d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21d		       04 00		      nop	0
     11  f21f				  -	      ELSE
     12  f21f				  -	      bit	VSYNC
     13  f21f					      ENDIF
     14  f21f				   .CYCLES    SET	.CYCLES - 3
     15  f21f					      ENDIF
     16  f21f
     17  f21f				  -	      REPEAT	.CYCLES / 2
     18  f21f				  -	      nop
     19  f21f					      REPEND
    833  f21f					      endif
    834  f21f
    835  f21f					      ifconst	pfscore
    836  f21f		       a5 f3		      lda	pfscore2
    837  f221		       85 0e		      sta	PF1
    838  f223				  -	      else
    839  f223				  -	      ifconst	scorefade
    840  f223				  -	      sta	COLUP0
    841  f223				  -	      sta	COLUP1
    842  f223				  -	      else
    843  f223				  -	      sleep	6
    844  f223				  -	      endif
    845  f223					      endif
    846  f223
    847  f223		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f225		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f227		       ba		      tsx
    850  f228		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22a		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f22c		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22e		       88		      dey
    854  f22f		       10 d6		      bpl	loop2	;+2 60 180
    855  f231
    856  f231		       a6 f6		      ldx	stack1
    857  f233		       9a		      txs
    858  f234							; lda scorepointers+1
    859  f234		       a4 9c		      ldy	temp1
    860  f236							; sta temp1
    861  f236		       84 97		      sty	scorepointers+1
    862  f238
    863  f238		       a9 00		      LDA	#0
    864  f23a		       85 0e		      sta	PF1
    865  f23c		       85 1b		      STA	GRP0
    866  f23e		       85 1c		      STA	GRP1
    867  f240		       85 25		      STA	VDELP0
    868  f242		       85 26		      STA	VDELP1	;do we need these
    869  f244		       85 04		      STA	NUSIZ0
    870  f246		       85 05		      STA	NUSIZ1
    871  f248
    872  f248							; lda scorepointers+3
    873  f248		       a4 9e		      ldy	temp3
    874  f24a							; sta temp3
    875  f24a		       84 99		      sty	scorepointers+3
    876  f24c
    877  f24c							; lda scorepointers+5
    878  f24c		       a4 a0		      ldy	temp5
    879  f24e							; sta temp5
    880  f24e		       84 9b		      sty	scorepointers+5
    881  f250					      endif		;noscore
    882  f250				  -	      ifconst	readpaddle
    883  f250				  -	      lda	#%11000010
    884  f250					      else
    885  f250				  -	      ifconst	qtcontroller
    886  f250				  -	      lda	qtcontroller
    887  f250				  -	      lsr		; bit 0 in carry
    888  f250				  -	      lda	#4
    889  f250				  -	      ror		; carry into top of A
    890  f250					      else
    891  f250		       a9 02		      lda	#2
    892  f252					      endif		; qtcontroller
    893  f252					      endif		; readpaddle
    894  f252		       85 02		      sta	WSYNC
    895  f254		       85 01		      sta	VBLANK
      0  f256					      RETURN
      1  f256					      ifnconst	bankswitch
      2  f256		       60		      rts
      3  f257				  -	      else
      4  f257				  -	      jmp	BS_return
      5  f257					      endif
    897  f257				  -	      ifconst	shakescreen
    898  f257				  -doshakescreen
    899  f257				  -	      bit	shakescreen
    900  f257				  -	      bmi	noshakescreen
    901  f257				  -	      sta	WSYNC
    902  f257				  -noshakescreen
    903  f257				  -	      ldx	missile0height
    904  f257				  -	      inx
    905  f257				  -	      rts
    906  f257					      endif
    907  f257
    908  f257							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f257
    910  f257							; playfield drawing routines
    911  f257							; you get a 32x12 bitmapped display in a single color :)
    912  f257							; 0-31 and 0-11
    913  f257
    914  f257				   pfclear		; clears playfield - or fill with pattern
    915  f257				  -	      ifconst	pfres
    916  f257				  -	      ldx	#pfres*pfwidth-1
    917  f257					      else
    918  f257		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f259					      endif
    920  f259				   pfclear_loop
    921  f259					      ifnconst	superchip
    922  f259		       95 a4		      sta	playfield,x
    923  f25b				  -	      else
    924  f25b				  -	      sta	playfield-128,x
    925  f25b					      endif
    926  f25b		       ca		      dex
    927  f25c		       10 fb		      bpl	pfclear_loop
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    929  f25f
    930  f25f				   setuppointers
    931  f25f		       86 9d		      stx	temp2	; store on.off.flip value
    932  f261		       aa		      tax		; put x-value in x 
    933  f262		       4a		      lsr
    934  f263		       4a		      lsr
    935  f264		       4a		      lsr		; divide x pos by 8 
    936  f265		       85 9c		      sta	temp1
    937  f267		       98		      tya
    938  f268		       0a		      asl
    939  f269					      if	pfwidth=4
    940  f269		       0a		      asl		; multiply y pos by 4
    941  f26a					      endif		; else multiply by 2
    942  f26a		       18		      clc
    943  f26b		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26d		       a8		      tay		; put the value in y
    945  f26e		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f270		       60		      rts
    947  f271
    948  f271				   pfread
    949  f271							;x=xvalue, y=yvalue
    950  f271		       20 5f f2 	      jsr	setuppointers
    951  f274		       bd d9 f2 	      lda	setbyte,x
    952  f277		       39 a4 00 	      and	playfield,y
    953  f27a		       5d d9 f2 	      eor	setbyte,x
    954  f27d							; beq readzero
    955  f27d							; lda #1
    956  f27d							; readzero
      0  f27d					      RETURN
      1  f27d					      ifnconst	bankswitch
      2  f27d		       60		      rts
      3  f27e				  -	      else
      4  f27e				  -	      jmp	BS_return
      5  f27e					      endif
    958  f27e
    959  f27e				   pfpixel
    960  f27e							;x=xvalue, y=yvalue, a=0,1,2
    961  f27e		       20 5f f2 	      jsr	setuppointers
    962  f281
    963  f281				  -	      ifconst	bankswitch
    964  f281				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f281				  -	      beq	pixelon_r	; if "on" go to on
    966  f281				  -	      lsr
    967  f281				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f281				  -	      lda	playfield,y	; if here, it's "flip"
    969  f281				  -	      eor	setbyte,x
    970  f281				  -	      ifconst	superchip
    971  f281				  -	      sta	playfield-128,y
    972  f281				  -	      else
    973  f281				  -	      sta	playfield,y
    974  f281				  -	      endif
    975  f281				  -	      RETURN
    976  f281				  -pixelon_r
    977  f281				  -	      lda	playfield,y
    978  f281				  -	      ora	setbyte,x
    979  f281				  -	      ifconst	superchip
    980  f281				  -	      sta	playfield-128,y
    981  f281				  -	      else
    982  f281				  -	      sta	playfield,y
    983  f281				  -	      endif
    984  f281				  -	      RETURN
    985  f281				  -pixeloff_r
    986  f281				  -	      lda	setbyte,x
    987  f281				  -	      eor	#$ff
    988  f281				  -	      and	playfield,y
    989  f281				  -	      ifconst	superchip
    990  f281				  -	      sta	playfield-128,y
    991  f281				  -	      else
    992  f281				  -	      sta	playfield,y
    993  f281				  -	      endif
    994  f281				  -	      RETURN
    995  f281				  -
    996  f281					      else
    997  f281		       4c b2 f2 	      jmp	plotpoint
    998  f284					      endif
    999  f284
   1000  f284				   pfhline
   1001  f284							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f284		       20 5f f2 	      jsr	setuppointers
   1003  f287		       4c 91 f2 	      jmp	noinc
   1004  f28a				   keepgoing
   1005  f28a		       e8		      inx
   1006  f28b		       8a		      txa
   1007  f28c		       29 07		      and	#7
   1008  f28e		       d0 01		      bne	noinc
   1009  f290		       c8		      iny
   1010  f291				   noinc
   1011  f291		       20 b2 f2 	      jsr	plotpoint
   1012  f294		       e4 9e		      cpx	temp3
   1013  f296		       30 f2		      bmi	keepgoing
      0  f298					      RETURN
      1  f298					      ifnconst	bankswitch
      2  f298		       60		      rts
      3  f299				  -	      else
      4  f299				  -	      jmp	BS_return
      5  f299					      endif
   1015  f299
   1016  f299				   pfvline
   1017  f299							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f299		       20 5f f2 	      jsr	setuppointers
   1019  f29c		       84 9c		      sty	temp1	; store memory location offset
   1020  f29e		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a0		       a5 9e		      lda	temp3
   1022  f2a2		       0a		      asl
   1023  f2a3					      if	pfwidth=4
   1024  f2a3		       0a		      asl		; multiply by 4
   1025  f2a4					      endif		; else multiply by 2
   1026  f2a4		       85 9e		      sta	temp3	; store it
   1027  f2a6							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a6							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a6							; x should equal original x value
   1030  f2a6				   keepgoingy
   1031  f2a6		       20 b2 f2 	      jsr	plotpoint
   1032  f2a9		       c8		      iny
   1033  f2aa		       c8		      iny
   1034  f2ab					      if	pfwidth=4
   1035  f2ab		       c8		      iny
   1036  f2ac		       c8		      iny
   1037  f2ad					      endif
   1038  f2ad		       c4 9e		      cpy	temp3
   1039  f2af		       30 f5		      bmi	keepgoingy
      0  f2b1					      RETURN
      1  f2b1					      ifnconst	bankswitch
      2  f2b1		       60		      rts
      3  f2b2				  -	      else
      4  f2b2				  -	      jmp	BS_return
      5  f2b2					      endif
   1041  f2b2
   1042  f2b2				   plotpoint
   1043  f2b2		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b4		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b6		       4a		      lsr
   1046  f2b7		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b9		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2bc		       5d d9 f2 	      eor	setbyte,x
   1049  f2bf				  -	      ifconst	superchip
   1050  f2bf				  -	      sta	playfield-128,y
   1051  f2bf					      else
   1052  f2bf		       99 a4 00 	      sta	playfield,y
   1053  f2c2					      endif
   1054  f2c2		       60		      rts
   1055  f2c3				   pixelon
   1056  f2c3		       b9 a4 00 	      lda	playfield,y
   1057  f2c6		       1d d9 f2 	      ora	setbyte,x
   1058  f2c9				  -	      ifconst	superchip
   1059  f2c9				  -	      sta	playfield-128,y
   1060  f2c9					      else
   1061  f2c9		       99 a4 00 	      sta	playfield,y
   1062  f2cc					      endif
   1063  f2cc		       60		      rts
   1064  f2cd				   pixeloff
   1065  f2cd		       bd d9 f2 	      lda	setbyte,x
   1066  f2d0		       49 ff		      eor	#$ff
   1067  f2d2		       39 a4 00 	      and	playfield,y
   1068  f2d5				  -	      ifconst	superchip
   1069  f2d5				  -	      sta	playfield-128,y
   1070  f2d5					      else
   1071  f2d5		       99 a4 00 	      sta	playfield,y
   1072  f2d8					      endif
   1073  f2d8		       60		      rts
   1074  f2d9
   1075  f2d9				   setbyte
   1076  f2d9					      ifnconst	pfcenter
   1077  f2d9		       80		      .byte.b	$80
   1078  f2da		       40		      .byte.b	$40
   1079  f2db		       20		      .byte.b	$20
   1080  f2dc		       10		      .byte.b	$10
   1081  f2dd		       08		      .byte.b	$08
   1082  f2de		       04		      .byte.b	$04
   1083  f2df		       02		      .byte.b	$02
   1084  f2e0		       01		      .byte.b	$01
   1085  f2e1					      endif
   1086  f2e1		       01		      .byte.b	$01
   1087  f2e2		       02		      .byte.b	$02
   1088  f2e3		       04		      .byte.b	$04
   1089  f2e4		       08		      .byte.b	$08
   1090  f2e5		       10		      .byte.b	$10
   1091  f2e6		       20		      .byte.b	$20
   1092  f2e7		       40		      .byte.b	$40
   1093  f2e8		       80		      .byte.b	$80
   1094  f2e9		       80		      .byte.b	$80
   1095  f2ea		       40		      .byte.b	$40
   1096  f2eb		       20		      .byte.b	$20
   1097  f2ec		       10		      .byte.b	$10
   1098  f2ed		       08		      .byte.b	$08
   1099  f2ee		       04		      .byte.b	$04
   1100  f2ef		       02		      .byte.b	$02
   1101  f2f0		       01		      .byte.b	$01
   1102  f2f1		       01		      .byte.b	$01
   1103  f2f2		       02		      .byte.b	$02
   1104  f2f3		       04		      .byte.b	$04
   1105  f2f4		       08		      .byte.b	$08
   1106  f2f5		       10		      .byte.b	$10
   1107  f2f6		       20		      .byte.b	$20
   1108  f2f7		       40		      .byte.b	$40
   1109  f2f8		       80		      .byte.b	$80
   1110  f2f9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f9
   1112  f2f9				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f9		       d0 13		      bne	notleft
   1114  f2fb							;left
   1115  f2fb				  -	      ifconst	pfres
   1116  f2fb				  -	      ldx	#pfres*4
   1117  f2fb					      else
   1118  f2fb		       a2 30		      ldx	#48
   1119  f2fd					      endif
   1120  f2fd				   leftloop
   1121  f2fd		       b5 a3		      lda	playfield-1,x
   1122  f2ff		       4a		      lsr
   1123  f300
   1124  f300				  -	      ifconst	superchip
   1125  f300				  -	      lda	playfield-2,x
   1126  f300				  -	      rol
   1127  f300				  -	      sta	playfield-130,x
   1128  f300				  -	      lda	playfield-3,x
   1129  f300				  -	      ror
   1130  f300				  -	      sta	playfield-131,x
   1131  f300				  -	      lda	playfield-4,x
   1132  f300				  -	      rol
   1133  f300				  -	      sta	playfield-132,x
   1134  f300				  -	      lda	playfield-1,x
   1135  f300				  -	      ror
   1136  f300				  -	      sta	playfield-129,x
   1137  f300					      else
   1138  f300		       36 a2		      rol	playfield-2,x
   1139  f302		       76 a1		      ror	playfield-3,x
   1140  f304		       36 a0		      rol	playfield-4,x
   1141  f306		       76 a3		      ror	playfield-1,x
   1142  f308					      endif
   1143  f308
   1144  f308		       8a		      txa
   1145  f309		       cb 04		      sbx	#4
   1146  f30b		       d0 f0		      bne	leftloop
      0  f30d					      RETURN
      1  f30d					      ifnconst	bankswitch
      2  f30d		       60		      rts
      3  f30e				  -	      else
      4  f30e				  -	      jmp	BS_return
      5  f30e					      endif
   1148  f30e
   1149  f30e				   notleft
   1150  f30e		       4a		      lsr
   1151  f30f		       90 13		      bcc	notright
   1152  f311							;right
   1153  f311
   1154  f311				  -	      ifconst	pfres
   1155  f311				  -	      ldx	#pfres*4
   1156  f311					      else
   1157  f311		       a2 30		      ldx	#48
   1158  f313					      endif
   1159  f313				   rightloop
   1160  f313		       b5 a0		      lda	playfield-4,x
   1161  f315		       4a		      lsr
   1162  f316				  -	      ifconst	superchip
   1163  f316				  -	      lda	playfield-3,x
   1164  f316				  -	      rol
   1165  f316				  -	      sta	playfield-131,x
   1166  f316				  -	      lda	playfield-2,x
   1167  f316				  -	      ror
   1168  f316				  -	      sta	playfield-130,x
   1169  f316				  -	      lda	playfield-1,x
   1170  f316				  -	      rol
   1171  f316				  -	      sta	playfield-129,x
   1172  f316				  -	      lda	playfield-4,x
   1173  f316				  -	      ror
   1174  f316				  -	      sta	playfield-132,x
   1175  f316					      else
   1176  f316		       36 a1		      rol	playfield-3,x
   1177  f318		       76 a2		      ror	playfield-2,x
   1178  f31a		       36 a3		      rol	playfield-1,x
   1179  f31c		       76 a0		      ror	playfield-4,x
   1180  f31e					      endif
   1181  f31e		       8a		      txa
   1182  f31f		       cb 04		      sbx	#4
   1183  f321		       d0 f0		      bne	rightloop
      0  f323					      RETURN
      1  f323					      ifnconst	bankswitch
      2  f323		       60		      rts
      3  f324				  -	      else
      4  f324				  -	      jmp	BS_return
      5  f324					      endif
   1185  f324
   1186  f324				   notright
   1187  f324		       4a		      lsr
   1188  f325		       90 49		      bcc	notup
   1189  f327							;up
   1190  f327		       4a		      lsr
   1191  f328		       90 02		      bcc	onedecup
   1192  f32a		       c6 ef		      dec	playfieldpos
   1193  f32c				   onedecup
   1194  f32c		       c6 ef		      dec	playfieldpos
   1195  f32e		       f0 02		      beq	shiftdown
   1196  f330		       10 3d		      bpl	noshiftdown2
   1197  f332				   shiftdown
   1198  f332				  -	      ifconst	pfrowheight
   1199  f332				  -	      lda	#pfrowheight
   1200  f332					      else
   1201  f332					      ifnconst	pfres
   1202  f332		       a9 08		      lda	#8
   1203  f334				  -	      else
   1204  f334				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f334					      endif
   1206  f334					      endif
   1207  f334
   1208  f334		       85 ef		      sta	playfieldpos
   1209  f336		       a5 a7		      lda	playfield+3
   1210  f338		       85 9f		      sta	temp4
   1211  f33a		       a5 a6		      lda	playfield+2
   1212  f33c		       85 9e		      sta	temp3
   1213  f33e		       a5 a5		      lda	playfield+1
   1214  f340		       85 9d		      sta	temp2
   1215  f342		       a5 a4		      lda	playfield
   1216  f344		       85 9c		      sta	temp1
   1217  f346		       a2 00		      ldx	#0
   1218  f348				   up2
   1219  f348		       b5 a8		      lda	playfield+4,x
   1220  f34a				  -	      ifconst	superchip
   1221  f34a				  -	      sta	playfield-128,x
   1222  f34a				  -	      lda	playfield+5,x
   1223  f34a				  -	      sta	playfield-127,x
   1224  f34a				  -	      lda	playfield+6,x
   1225  f34a				  -	      sta	playfield-126,x
   1226  f34a				  -	      lda	playfield+7,x
   1227  f34a				  -	      sta	playfield-125,x
   1228  f34a					      else
   1229  f34a		       95 a4		      sta	playfield,x
   1230  f34c		       b5 a9		      lda	playfield+5,x
   1231  f34e		       95 a5		      sta	playfield+1,x
   1232  f350		       b5 aa		      lda	playfield+6,x
   1233  f352		       95 a6		      sta	playfield+2,x
   1234  f354		       b5 ab		      lda	playfield+7,x
   1235  f356		       95 a7		      sta	playfield+3,x
   1236  f358					      endif
   1237  f358		       8a		      txa
   1238  f359		       cb fc		      sbx	#252
   1239  f35b				  -	      ifconst	pfres
   1240  f35b				  -	      cpx	#(pfres-1)*4
   1241  f35b					      else
   1242  f35b		       e0 2c		      cpx	#44
   1243  f35d					      endif
   1244  f35d		       d0 e9		      bne	up2
   1245  f35f
   1246  f35f		       a5 9f		      lda	temp4
   1247  f361
   1248  f361				  -	      ifconst	superchip
   1249  f361				  -	      ifconst	pfres
   1250  f361				  -	      sta	playfield+pfres*4-129
   1251  f361				  -	      lda	temp3
   1252  f361				  -	      sta	playfield+pfres*4-130
   1253  f361				  -	      lda	temp2
   1254  f361				  -	      sta	playfield+pfres*4-131
   1255  f361				  -	      lda	temp1
   1256  f361				  -	      sta	playfield+pfres*4-132
   1257  f361				  -	      else
   1258  f361				  -	      sta	playfield+47-128
   1259  f361				  -	      lda	temp3
   1260  f361				  -	      sta	playfield+46-128
   1261  f361				  -	      lda	temp2
   1262  f361				  -	      sta	playfield+45-128
   1263  f361				  -	      lda	temp1
   1264  f361				  -	      sta	playfield+44-128
   1265  f361				  -	      endif
   1266  f361					      else
   1267  f361				  -	      ifconst	pfres
   1268  f361				  -	      sta	playfield+pfres*4-1
   1269  f361				  -	      lda	temp3
   1270  f361				  -	      sta	playfield+pfres*4-2
   1271  f361				  -	      lda	temp2
   1272  f361				  -	      sta	playfield+pfres*4-3
   1273  f361				  -	      lda	temp1
   1274  f361				  -	      sta	playfield+pfres*4-4
   1275  f361					      else
   1276  f361		       85 d3		      sta	playfield+47
   1277  f363		       a5 9e		      lda	temp3
   1278  f365		       85 d2		      sta	playfield+46
   1279  f367		       a5 9d		      lda	temp2
   1280  f369		       85 d1		      sta	playfield+45
   1281  f36b		       a5 9c		      lda	temp1
   1282  f36d		       85 d0		      sta	playfield+44
   1283  f36f					      endif
   1284  f36f					      endif
   1285  f36f				   noshiftdown2
      0  f36f					      RETURN
      1  f36f					      ifnconst	bankswitch
      2  f36f		       60		      rts
      3  f370				  -	      else
      4  f370				  -	      jmp	BS_return
      5  f370					      endif
   1287  f370
   1288  f370
   1289  f370				   notup
   1290  f370							;down
   1291  f370		       4a		      lsr
   1292  f371		       b0 02		      bcs	oneincup
   1293  f373		       e6 ef		      inc	playfieldpos
   1294  f375				   oneincup
   1295  f375		       e6 ef		      inc	playfieldpos
   1296  f377		       a5 ef		      lda	playfieldpos
   1297  f379
   1298  f379				  -	      ifconst	pfrowheight
   1299  f379				  -	      cmp	#pfrowheight+1
   1300  f379					      else
   1301  f379					      ifnconst	pfres
   1302  f379		       c9 09		      cmp	#9
   1303  f37b				  -	      else
   1304  f37b				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37b					      endif
   1306  f37b					      endif
   1307  f37b
   1308  f37b		       90 3b		      bcc	noshiftdown
   1309  f37d		       a9 01		      lda	#1
   1310  f37f		       85 ef		      sta	playfieldpos
   1311  f381
   1312  f381				  -	      ifconst	pfres
   1313  f381				  -	      lda	playfield+pfres*4-1
   1314  f381				  -	      sta	temp4
   1315  f381				  -	      lda	playfield+pfres*4-2
   1316  f381				  -	      sta	temp3
   1317  f381				  -	      lda	playfield+pfres*4-3
   1318  f381				  -	      sta	temp2
   1319  f381				  -	      lda	playfield+pfres*4-4
   1320  f381					      else
   1321  f381		       a5 d3		      lda	playfield+47
   1322  f383		       85 9f		      sta	temp4
   1323  f385		       a5 d2		      lda	playfield+46
   1324  f387		       85 9e		      sta	temp3
   1325  f389		       a5 d1		      lda	playfield+45
   1326  f38b		       85 9d		      sta	temp2
   1327  f38d		       a5 d0		      lda	playfield+44
   1328  f38f					      endif
   1329  f38f
   1330  f38f		       85 9c		      sta	temp1
   1331  f391
   1332  f391				  -	      ifconst	pfres
   1333  f391				  -	      ldx	#(pfres-1)*4
   1334  f391					      else
   1335  f391		       a2 2c		      ldx	#44
   1336  f393					      endif
   1337  f393				   down2
   1338  f393		       b5 a3		      lda	playfield-1,x
   1339  f395				  -	      ifconst	superchip
   1340  f395				  -	      sta	playfield-125,x
   1341  f395				  -	      lda	playfield-2,x
   1342  f395				  -	      sta	playfield-126,x
   1343  f395				  -	      lda	playfield-3,x
   1344  f395				  -	      sta	playfield-127,x
   1345  f395				  -	      lda	playfield-4,x
   1346  f395				  -	      sta	playfield-128,x
   1347  f395					      else
   1348  f395		       95 a7		      sta	playfield+3,x
   1349  f397		       b5 a2		      lda	playfield-2,x
   1350  f399		       95 a6		      sta	playfield+2,x
   1351  f39b		       b5 a1		      lda	playfield-3,x
   1352  f39d		       95 a5		      sta	playfield+1,x
   1353  f39f		       b5 a0		      lda	playfield-4,x
   1354  f3a1		       95 a4		      sta	playfield,x
   1355  f3a3					      endif
   1356  f3a3		       8a		      txa
   1357  f3a4		       cb 04		      sbx	#4
   1358  f3a6		       d0 eb		      bne	down2
   1359  f3a8
   1360  f3a8		       a5 9f		      lda	temp4
   1361  f3aa				  -	      ifconst	superchip
   1362  f3aa				  -	      sta	playfield-125
   1363  f3aa				  -	      lda	temp3
   1364  f3aa				  -	      sta	playfield-126
   1365  f3aa				  -	      lda	temp2
   1366  f3aa				  -	      sta	playfield-127
   1367  f3aa				  -	      lda	temp1
   1368  f3aa				  -	      sta	playfield-128
   1369  f3aa					      else
   1370  f3aa		       85 a7		      sta	playfield+3
   1371  f3ac		       a5 9e		      lda	temp3
   1372  f3ae		       85 a6		      sta	playfield+2
   1373  f3b0		       a5 9d		      lda	temp2
   1374  f3b2		       85 a5		      sta	playfield+1
   1375  f3b4		       a5 9c		      lda	temp1
   1376  f3b6		       85 a4		      sta	playfield
   1377  f3b8					      endif
   1378  f3b8				   noshiftdown
      0  f3b8					      RETURN
      1  f3b8					      ifnconst	bankswitch
      2  f3b8		       60		      rts
      3  f3b9				  -	      else
      4  f3b9				  -	      jmp	BS_return
      5  f3b9					      endif
   1380  f3b9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b9
   1382  f3b9							;standard routines needed for pretty much all games
   1383  f3b9							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b9							; repositioning code and score pointer setup moved to overscan
   1385  f3b9							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b9
   1387  f3b9				   randomize
   1388  f3b9		       a5 a2		      lda	rand
   1389  f3bb		       4a		      lsr
   1390  f3bc					      ifconst	rand16
   1391  f3bc		       26 ed		      rol	rand16
   1392  f3be					      endif
   1393  f3be		       90 02		      bcc	noeor
   1394  f3c0		       49 b4		      eor	#$B4
   1395  f3c2				   noeor
   1396  f3c2		       85 a2		      sta	rand
   1397  f3c4					      ifconst	rand16
   1398  f3c4		       45 ed		      eor	rand16
   1399  f3c6					      endif
      0  f3c6					      RETURN
      1  f3c6					      ifnconst	bankswitch
      2  f3c6		       60		      rts
      3  f3c7				  -	      else
      4  f3c7				  -	      jmp	BS_return
      5  f3c7					      endif
   1401  f3c7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c7
   1403  f3c7				   drawscreen
   1404  f3c7				  -	      ifconst	debugscore
   1405  f3c7				  -	      ldx	#14
   1406  f3c7				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c7				  -
   1408  f3c7				  -	      ifconst	mincycles
   1409  f3c7				  -	      lda	mincycles
   1410  f3c7				  -	      cmp	INTIM
   1411  f3c7				  -	      lda	mincycles
   1412  f3c7				  -	      bcc	nochange
   1413  f3c7				  -	      lda	INTIM
   1414  f3c7				  -	      sta	mincycles
   1415  f3c7				  -nochange
   1416  f3c7				  -	      endif
   1417  f3c7				  -
   1418  f3c7				  -			; cmp #$2B
   1419  f3c7				  -			; bcs no_cycles_left
   1420  f3c7				  -	      bmi	cycles_left
   1421  f3c7				  -	      ldx	#64
   1422  f3c7				  -	      eor	#$ff	;make negative
   1423  f3c7				  -cycles_left
   1424  f3c7				  -	      stx	scorecolor
   1425  f3c7				  -	      and	#$7f	; clear sign bit
   1426  f3c7				  -	      tax
   1427  f3c7				  -	      lda	scorebcd,x
   1428  f3c7				  -	      sta	score+2
   1429  f3c7				  -	      lda	scorebcd1,x
   1430  f3c7				  -	      sta	score+1
   1431  f3c7				  -	      jmp	done_debugscore
   1432  f3c7				  -scorebcd
   1433  f3c7				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c7				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c7				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c7				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c7				  -scorebcd1
   1438  f3c7				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c7				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c7				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c7				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c7				  -done_debugscore
   1443  f3c7					      endif
   1444  f3c7
   1445  f3c7				  -	      ifconst	debugcycles
   1446  f3c7				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c7				  -			; cmp #$2B
   1448  f3c7				  -			; BCC overscan
   1449  f3c7				  -	      bmi	overscan
   1450  f3c7				  -	      sta	COLUBK
   1451  f3c7				  -	      bcs	doneoverscan
   1452  f3c7					      endif
   1453  f3c7
   1454  f3c7				   overscan
   1455  f3c7				  -	      ifconst	interlaced
   1456  f3c7				  -	      PHP
   1457  f3c7				  -	      PLA
   1458  f3c7				  -	      EOR	#4	; flip interrupt bit
   1459  f3c7				  -	      PHA
   1460  f3c7				  -	      PLP
   1461  f3c7				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c7				  -	      TAX		; save it for later
   1463  f3c7					      endif
   1464  f3c7
   1465  f3c7				   overscanloop
   1466  f3c7		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ca		       30 fb		      bmi	overscanloop
   1468  f3cc				   doneoverscan
   1469  f3cc
   1470  f3cc							;do VSYNC
   1471  f3cc
   1472  f3cc				  -	      ifconst	interlaced
   1473  f3cc				  -	      CPX	#4
   1474  f3cc				  -	      BNE	oddframevsync
   1475  f3cc					      endif
   1476  f3cc
   1477  f3cc		       a9 02		      lda	#2
   1478  f3ce		       85 02		      sta	WSYNC
   1479  f3d0		       85 00		      sta	VSYNC
   1480  f3d2		       85 02		      STA	WSYNC
   1481  f3d4		       85 02		      STA	WSYNC
   1482  f3d6		       4a		      lsr
   1483  f3d7		       85 02		      STA	WSYNC
   1484  f3d9		       85 00		      STA	VSYNC
   1485  f3db		       85 01		      sta	VBLANK
   1486  f3dd					      ifnconst	overscan_time
   1487  f3dd		       a9 a5		      lda	#37+128
   1488  f3df				  -	      else
   1489  f3df				  -	      lda	#overscan_time+128
   1490  f3df					      endif
   1491  f3df		       8d 96 02 	      sta	TIM64T
   1492  f3e2
   1493  f3e2				  -	      ifconst	interlaced
   1494  f3e2				  -	      jmp	postsync
   1495  f3e2				  -
   1496  f3e2				  -oddframevsync
   1497  f3e2				  -	      sta	WSYNC
   1498  f3e2				  -
   1499  f3e2				  -	      LDA	($80,X)	; 11 waste
   1500  f3e2				  -	      LDA	($80,X)	; 11 waste
   1501  f3e2				  -	      LDA	($80,X)	; 11 waste
   1502  f3e2				  -
   1503  f3e2				  -	      lda	#2
   1504  f3e2				  -	      sta	VSYNC
   1505  f3e2				  -	      sta	WSYNC
   1506  f3e2				  -	      sta	WSYNC
   1507  f3e2				  -	      sta	WSYNC
   1508  f3e2				  -
   1509  f3e2				  -	      LDA	($80,X)	; 11 waste
   1510  f3e2				  -	      LDA	($80,X)	; 11 waste
   1511  f3e2				  -	      LDA	($80,X)	; 11 waste
   1512  f3e2				  -
   1513  f3e2				  -	      lda	#0
   1514  f3e2				  -	      sta	VSYNC
   1515  f3e2				  -	      sta	VBLANK
   1516  f3e2				  -	      ifnconst	overscan_time
   1517  f3e2				  -	      lda	#37+128
   1518  f3e2				  -	      else
   1519  f3e2				  -	      lda	#overscan_time+128
   1520  f3e2				  -	      endif
   1521  f3e2				  -	      sta	TIM64T
   1522  f3e2				  -
   1523  f3e2				  -postsync
   1524  f3e2					      endif
   1525  f3e2
   1526  f3e2				  -	      ifconst	legacy
   1527  f3e2				  -	      if	legacy < 100
   1528  f3e2				  -	      ldx	#4
   1529  f3e2				  -adjustloop
   1530  f3e2				  -	      lda	player0x,x
   1531  f3e2				  -	      sec
   1532  f3e2				  -	      sbc	#14	;?
   1533  f3e2				  -	      sta	player0x,x
   1534  f3e2				  -	      dex
   1535  f3e2				  -	      bpl	adjustloop
   1536  f3e2				  -	      endif
   1537  f3e2					      endif
   1538  f3e2				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e2				  -	      repeat	($fa-(<*))
   1540  f3e2				  -	      nop
   1541  f3e2				  -	      repend
   1542  f3e2					      endif
   1543  f3e2		       85 02		      sta	WSYNC
   1544  f3e4		       a2 04		      ldx	#4
      0  f3e6					      SLEEP	3
      1  f3e6				   .CYCLES    SET	3
      2  f3e6
      3  f3e6				  -	      IF	.CYCLES < 2
      4  f3e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e6				  -	      ERR
      6  f3e6					      ENDIF
      7  f3e6
      8  f3e6					      IF	.CYCLES & 1
      9  f3e6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e6		       04 00		      nop	0
     11  f3e8				  -	      ELSE
     12  f3e8				  -	      bit	VSYNC
     13  f3e8					      ENDIF
     14  f3e8				   .CYCLES    SET	.CYCLES - 3
     15  f3e8					      ENDIF
     16  f3e8
     17  f3e8				  -	      REPEAT	.CYCLES / 2
     18  f3e8				  -	      nop
     19  f3e8					      REPEND
   1546  f3e8				   HorPosLoop		; 5
   1547  f3e8		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ea		       38		      sec		;+2 11
   1549  f3eb				   DivideLoop
   1550  f3eb		       e9 0f		      sbc	#15
   1551  f3ed		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3ef		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f1		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f3		       85 02		      sta	WSYNC
   1555  f3f5		       ca		      dex
   1556  f3f6		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f8							; 4
   1558  f3f8
   1559  f3f8		       a2 04		      ldx	#4
   1560  f3fa		       b4 9c		      ldy	temp1,X
   1561  f3fc		       b9 58 f3 	      lda	repostable-256,Y
   1562  f3ff		       95 20		      sta	HMP0,X	;+14 18
   1563  f401
   1564  f401		       ca		      dex
   1565  f402		       b4 9c		      ldy	temp1,X
   1566  f404		       b9 58 f3 	      lda	repostable-256,Y
   1567  f407		       95 20		      sta	HMP0,X	;+14 32
   1568  f409
   1569  f409		       ca		      dex
   1570  f40a		       b4 9c		      ldy	temp1,X
   1571  f40c		       b9 58 f3 	      lda	repostable-256,Y
   1572  f40f		       95 20		      sta	HMP0,X	;+14 46
   1573  f411
   1574  f411		       ca		      dex
   1575  f412		       b4 9c		      ldy	temp1,X
   1576  f414		       b9 58 f3 	      lda	repostable-256,Y
   1577  f417		       95 20		      sta	HMP0,X	;+14 60
   1578  f419
   1579  f419		       ca		      dex
   1580  f41a		       b4 9c		      ldy	temp1,X
   1581  f41c		       b9 58 f3 	      lda	repostable-256,Y
   1582  f41f		       95 20		      sta	HMP0,X	;+14 74
   1583  f421
   1584  f421		       85 02		      sta	WSYNC
   1585  f423
   1586  f423		       85 2a		      sta	HMOVE	;+3 3
   1587  f425
   1588  f425
   1589  f425				  -	      ifconst	legacy
   1590  f425				  -	      if	legacy < 100
   1591  f425				  -	      ldx	#4
   1592  f425				  -adjustloop2
   1593  f425				  -	      lda	player0x,x
   1594  f425				  -	      clc
   1595  f425				  -	      adc	#14	;?
   1596  f425				  -	      sta	player0x,x
   1597  f425				  -	      dex
   1598  f425				  -	      bpl	adjustloop2
   1599  f425				  -	      endif
   1600  f425					      endif
   1601  f425
   1602  f425
   1603  f425
   1604  f425
   1605  f425							;set score pointers
   1606  f425		       a7 95		      lax	score+2
   1607  f427		       20 58 f4 	      jsr	scorepointerset
   1608  f42a		       84 9b		      sty	scorepointers+5
   1609  f42c		       86 98		      stx	scorepointers+2
   1610  f42e		       a7 94		      lax	score+1
   1611  f430		       20 58 f4 	      jsr	scorepointerset
   1612  f433		       84 9a		      sty	scorepointers+4
   1613  f435		       86 97		      stx	scorepointers+1
   1614  f437		       a7 93		      lax	score
   1615  f439		       20 58 f4 	      jsr	scorepointerset
   1616  f43c		       84 99		      sty	scorepointers+3
   1617  f43e		       86 96		      stx	scorepointers
   1618  f440
   1619  f440				   vblk
   1620  f440							; run possible vblank bB code
   1621  f440				  -	      ifconst	vblank_bB_code
   1622  f440				  -	      jsr	vblank_bB_code
   1623  f440					      endif
   1624  f440				   vblk2
   1625  f440		       ad 84 02 	      LDA	INTIM
   1626  f443		       30 fb		      bmi	vblk2
   1627  f445		       4c 34 f0 	      jmp	kernel
   1628  f448
   1629  f448
   1630  f448		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f451		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f458				   repostable
   1633  f458
   1634  f458				   scorepointerset
   1635  f458		       29 0f		      and	#$0F
   1636  f45a		       0a		      asl
   1637  f45b		       0a		      asl
   1638  f45c		       0a		      asl
   1639  f45d		       69 9c		      adc	#<scoretable
   1640  f45f		       a8		      tay
   1641  f460		       8a		      txa
   1642  f461							; and #$F0
   1643  f461							; lsr
   1644  f461		       4b f0		      asr	#$F0
   1645  f463		       69 9c		      adc	#<scoretable
   1646  f465		       aa		      tax
   1647  f466		       60		      rts
   1648  f467				   game
   1649  f467				   .
   1650  f467							; 
   1651  f467
   1652  f467				   .
   1653  f467							; 
   1654  f467
   1655  f467				   .
   1656  f467							; 
   1657  f467
   1658  f467				   .
   1659  f467							; 
   1660  f467
   1661  f467				   .
   1662  f467							; 
   1663  f467
   1664  f467				   .
   1665  f467							; 
   1666  f467
   1667  f467				   .
   1668  f467							; 
   1669  f467
   1670  f467				   .
   1671  f467							; 
   1672  f467
   1673  f467				   .
   1674  f467							; 
   1675  f467
   1676  f467				   .
   1677  f467							; 
   1678  f467
   1679  f467				   .
   1680  f467							; 
   1681  f467
   1682  f467				   .
   1683  f467							; 
   1684  f467
   1685  f467				   .
   1686  f467							; 
   1687  f467
   1688  f467				   .
   1689  f467							; 
   1690  f467
   1691  f467				   .
   1692  f467							; 
   1693  f467
   1694  f467				   .
   1695  f467							; 
   1696  f467
   1697  f467				   .
   1698  f467							; 
   1699  f467
   1700  f467				   .
   1701  f467							; 
   1702  f467
   1703  f467				   .
   1704  f467							; 
   1705  f467
   1706  f467				   .
   1707  f467							; 
   1708  f467
   1709  f467				   .
   1710  f467							; 
   1711  f467
   1712  f467				   .
   1713  f467							; 
   1714  f467
   1715  f467				   .
   1716  f467							; 
   1717  f467
   1718  f467				   .
   1719  f467							; 
   1720  f467
   1721  f467				   .
   1722  f467							; 
   1723  f467
   1724  f467				   .
   1725  f467							; 
   1726  f467
   1727  f467				   .
   1728  f467							; 
   1729  f467
   1730  f467				   .
   1731  f467							; 
   1732  f467
   1733  f467				   .
   1734  f467							; 
   1735  f467
   1736  f467				   .
   1737  f467							; 
   1738  f467
   1739  f467				   .
   1740  f467							; 
   1741  f467
   1742  f467				   .
   1743  f467							; 
   1744  f467
   1745  f467				   .
   1746  f467							; 
   1747  f467
   1748  f467				   .
   1749  f467							; 
   1750  f467
   1751  f467				   .
   1752  f467							; 
   1753  f467
   1754  f467				   .
   1755  f467							; 
   1756  f467
   1757  f467				   .
   1758  f467							; 
   1759  f467
   1760  f467				   .
   1761  f467							; 
   1762  f467
   1763  f467				   .
   1764  f467							; 
   1765  f467
   1766  f467				   .
   1767  f467							; 
   1768  f467
   1769  f467				   .
   1770  f467							; 
   1771  f467
   1772  f467				   .
   1773  f467							; 
   1774  f467
   1775  f467				   .
   1776  f467							; 
   1777  f467
   1778  f467				   .
   1779  f467							; 
   1780  f467
   1781  f467				   .
   1782  f467							; 
   1783  f467
   1784  f467				   .
   1785  f467							; 
   1786  f467
   1787  f467				   .
   1788  f467							; 
   1789  f467
   1790  f467				   .
   1791  f467							; 
   1792  f467
   1793  f467				   .
   1794  f467							; 
   1795  f467
   1796  f467				   .
   1797  f467							; 
   1798  f467
   1799  f467				   .
   1800  f467							; 
   1801  f467
   1802  f467				   .
   1803  f467							; 
   1804  f467
   1805  f467				   .
   1806  f467							; 
   1807  f467
   1808  f467				   .
   1809  f467							; 
   1810  f467
   1811  f467				   .
   1812  f467							; 
   1813  f467
   1814  f467				   .
   1815  f467							; 
   1816  f467
   1817  f467				   .
   1818  f467							; 
   1819  f467
   1820  f467				   .L00 		;  dim _Master_Counter  =  a
   1821  f467
   1822  f467				   .L01 		;  dim _Frame_Counter	=  b
   1823  f467
   1824  f467				   .
   1825  f467							; 
   1826  f467
   1827  f467				   .
   1828  f467							; 
   1829  f467
   1830  f467				   .
   1831  f467							; 
   1832  f467
   1833  f467				   .
   1834  f467							; 
   1835  f467
   1836  f467				   .L02 		;  dim _Ch0_Sound  =  c
   1837  f467
   1838  f467				   .L03 		;  dim _Ch0_Duration  =  d
   1839  f467
   1840  f467				   .L04 		;  dim _Ch0_Counter  =  e
   1841  f467
   1842  f467				   .
   1843  f467							; 
   1844  f467
   1845  f467				   .
   1846  f467							; 
   1847  f467
   1848  f467				   .
   1849  f467							; 
   1850  f467
   1851  f467				   .
   1852  f467							; 
   1853  f467
   1854  f467				   .
   1855  f467							; 
   1856  f467
   1857  f467				   .
   1858  f467							; 
   1859  f467
   1860  f467				   .L05 		;  dim _Pause_Counter_Tmp  =  h
   1861  f467
   1862  f467				   .
   1863  f467							; 
   1864  f467
   1865  f467				   .
   1866  f467							; 
   1867  f467
   1868  f467				   .
   1869  f467							; 
   1870  f467
   1871  f467				   .
   1872  f467							; 
   1873  f467
   1874  f467				   .
   1875  f467							; 
   1876  f467
   1877  f467				   .
   1878  f467							; 
   1879  f467
   1880  f467				   .L06 		;  dim _AP_2_Sec_Score_Flip  =  i
   1881  f467
   1882  f467				   .
   1883  f467							; 
   1884  f467
   1885  f467				   .
   1886  f467							; 
   1887  f467
   1888  f467				   .
   1889  f467							; 
   1890  f467
   1891  f467				   .
   1892  f467							; 
   1893  f467
   1894  f467				   .
   1895  f467							; 
   1896  f467
   1897  f467				   .
   1898  f467							; 
   1899  f467
   1900  f467				   .L07 		;  dim _Pause_Mem_Color_Tmp  =  i
   1901  f467
   1902  f467				   .
   1903  f467							; 
   1904  f467
   1905  f467				   .
   1906  f467							; 
   1907  f467
   1908  f467				   .
   1909  f467							; 
   1910  f467
   1911  f467				   .
   1912  f467							; 
   1913  f467
   1914  f467				   .
   1915  f467							; 
   1916  f467
   1917  f467				   .
   1918  f467							; 
   1919  f467
   1920  f467				   .L08 		;  dim _AP_Dir_Counter  =  j
   1921  f467
   1922  f467				   .
   1923  f467							; 
   1924  f467
   1925  f467				   .
   1926  f467							; 
   1927  f467
   1928  f467				   .
   1929  f467							; 
   1930  f467
   1931  f467				   .
   1932  f467							; 
   1933  f467
   1934  f467				   .
   1935  f467							; 
   1936  f467
   1937  f467				   .
   1938  f467							; 
   1939  f467
   1940  f467				   .L09 		;  dim _Pause_Color_Tmp  =  j
   1941  f467
   1942  f467				   .
   1943  f467							; 
   1944  f467
   1945  f467				   .
   1946  f467							; 
   1947  f467
   1948  f467				   .
   1949  f467							; 
   1950  f467
   1951  f467				   .
   1952  f467							; 
   1953  f467
   1954  f467				   .
   1955  f467							; 
   1956  f467
   1957  f467				   .L010		;  dim _BitOp_02  =  r
   1958  f467
   1959  f467				   .
   1960  f467							; 
   1961  f467
   1962  f467				   .
   1963  f467							; 
   1964  f467
   1965  f467				   .
   1966  f467							; 
   1967  f467
   1968  f467				   .
   1969  f467							; 
   1970  f467
   1971  f467				   .L011		;  dim _Bit0_BW_Mem  =  r
   1972  f467
   1973  f467				   .
   1974  f467							; 
   1975  f467
   1976  f467				   .
   1977  f467							; 
   1978  f467
   1979  f467				   .
   1980  f467							; 
   1981  f467
   1982  f467				   .
   1983  f467							; 
   1984  f467
   1985  f467				   .L012		;  dim _Bit1_BW_Check	=  r
   1986  f467
   1987  f467				   .
   1988  f467							; 
   1989  f467
   1990  f467				   .
   1991  f467							; 
   1992  f467
   1993  f467				   .
   1994  f467							; 
   1995  f467
   1996  f467				   .
   1997  f467							; 
   1998  f467
   1999  f467				   .L013		;  dim _Bit2_Pause_Clr_Scheme	=  r
   2000  f467
   2001  f467				   .
   2002  f467							; 
   2003  f467
   2004  f467				   .
   2005  f467							; 
   2006  f467
   2007  f467				   .
   2008  f467							; 
   2009  f467
   2010  f467				   .
   2011  f467							; 
   2012  f467
   2013  f467				   .L014		;  dim _Bit3_AP_P0_Dir  =  r
   2014  f467
   2015  f467				   .
   2016  f467							; 
   2017  f467
   2018  f467				   .
   2019  f467							; 
   2020  f467
   2021  f467				   .
   2022  f467							; 
   2023  f467
   2024  f467				   .
   2025  f467							; 
   2026  f467
   2027  f467				   .
   2028  f467							; 
   2029  f467
   2030  f467				   .
   2031  f467							; 
   2032  f467
   2033  f467				   .
   2034  f467							; 
   2035  f467
   2036  f467				   .
   2037  f467							; 
   2038  f467
   2039  f467				   .L015		;  dim _sc1  =  score
   2040  f467
   2041  f467				   .L016		;  dim _sc2  =  score + 1
   2042  f467
   2043  f467				   .L017		;  dim _sc3  =  score + 2
   2044  f467
   2045  f467				   .
   2046  f467							; 
   2047  f467
   2048  f467				   .
   2049  f467							; 
   2050  f467
   2051  f467				   .
   2052  f467							; 
   2053  f467
   2054  f467				   .
   2055  f467							; 
   2056  f467
   2057  f467				   .
   2058  f467							; 
   2059  f467
   2060  f467				   .
   2061  f467							; 
   2062  f467
   2063  f467				   .
   2064  f467							; 
   2065  f467
   2066  f467				   .L018		;  dim _Score1_Mem  =	s
   2067  f467
   2068  f467				   .L019		;  dim _Score2_Mem  =	t
   2069  f467
   2070  f467				   .L020		;  dim _Score3_Mem  =	u
   2071  f467
   2072  f467				   .
   2073  f467							; 
   2074  f467
   2075  f467				   .
   2076  f467							; 
   2077  f467
   2078  f467				   .
   2079  f467							; 
   2080  f467
   2081  f467				   .
   2082  f467							; 
   2083  f467
   2084  f467				   .L021		;  dim _High_Score1  =  v
   2085  f467
   2086  f467				   .L022		;  dim _High_Score2  =  w
   2087  f467
   2088  f467				   .L023		;  dim _High_Score3  =  x
   2089  f467
   2090  f467				   .
   2091  f467							; 
   2092  f467
   2093  f467				   .
   2094  f467							; 
   2095  f467
   2096  f467				   .
   2097  f467							; 
   2098  f467
   2099  f467				   .
   2100  f467							; 
   2101  f467
   2102  f467				   .L024		;  dim _BitOp_01  =  y
   2103  f467
   2104  f467				   .L025		;  dim _Bit0_Reset_Restrainer	=  y
   2105  f467
   2106  f467				   .L026		;  dim _Bit1_FireB_Restrainer	=  y
   2107  f467
   2108  f467				   .L027		;  dim _Bit2_Game_Control  =  y
   2109  f467
   2110  f467				   .L028		;  dim _Bit3_Auto_Play  =  y
   2111  f467
   2112  f467				   .L029		;  dim _Bit6_Swap_Scores  =  y
   2113  f467
   2114  f467				   .L030		;  dim _Bit7_Last_Life  =  y
   2115  f467
   2116  f467				   .
   2117  f467							; 
   2118  f467
   2119  f467				   .
   2120  f467							; 
   2121  f467
   2122  f467				   .
   2123  f467							; 
   2124  f467
   2125  f467				   .
   2126  f467							; 
   2127  f467
   2128  f467				   .L031		;  dim rand16	=  z
   2129  f467
   2130  f467				   .
   2131  f467							; 
   2132  f467
   2133  f467				   .
   2134  f467							; 
   2135  f467
   2136  f467				   .
   2137  f467							; 
   2138  f467
   2139  f467				   .
   2140  f467							; 
   2141  f467
   2142  f467				   .
   2143  f467							; 
   2144  f467
   2145  f467				   .
   2146  f467							; 
   2147  f467
   2148  f467				   .
   2149  f467							; 
   2150  f467
   2151  f467				   .L032		;  const pfscore  =  1
   2152  f467
   2153  f467				   .
   2154  f467							; 
   2155  f467
   2156  f467				   .
   2157  f467							; 
   2158  f467
   2159  f467				   .
   2160  f467							; 
   2161  f467
   2162  f467				   .
   2163  f467							; 
   2164  f467
   2165  f467				   .
   2166  f467							; 
   2167  f467
   2168  f467				   .
   2169  f467							; 
   2170  f467
   2171  f467				   .
   2172  f467							; 
   2173  f467
   2174  f467				   .
   2175  f467							; 
   2176  f467
   2177  f467				   .
   2178  f467							; 
   2179  f467
   2180  f467				   .L033		;  const _P_Edge_Top  =  10
   2181  f467
   2182  f467				   .L034		;  const _P_Edge_Bottom  =  83
   2183  f467
   2184  f467				   .L035		;  const _P_Edge_Left	=  1
   2185  f467
   2186  f467				   .L036		;  const _P_Edge_Right  =  153
   2187  f467
   2188  f467				   .
   2189  f467							; 
   2190  f467
   2191  f467				   .
   2192  f467							; 
   2193  f467
   2194  f467				   .
   2195  f467							; 
   2196  f467
   2197  f467				   .
   2198  f467							; 
   2199  f467
   2200  f467				   .
   2201  f467							; 
   2202  f467
   2203  f467				   .
   2204  f467							; 
   2205  f467
   2206  f467				   .
   2207  f467							; 
   2208  f467
   2209  f467				   .
   2210  f467							; 
   2211  f467
   2212  f467				   .
   2213  f467							; 
   2214  f467
   2215  f467				   .
   2216  f467							; 
   2217  f467
   2218  f467				   .
   2219  f467							; 
   2220  f467
   2221  f467				   .__Start_Restart
   2222  f467							; __Start_Restart
   2223  f467
   2224  f467				   .
   2225  f467							; 
   2226  f467
   2227  f467				   .
   2228  f467							; 
   2229  f467
   2230  f467				   .
   2231  f467							; 
   2232  f467
   2233  f467				   .
   2234  f467							; 
   2235  f467
   2236  f467				   .
   2237  f467							; 
   2238  f467
   2239  f467				   .
   2240  f467							; 
   2241  f467
   2242  f467				   .L037		;  AUDV0  =  0  :  AUDV1  =  0
   2243  f467
   2244  f467		       a9 00		      LDA	#0
   2245  f469		       85 19		      STA	AUDV0
   2246  f46b		       85 1a		      STA	AUDV1
   2247  f46d				   .
   2248  f46d							; 
   2249  f46d
   2250  f46d				   .
   2251  f46d							; 
   2252  f46d
   2253  f46d				   .
   2254  f46d							; 
   2255  f46d
   2256  f46d				   .
   2257  f46d							; 
   2258  f46d
   2259  f46d				   .
   2260  f46d							; 
   2261  f46d
   2262  f46d				   .
   2263  f46d							; 
   2264  f46d
   2265  f46d				   .
   2266  f46d							; 
   2267  f46d
   2268  f46d				   .
   2269  f46d							; 
   2270  f46d
   2271  f46d				   .
   2272  f46d							; 
   2273  f46d
   2274  f46d				   .
   2275  f46d							; 
   2276  f46d
   2277  f46d				   .
   2278  f46d							; 
   2279  f46d
   2280  f46d				   .L038		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2281  f46d
   2282  f46d		       a9 00		      LDA	#0
   2283  f46f		       85 d4		      STA	a
   2284  f471		       85 d5		      STA	b
   2285  f473		       85 d6		      STA	c
   2286  f475		       85 d7		      STA	d
   2287  f477		       85 d8		      STA	e
   2288  f479		       85 d9		      STA	f
   2289  f47b		       85 da		      STA	g
   2290  f47d		       85 db		      STA	h
   2291  f47f		       85 dc		      STA	i
   2292  f481				   .L039		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2293  f481
   2294  f481		       a9 00		      LDA	#0
   2295  f483		       85 dd		      STA	j
   2296  f485		       85 de		      STA	k
   2297  f487		       85 df		      STA	l
   2298  f489		       85 e0		      STA	m
   2299  f48b		       85 e1		      STA	n
   2300  f48d		       85 e2		      STA	o
   2301  f48f		       85 e3		      STA	p
   2302  f491		       85 e4		      STA	q
   2303  f493		       85 e5		      STA	r
   2304  f495				   .L040		;  s  =  0  :	t  =  0  :  u  =  0
   2305  f495
   2306  f495		       a9 00		      LDA	#0
   2307  f497		       85 e6		      STA	s
   2308  f499		       85 e7		      STA	t
   2309  f49b		       85 e8		      STA	u
   2310  f49d				   .
   2311  f49d							; 
   2312  f49d
   2313  f49d				   .
   2314  f49d							; 
   2315  f49d
   2316  f49d				   .
   2317  f49d							; 
   2318  f49d
   2319  f49d				   .
   2320  f49d							; 
   2321  f49d
   2322  f49d				   .
   2323  f49d							; 
   2324  f49d
   2325  f49d				   .
   2326  f49d							; 
   2327  f49d
   2328  f49d				   .
   2329  f49d							; 
   2330  f49d
   2331  f49d				   .
   2332  f49d							; 
   2333  f49d
   2334  f49d				   .
   2335  f49d							; 
   2336  f49d
   2337  f49d				   .L041		;  _BitOp_01  =  _BitOp_01  &	%00000100
   2338  f49d
   2339  f49d		       a5 ec		      LDA	_BitOp_01
   2340  f49f		       29 04		      AND	#%00000100
   2341  f4a1		       85 ec		      STA	_BitOp_01
   2342  f4a3				   .
   2343  f4a3							; 
   2344  f4a3
   2345  f4a3				   .
   2346  f4a3							; 
   2347  f4a3
   2348  f4a3				   .
   2349  f4a3							; 
   2350  f4a3
   2351  f4a3				   .
   2352  f4a3							; 
   2353  f4a3
   2354  f4a3				   .
   2355  f4a3							; 
   2356  f4a3
   2357  f4a3				   .
   2358  f4a3							; 
   2359  f4a3
   2360  f4a3				   .L042		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200
   2361  f4a3
   2362  f4a3		       a9 c8		      LDA	#200
   2363  f4a5		       85 85		      STA	player0y
   2364  f4a7		       85 86		      STA	player1y
   2365  f4a9		       85 91		      STA	missile0y
   2366  f4ab				   .
   2367  f4ab							; 
   2368  f4ab
   2369  f4ab				   .
   2370  f4ab							; 
   2371  f4ab
   2372  f4ab				   .
   2373  f4ab							; 
   2374  f4ab
   2375  f4ab				   .
   2376  f4ab							; 
   2377  f4ab
   2378  f4ab				   .
   2379  f4ab							; 
   2380  f4ab
   2381  f4ab				   .
   2382  f4ab							; 
   2383  f4ab
   2384  f4ab				   .
   2385  f4ab							; 
   2386  f4ab
   2387  f4ab				   .
   2388  f4ab							; 
   2389  f4ab
   2390  f4ab				   .
   2391  f4ab							; 
   2392  f4ab
   2393  f4ab				   .
   2394  f4ab							; 
   2395  f4ab
   2396  f4ab				   .L043		;  if _Bit2_Game_Control{2} then goto __Main_Loop_Setup
   2397  f4ab
   2398  f4ab		       a5 ec		      LDA	_Bit2_Game_Control
   2399  f4ad		       29 04		      AND	#4
   2400  f4af		       f0 03		      BEQ	.skipL043
   2401  f4b1				   .condpart0
   2402  f4b1		       4c 4b f5 	      jmp	.__Main_Loop_Setup
   2403  f4b4
   2404  f4b4				   .skipL043
   2405  f4b4				   .
   2406  f4b4							; 
   2407  f4b4
   2408  f4b4				   .
   2409  f4b4							; 
   2410  f4b4
   2411  f4b4				   .
   2412  f4b4							; 
   2413  f4b4
   2414  f4b4				   .
   2415  f4b4							; 
   2416  f4b4
   2417  f4b4				   .
   2418  f4b4							; 
   2419  f4b4
   2420  f4b4				   .
   2421  f4b4							; 
   2422  f4b4
   2423  f4b4				   .
   2424  f4b4							; 
   2425  f4b4
   2426  f4b4				   .
   2427  f4b4							; 
   2428  f4b4
   2429  f4b4				   .
   2430  f4b4							; 
   2431  f4b4
   2432  f4b4				   .
   2433  f4b4							; 
   2434  f4b4
   2435  f4b4				   .
   2436  f4b4							; 
   2437  f4b4
   2438  f4b4				   .__Setup_Title_Screen
   2439  f4b4							; __Setup_Title_Screen
   2440  f4b4
   2441  f4b4				   .
   2442  f4b4							; 
   2443  f4b4
   2444  f4b4				   .
   2445  f4b4							; 
   2446  f4b4
   2447  f4b4				   .
   2448  f4b4							; 
   2449  f4b4
   2450  f4b4				   .
   2451  f4b4							; 
   2452  f4b4
   2453  f4b4				   .
   2454  f4b4							; 
   2455  f4b4
   2456  f4b4				   .
   2457  f4b4							; 
   2458  f4b4
   2459  f4b4				   .L044		;  pfscore1  =  0  :  scorecolor  =  $20
   2460  f4b4
   2461  f4b4		       a9 00		      LDA	#0
   2462  f4b6		       85 f2		      STA	pfscore1
   2463  f4b8		       a9 20		      LDA	#$20
   2464  f4ba		       85 a3		      STA	scorecolor
   2465  f4bc				   .
   2466  f4bc							; 
   2467  f4bc
   2468  f4bc				   .
   2469  f4bc							; 
   2470  f4bc
   2471  f4bc				   .
   2472  f4bc							; 
   2473  f4bc
   2474  f4bc				   .
   2475  f4bc							; 
   2476  f4bc
   2477  f4bc				   .
   2478  f4bc							; 
   2479  f4bc
   2480  f4bc				   .
   2481  f4bc							; 
   2482  f4bc
   2483  f4bc				   .L045		;  COLUBK  =  $20
   2484  f4bc
   2485  f4bc		       a9 20		      LDA	#$20
   2486  f4be		       85 09		      STA	COLUBK
   2487  f4c0				   .
   2488  f4c0							; 
   2489  f4c0
   2490  f4c0				   .
   2491  f4c0							; 
   2492  f4c0
   2493  f4c0				   .
   2494  f4c0							; 
   2495  f4c0
   2496  f4c0				   .
   2497  f4c0							; 
   2498  f4c0
   2499  f4c0				   .
   2500  f4c0							; 
   2501  f4c0
   2502  f4c0				   .
   2503  f4c0							; 
   2504  f4c0
   2505  f4c0				   .
   2506  f4c0							; 
   2507  f4c0
   2508  f4c0				   .
   2509  f4c0							; 
   2510  f4c0
   2511  f4c0				   .
   2512  f4c0							; 
   2513  f4c0
   2514  f4c0				   .
   2515  f4c0							; 
   2516  f4c0
   2517  f4c0				   .
   2518  f4c0							; 
   2519  f4c0
   2520  f4c0				   .L046		;  _Bit0_Reset_Restrainer{0}  =  1
   2521  f4c0
   2522  f4c0		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2523  f4c2		       09 01		      ORA	#1
   2524  f4c4		       85 ec		      STA	_Bit0_Reset_Restrainer
   2525  f4c6				   .
   2526  f4c6							; 
   2527  f4c6
   2528  f4c6				   .
   2529  f4c6							; 
   2530  f4c6
   2531  f4c6				   .
   2532  f4c6							; 
   2533  f4c6
   2534  f4c6				   .
   2535  f4c6							; 
   2536  f4c6
   2537  f4c6				   .
   2538  f4c6							; 
   2539  f4c6
   2540  f4c6				   .
   2541  f4c6							; 
   2542  f4c6
   2543  f4c6				   .L047		;  playfield:
   2544  f4c6
   2545  f4c6				  -	      ifconst	pfres
   2546  f4c6				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2547  f4c6					      else
   2548  f4c6		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2549  f4c8					      endif
   2550  f4c8		       4c f7 f4 	      jmp	pflabel0
   2551  f4cb				   PF_data0
   2552  f4cb		       e9 6a		      .byte.b	%11101001, %01101010
   2553  f4cd					      if	(pfwidth>2)
   2554  f4cd		       c9 ea		      .byte.b	%11001001, %11101010
   2555  f4cf					      endif
   2556  f4cf		       49 2a		      .byte.b	%01001001, %00101010
   2557  f4d1					      if	(pfwidth>2)
   2558  f4d1		       a9 4a		      .byte.b	%10101001, %01001010
   2559  f4d3					      endif
   2560  f4d3		       4d 66		      .byte.b	%01001101, %01100110
   2561  f4d5					      if	(pfwidth>2)
   2562  f4d5		       cd 4a		      .byte.b	%11001101, %01001010
   2563  f4d7					      endif
   2564  f4d7		       4b 2a		      .byte.b	%01001011, %00101010
   2565  f4d9					      if	(pfwidth>2)
   2566  f4d9		       ab 4a		      .byte.b	%10101011, %01001010
   2567  f4db					      endif
   2568  f4db		       49 6a		      .byte.b	%01001001, %01101010
   2569  f4dd					      if	(pfwidth>2)
   2570  f4dd		       a9 4e		      .byte.b	%10101001, %01001110
   2571  f4df					      endif
   2572  f4df		       00 00		      .byte.b	%00000000, %00000000
   2573  f4e1					      if	(pfwidth>2)
   2574  f4e1		       00 00		      .byte.b	%00000000, %00000000
   2575  f4e3					      endif
   2576  f4e3		       08 bd		      .byte.b	%00001000, %10111101
   2577  f4e5					      if	(pfwidth>2)
   2578  f4e5		       c8 07		      .byte.b	%11001000, %00000111
   2579  f4e7					      endif
   2580  f4e7		       08 a5		      .byte.b	%00001000, %10100101
   2581  f4e9					      if	(pfwidth>2)
   2582  f4e9		       28 09		      .byte.b	%00101000, %00001001
   2583  f4eb					      endif
   2584  f4eb		       08 a5		      .byte.b	%00001000, %10100101
   2585  f4ed					      if	(pfwidth>2)
   2586  f4ed		       88 09		      .byte.b	%10001000, %00001001
   2587  f4ef					      endif
   2588  f4ef		       0a a5		      .byte.b	%00001010, %10100101
   2589  f4f1					      if	(pfwidth>2)
   2590  f4f1		       48 09		      .byte.b	%01001000, %00001001
   2591  f4f3					      endif
   2592  f4f3		       0d bd		      .byte.b	%00001101, %10111101
   2593  f4f5					      if	(pfwidth>2)
   2594  f4f5		       2e 07		      .byte.b	%00101110, %00000111
   2595  f4f7					      endif
   2596  f4f7				   pflabel0
   2597  f4f7		       bd cb f4 	      lda	PF_data0,x
   2598  f4fa		       95 a4		      sta	playfield,x
   2599  f4fc		       ca		      dex
   2600  f4fd		       10 f8		      bpl	pflabel0
   2601  f4ff				   .
   2602  f4ff							; 
   2603  f4ff
   2604  f4ff				   .
   2605  f4ff							; 
   2606  f4ff
   2607  f4ff				   .
   2608  f4ff							; 
   2609  f4ff
   2610  f4ff				   .
   2611  f4ff							; 
   2612  f4ff
   2613  f4ff				   .
   2614  f4ff							; 
   2615  f4ff
   2616  f4ff				   .
   2617  f4ff							; 
   2618  f4ff
   2619  f4ff				   .
   2620  f4ff							; 
   2621  f4ff
   2622  f4ff				   .
   2623  f4ff							; 
   2624  f4ff
   2625  f4ff				   .
   2626  f4ff							; 
   2627  f4ff
   2628  f4ff				   .
   2629  f4ff							; 
   2630  f4ff
   2631  f4ff				   .
   2632  f4ff							; 
   2633  f4ff
   2634  f4ff				   .__Title_Screen_Loop
   2635  f4ff							; __Title_Screen_Loop
   2636  f4ff
   2637  f4ff				   .
   2638  f4ff							; 
   2639  f4ff
   2640  f4ff				   .
   2641  f4ff							; 
   2642  f4ff
   2643  f4ff				   .
   2644  f4ff							; 
   2645  f4ff
   2646  f4ff				   .
   2647  f4ff							; 
   2648  f4ff
   2649  f4ff				   .
   2650  f4ff							; 
   2651  f4ff
   2652  f4ff				   .
   2653  f4ff							; 
   2654  f4ff
   2655  f4ff				   .
   2656  f4ff							; 
   2657  f4ff
   2658  f4ff				   .L048		;  COLUPF  =  $D8
   2659  f4ff
   2660  f4ff		       a9 d8		      LDA	#$D8
   2661  f501		       85 08		      STA	COLUPF
   2662  f503				   .
   2663  f503							; 
   2664  f503
   2665  f503				   .
   2666  f503							; 
   2667  f503
   2668  f503				   .
   2669  f503							; 
   2670  f503
   2671  f503				   .
   2672  f503							; 
   2673  f503
   2674  f503				   .
   2675  f503							; 
   2676  f503
   2677  f503				   .
   2678  f503							; 
   2679  f503
   2680  f503				   .
   2681  f503							; 
   2682  f503
   2683  f503				   .
   2684  f503							; 
   2685  f503
   2686  f503				   .
   2687  f503							; 
   2688  f503
   2689  f503				   .
   2690  f503							; 
   2691  f503
   2692  f503				   .
   2693  f503							; 
   2694  f503
   2695  f503				   .
   2696  f503							; 
   2697  f503
   2698  f503				   .
   2699  f503							; 
   2700  f503
   2701  f503				   .L049		;  _Master_Counter  =	_Master_Counter  +  1
   2702  f503
   2703  f503		       e6 d4		      INC	_Master_Counter
   2704  f505				   .
   2705  f505							; 
   2706  f505
   2707  f505				   .
   2708  f505							; 
   2709  f505
   2710  f505				   .
   2711  f505							; 
   2712  f505
   2713  f505				   .
   2714  f505							; 
   2715  f505
   2716  f505				   .L050		;  if _Master_Counter	<  60 then goto __TS_AP_Skip
   2717  f505
   2718  f505		       a5 d4		      LDA	_Master_Counter
   2719  f507		       c9 3c		      CMP	#60
   2720  f509		       b0 03		      BCS	.skipL050
   2721  f50b				   .condpart1
   2722  f50b		       4c 23 f5 	      jmp	.__TS_AP_Skip
   2723  f50e
   2724  f50e				   .skipL050
   2725  f50e				   .
   2726  f50e							; 
   2727  f50e
   2728  f50e				   .
   2729  f50e							; 
   2730  f50e
   2731  f50e				   .
   2732  f50e							; 
   2733  f50e
   2734  f50e				   .
   2735  f50e							; 
   2736  f50e
   2737  f50e				   .L051		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2738  f50e
   2739  f50e		       e6 d5		      INC	_Frame_Counter
   2740  f510		       a9 00		      LDA	#0
   2741  f512		       85 d4		      STA	_Master_Counter
   2742  f514				   .
   2743  f514							; 
   2744  f514
   2745  f514				   .
   2746  f514							; 
   2747  f514
   2748  f514				   .
   2749  f514							; 
   2750  f514
   2751  f514				   .
   2752  f514							; 
   2753  f514
   2754  f514				   .
   2755  f514							; 
   2756  f514
   2757  f514				   .
   2758  f514							; 
   2759  f514
   2760  f514				   .
   2761  f514							; 
   2762  f514
   2763  f514				   .L052		;  if _Frame_Counter  >  9 then _Bit3_Auto_Play{3}  =	1  :  goto __Main_Loop_Setup
   2764  f514
   2765  f514		       a9 09		      LDA	#9
   2766  f516		       c5 d5		      CMP	_Frame_Counter
   2767  f518		       b0 09		      BCS	.skipL052
   2768  f51a				   .condpart2
   2769  f51a		       a5 ec		      LDA	_Bit3_Auto_Play
   2770  f51c		       09 08		      ORA	#8
   2771  f51e		       85 ec		      STA	_Bit3_Auto_Play
   2772  f520		       4c 4b f5 	      jmp	.__Main_Loop_Setup
   2773  f523
   2774  f523				   .skipL052
   2775  f523				   .
   2776  f523							; 
   2777  f523
   2778  f523				   .__TS_AP_Skip
   2779  f523							; __TS_AP_Skip
   2780  f523
   2781  f523				   .
   2782  f523							; 
   2783  f523
   2784  f523				   .
   2785  f523							; 
   2786  f523
   2787  f523				   .
   2788  f523							; 
   2789  f523
   2790  f523				   .
   2791  f523							; 
   2792  f523
   2793  f523				   .
   2794  f523							; 
   2795  f523
   2796  f523				   .
   2797  f523							; 
   2798  f523
   2799  f523				   .
   2800  f523							; 
   2801  f523
   2802  f523				   .L053		;  drawscreen
   2803  f523
   2804  f523		       20 c7 f3 	      jsr	drawscreen
   2805  f526				   .
   2806  f526							; 
   2807  f526
   2808  f526				   .
   2809  f526							; 
   2810  f526
   2811  f526				   .
   2812  f526							; 
   2813  f526
   2814  f526				   .
   2815  f526							; 
   2816  f526
   2817  f526				   .
   2818  f526							; 
   2819  f526
   2820  f526				   .
   2821  f526							; 
   2822  f526
   2823  f526				   .
   2824  f526							; 
   2825  f526
   2826  f526				   .
   2827  f526							; 
   2828  f526
   2829  f526				   .
   2830  f526							; 
   2831  f526
   2832  f526				   .
   2833  f526							; 
   2834  f526
   2835  f526				   .
   2836  f526							; 
   2837  f526
   2838  f526				   .
   2839  f526							; 
   2840  f526
   2841  f526				   .
   2842  f526							; 
   2843  f526
   2844  f526				   .
   2845  f526							; 
   2846  f526
   2847  f526				   .L054		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   2848  f526
   2849  f526		       a9 01		      lda	#1
   2850  f528		       2c 82 02 	      bit	SWCHB
   2851  f52b		       f0 0d		      BEQ	.skipL054
   2852  f52d				   .condpart3
   2853  f52d		       24 0c		      bit	INPT4
   2854  f52f		       10 09		      BPL	.skip3then
   2855  f531				   .condpart4
   2856  f531		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2857  f533		       29 fe		      AND	#254
   2858  f535		       85 ec		      STA	_Bit0_Reset_Restrainer
   2859  f537		       4c ff f4 	      jmp	.__Title_Screen_Loop
   2860  f53a
   2861  f53a				   .skip3then
   2862  f53a				   .skipL054
   2863  f53a				   .
   2864  f53a							; 
   2865  f53a
   2866  f53a				   .
   2867  f53a							; 
   2868  f53a
   2869  f53a				   .
   2870  f53a							; 
   2871  f53a
   2872  f53a				   .
   2873  f53a							; 
   2874  f53a
   2875  f53a				   .
   2876  f53a							; 
   2877  f53a
   2878  f53a				   .L055		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   2879  f53a
   2880  f53a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2881  f53c		       4a		      LSR
   2882  f53d		       90 03		      BCC	.skipL055
   2883  f53f				   .condpart5
   2884  f53f		       4c ff f4 	      jmp	.__Title_Screen_Loop
   2885  f542
   2886  f542				   .skipL055
   2887  f542				   .
   2888  f542							; 
   2889  f542
   2890  f542				   .
   2891  f542							; 
   2892  f542
   2893  f542				   .
   2894  f542							; 
   2895  f542
   2896  f542				   .
   2897  f542							; 
   2898  f542
   2899  f542				   .L056		;  _Bit2_Game_Control{2}  =  1
   2900  f542
   2901  f542		       a5 ec		      LDA	_Bit2_Game_Control
   2902  f544		       09 04		      ORA	#4
   2903  f546		       85 ec		      STA	_Bit2_Game_Control
   2904  f548				   .
   2905  f548							; 
   2906  f548
   2907  f548				   .
   2908  f548							; 
   2909  f548
   2910  f548				   .
   2911  f548							; 
   2912  f548
   2913  f548				   .
   2914  f548							; 
   2915  f548
   2916  f548				   .L057		;  goto __Start_Restart
   2917  f548
   2918  f548		       4c 67 f4 	      jmp	.__Start_Restart
   2919  f54b
   2920  f54b				   .
   2921  f54b							; 
   2922  f54b
   2923  f54b				   .
   2924  f54b							; 
   2925  f54b
   2926  f54b				   .
   2927  f54b							; 
   2928  f54b
   2929  f54b				   .
   2930  f54b							; 
   2931  f54b
   2932  f54b				   .
   2933  f54b							; 
   2934  f54b
   2935  f54b				   .
   2936  f54b							; 
   2937  f54b
   2938  f54b				   .
   2939  f54b							; 
   2940  f54b
   2941  f54b				   .
   2942  f54b							; 
   2943  f54b
   2944  f54b				   .
   2945  f54b							; 
   2946  f54b
   2947  f54b				   .
   2948  f54b							; 
   2949  f54b
   2950  f54b				   .
   2951  f54b							; 
   2952  f54b
   2953  f54b				   .__Main_Loop_Setup
   2954  f54b							; __Main_Loop_Setup
   2955  f54b
   2956  f54b				   .
   2957  f54b							; 
   2958  f54b
   2959  f54b				   .
   2960  f54b							; 
   2961  f54b
   2962  f54b				   .
   2963  f54b							; 
   2964  f54b
   2965  f54b				   .
   2966  f54b							; 
   2967  f54b
   2968  f54b				   .
   2969  f54b							; 
   2970  f54b
   2971  f54b				   .
   2972  f54b							; 
   2973  f54b
   2974  f54b				   .
   2975  f54b							; 
   2976  f54b
   2977  f54b				   .
   2978  f54b							; 
   2979  f54b
   2980  f54b				   .
   2981  f54b							; 
   2982  f54b
   2983  f54b				   .
   2984  f54b							; 
   2985  f54b
   2986  f54b				   .L058		;  _Bit2_Game_Control{2}  =  0
   2987  f54b
   2988  f54b		       a5 ec		      LDA	_Bit2_Game_Control
   2989  f54d		       29 fb		      AND	#251
   2990  f54f		       85 ec		      STA	_Bit2_Game_Control
   2991  f551				   .
   2992  f551							; 
   2993  f551
   2994  f551				   .
   2995  f551							; 
   2996  f551
   2997  f551				   .
   2998  f551							; 
   2999  f551
   3000  f551				   .
   3001  f551							; 
   3002  f551
   3003  f551				   .
   3004  f551							; 
   3005  f551
   3006  f551				   .
   3007  f551							; 
   3008  f551
   3009  f551				   .
   3010  f551							; 
   3011  f551
   3012  f551				   .
   3013  f551							; 
   3014  f551
   3015  f551				   .
   3016  f551							; 
   3017  f551
   3018  f551				   .
   3019  f551							; 
   3020  f551
   3021  f551				   .
   3022  f551							; 
   3023  f551
   3024  f551				   .
   3025  f551							; 
   3026  f551
   3027  f551				   .L059		;  _Bit0_Reset_Restrainer{0}  =  1
   3028  f551
   3029  f551		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   3030  f553		       09 01		      ORA	#1
   3031  f555		       85 ec		      STA	_Bit0_Reset_Restrainer
   3032  f557				   .
   3033  f557							; 
   3034  f557
   3035  f557				   .
   3036  f557							; 
   3037  f557
   3038  f557				   .
   3039  f557							; 
   3040  f557
   3041  f557				   .
   3042  f557							; 
   3043  f557
   3044  f557				   .
   3045  f557							; 
   3046  f557
   3047  f557				   .
   3048  f557							; 
   3049  f557
   3050  f557				   .
   3051  f557							; 
   3052  f557
   3053  f557				   .
   3054  f557							; 
   3055  f557
   3056  f557				   .
   3057  f557							; 
   3058  f557
   3059  f557				   .
   3060  f557							; 
   3061  f557
   3062  f557				   .
   3063  f557							; 
   3064  f557
   3065  f557				   .
   3066  f557							; 
   3067  f557
   3068  f557				   .L060		;  _Bit1_FireB_Restrainer{1}  =  1
   3069  f557
   3070  f557		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3071  f559		       09 02		      ORA	#2
   3072  f55b		       85 ec		      STA	_Bit1_FireB_Restrainer
   3073  f55d				   .
   3074  f55d							; 
   3075  f55d
   3076  f55d				   .
   3077  f55d							; 
   3078  f55d
   3079  f55d				   .
   3080  f55d							; 
   3081  f55d
   3082  f55d				   .
   3083  f55d							; 
   3084  f55d
   3085  f55d				   .
   3086  f55d							; 
   3087  f55d
   3088  f55d				   .
   3089  f55d							; 
   3090  f55d
   3091  f55d				   .L061		;  player0x  =  74  :	player0y  =  78
   3092  f55d
   3093  f55d		       a9 4a		      LDA	#74
   3094  f55f		       85 80		      STA	player0x
   3095  f561		       a9 4e		      LDA	#78
   3096  f563		       85 85		      STA	player0y
   3097  f565				   .
   3098  f565							; 
   3099  f565
   3100  f565				   .
   3101  f565							; 
   3102  f565
   3103  f565				   .
   3104  f565							; 
   3105  f565
   3106  f565				   .
   3107  f565							; 
   3108  f565
   3109  f565				   .
   3110  f565							; 
   3111  f565
   3112  f565				   .
   3113  f565							; 
   3114  f565
   3115  f565				   .L062		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0
   3116  f565
   3117  f565							; complex statement detected
   3118  f565		       20 b9 f3 	      jsr	randomize
   3119  f568		       4a		      lsr
   3120  f569		       48		      PHA
   3121  f56a		       20 b9 f3 	      jsr	randomize
   3122  f56d		       29 0f		      AND	#15
   3123  f56f		       ba		      TSX
   3124  f570		       e8		      INX
   3125  f571		       9a		      TXS
   3126  f572		       18		      CLC
   3127  f573		       75 00		      ADC	$00,x
   3128  f575		       85 81		      STA	player1x
   3129  f577		       a9 00		      LDA	#0
   3130  f579		       85 86		      STA	player1y
   3131  f57b				   .
   3132  f57b							; 
   3133  f57b
   3134  f57b				   .
   3135  f57b							; 
   3136  f57b
   3137  f57b				   .
   3138  f57b							; 
   3139  f57b
   3140  f57b				   .
   3141  f57b							; 
   3142  f57b
   3143  f57b				   .
   3144  f57b							; 
   3145  f57b
   3146  f57b				   .
   3147  f57b							; 
   3148  f57b
   3149  f57b				   .L063		;  missile0height  =  4  :  missile0y	=  250
   3150  f57b
   3151  f57b		       a9 04		      LDA	#4
   3152  f57d		       85 90		      STA	missile0height
   3153  f57f		       a9 fa		      LDA	#250
   3154  f581		       85 91		      STA	missile0y
   3155  f583				   .
   3156  f583							; 
   3157  f583
   3158  f583				   .
   3159  f583							; 
   3160  f583
   3161  f583				   .
   3162  f583							; 
   3163  f583
   3164  f583				   .
   3165  f583							; 
   3166  f583
   3167  f583				   .
   3168  f583							; 
   3169  f583
   3170  f583				   .
   3171  f583							; 
   3172  f583
   3173  f583				   .L064		;  scorecolor	=  $1C
   3174  f583
   3175  f583		       a9 1c		      LDA	#$1C
   3176  f585		       85 a3		      STA	scorecolor
   3177  f587				   .
   3178  f587							; 
   3179  f587
   3180  f587				   .
   3181  f587							; 
   3182  f587
   3183  f587				   .
   3184  f587							; 
   3185  f587
   3186  f587				   .
   3187  f587							; 
   3188  f587
   3189  f587				   .
   3190  f587							; 
   3191  f587
   3192  f587				   .
   3193  f587							; 
   3194  f587
   3195  f587				   .L065		;  pfscore1  =  %11111111  :  pfscorecolor  =	$D2
   3196  f587
   3197  f587		       a9 ff		      LDA	#%11111111
   3198  f589		       85 f2		      STA	pfscore1
   3199  f58b		       a9 d2		      LDA	#$D2
   3200  f58d		       85 f4		      STA	pfscorecolor
   3201  f58f				   .
   3202  f58f							; 
   3203  f58f
   3204  f58f				   .
   3205  f58f							; 
   3206  f58f
   3207  f58f				   .
   3208  f58f							; 
   3209  f58f
   3210  f58f				   .
   3211  f58f							; 
   3212  f58f
   3213  f58f				   .
   3214  f58f							; 
   3215  f58f
   3216  f58f				   .
   3217  f58f							; 
   3218  f58f
   3219  f58f				   .L066		;  player0:
   3220  f58f
   3221  f58f		       a2 d0		      LDX	#<playerL066_0
   3222  f591		       86 8a		      STX	player0pointerlo
   3223  f593		       a9 fe		      LDA	#>playerL066_0
   3224  f595		       85 8b		      STA	player0pointerhi
   3225  f597		       a9 07		      LDA	#7
   3226  f599		       85 8e		      STA	player0height
   3227  f59b				   .
   3228  f59b							; 
   3229  f59b
   3230  f59b				   .
   3231  f59b							; 
   3232  f59b
   3233  f59b				   .
   3234  f59b							; 
   3235  f59b
   3236  f59b				   .
   3237  f59b							; 
   3238  f59b
   3239  f59b				   .
   3240  f59b							; 
   3241  f59b
   3242  f59b				   .
   3243  f59b							; 
   3244  f59b
   3245  f59b				   .L067		;  playfield:
   3246  f59b
   3247  f59b				  -	      ifconst	pfres
   3248  f59b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3249  f59b					      else
   3250  f59b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3251  f59d					      endif
   3252  f59d		       4c cc f5 	      jmp	pflabel1
   3253  f5a0				   PF_data1
   3254  f5a0		       ff ff		      .byte.b	%11111111, %11111111
   3255  f5a2					      if	(pfwidth>2)
   3256  f5a2		       ff 7f		      .byte.b	%11111111, %01111111
   3257  f5a4					      endif
   3258  f5a4		       00 00		      .byte.b	%00000000, %00000000
   3259  f5a6					      if	(pfwidth>2)
   3260  f5a6		       00 00		      .byte.b	%00000000, %00000000
   3261  f5a8					      endif
   3262  f5a8		       00 00		      .byte.b	%00000000, %00000000
   3263  f5aa					      if	(pfwidth>2)
   3264  f5aa		       00 00		      .byte.b	%00000000, %00000000
   3265  f5ac					      endif
   3266  f5ac		       00 00		      .byte.b	%00000000, %00000000
   3267  f5ae					      if	(pfwidth>2)
   3268  f5ae		       00 00		      .byte.b	%00000000, %00000000
   3269  f5b0					      endif
   3270  f5b0		       00 00		      .byte.b	%00000000, %00000000
   3271  f5b2					      if	(pfwidth>2)
   3272  f5b2		       00 00		      .byte.b	%00000000, %00000000
   3273  f5b4					      endif
   3274  f5b4		       00 00		      .byte.b	%00000000, %00000000
   3275  f5b6					      if	(pfwidth>2)
   3276  f5b6		       00 00		      .byte.b	%00000000, %00000000
   3277  f5b8					      endif
   3278  f5b8		       00 00		      .byte.b	%00000000, %00000000
   3279  f5ba					      if	(pfwidth>2)
   3280  f5ba		       00 00		      .byte.b	%00000000, %00000000
   3281  f5bc					      endif
   3282  f5bc		       00 00		      .byte.b	%00000000, %00000000
   3283  f5be					      if	(pfwidth>2)
   3284  f5be		       00 00		      .byte.b	%00000000, %00000000
   3285  f5c0					      endif
   3286  f5c0		       00 00		      .byte.b	%00000000, %00000000
   3287  f5c2					      if	(pfwidth>2)
   3288  f5c2		       00 00		      .byte.b	%00000000, %00000000
   3289  f5c4					      endif
   3290  f5c4		       00 00		      .byte.b	%00000000, %00000000
   3291  f5c6					      if	(pfwidth>2)
   3292  f5c6		       00 00		      .byte.b	%00000000, %00000000
   3293  f5c8					      endif
   3294  f5c8		       ff ff		      .byte.b	%11111111, %11111111
   3295  f5ca					      if	(pfwidth>2)
   3296  f5ca		       ff 7f		      .byte.b	%11111111, %01111111
   3297  f5cc					      endif
   3298  f5cc				   pflabel1
   3299  f5cc		       bd a0 f5 	      lda	PF_data1,x
   3300  f5cf		       95 a4		      sta	playfield,x
   3301  f5d1		       ca		      dex
   3302  f5d2		       10 f8		      bpl	pflabel1
   3303  f5d4				   .
   3304  f5d4							; 
   3305  f5d4
   3306  f5d4				   .
   3307  f5d4							; 
   3308  f5d4
   3309  f5d4				   .
   3310  f5d4							; 
   3311  f5d4
   3312  f5d4				   .
   3313  f5d4							; 
   3314  f5d4
   3315  f5d4				   .
   3316  f5d4							; 
   3317  f5d4
   3318  f5d4				   .
   3319  f5d4							; 
   3320  f5d4
   3321  f5d4				   .L068		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   3322  f5d4
   3323  f5d4		       a5 e5		      LDA	_Bit0_BW_Mem
   3324  f5d6		       29 fe		      AND	#254
   3325  f5d8		       85 e5		      STA	_Bit0_BW_Mem
   3326  f5da		       a9 08		      lda	#8
   3327  f5dc		       2c 82 02 	      bit	SWCHB
   3328  f5df		       d0 06		      BNE	.skipL068
   3329  f5e1				   .condpart6
   3330  f5e1		       a5 e5		      LDA	_Bit0_BW_Mem
   3331  f5e3		       09 01		      ORA	#1
   3332  f5e5		       85 e5		      STA	_Bit0_BW_Mem
   3333  f5e7				   .skipL068
   3334  f5e7				   .
   3335  f5e7							; 
   3336  f5e7
   3337  f5e7				   .
   3338  f5e7							; 
   3339  f5e7
   3340  f5e7				   .
   3341  f5e7							; 
   3342  f5e7
   3343  f5e7				   .
   3344  f5e7							; 
   3345  f5e7
   3346  f5e7				   .
   3347  f5e7							; 
   3348  f5e7
   3349  f5e7				   .
   3350  f5e7							; 
   3351  f5e7
   3352  f5e7				   .
   3353  f5e7							; 
   3354  f5e7
   3355  f5e7				   .
   3356  f5e7							; 
   3357  f5e7
   3358  f5e7				   .
   3359  f5e7							; 
   3360  f5e7
   3361  f5e7				   .L069		;  if !_Bit3_Auto_Play{3} then score  =  0  :	goto __AP_Skip_AP_Setup
   3362  f5e7
   3363  f5e7		       a5 ec		      LDA	_Bit3_Auto_Play
   3364  f5e9		       29 08		      AND	#8
   3365  f5eb		       d0 0f		      BNE	.skipL069
   3366  f5ed				   .condpart7
   3367  f5ed		       a9 00		      LDA	#$00
   3368  f5ef		       85 95		      STA	score+2
   3369  f5f1		       a9 00		      LDA	#$00
   3370  f5f3		       85 94		      STA	score+1
   3371  f5f5		       a9 00		      LDA	#$00
   3372  f5f7		       85 93		      STA	score
   3373  f5f9		       4c 14 f6 	      jmp	.__AP_Skip_AP_Setup
   3374  f5fc
   3375  f5fc				   .skipL069
   3376  f5fc				   .
   3377  f5fc							; 
   3378  f5fc
   3379  f5fc				   .
   3380  f5fc							; 
   3381  f5fc
   3382  f5fc				   .
   3383  f5fc							; 
   3384  f5fc
   3385  f5fc				   .
   3386  f5fc							; 
   3387  f5fc
   3388  f5fc				   .L070		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   3389  f5fc
   3390  f5fc		       a9 00		      LDA	#0
   3391  f5fe		       85 d4		      STA	_Master_Counter
   3392  f600		       85 d5		      STA	_Frame_Counter
   3393  f602				   .
   3394  f602							; 
   3395  f602
   3396  f602				   .
   3397  f602							; 
   3398  f602
   3399  f602				   .
   3400  f602							; 
   3401  f602
   3402  f602				   .
   3403  f602							; 
   3404  f602
   3405  f602				   .L071		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   3406  f602
   3407  f602		       a5 93		      LDA	_sc1
   3408  f604		       85 e6		      STA	_Score1_Mem
   3409  f606		       a5 94		      LDA	_sc2
   3410  f608		       85 e7		      STA	_Score2_Mem
   3411  f60a		       a5 95		      LDA	_sc3
   3412  f60c		       85 e8		      STA	_Score3_Mem
   3413  f60e				   .
   3414  f60e							; 
   3415  f60e
   3416  f60e				   .L072		;  _Bit6_Swap_Scores{6}  =  0
   3417  f60e
   3418  f60e		       a5 ec		      LDA	_Bit6_Swap_Scores
   3419  f610		       29 bf		      AND	#191
   3420  f612		       85 ec		      STA	_Bit6_Swap_Scores
   3421  f614				   .
   3422  f614							; 
   3423  f614
   3424  f614				   .__AP_Skip_AP_Setup
   3425  f614							; __AP_Skip_AP_Setup
   3426  f614
   3427  f614				   .
   3428  f614							; 
   3429  f614
   3430  f614				   .
   3431  f614							; 
   3432  f614
   3433  f614				   .
   3434  f614							; 
   3435  f614
   3436  f614				   .
   3437  f614							; 
   3438  f614
   3439  f614				   .
   3440  f614							; 
   3441  f614
   3442  f614				   .
   3443  f614							; 
   3444  f614
   3445  f614				   .
   3446  f614							; 
   3447  f614
   3448  f614				   .
   3449  f614							; 
   3450  f614
   3451  f614				   .
   3452  f614							; 
   3453  f614
   3454  f614				   .
   3455  f614							; 
   3456  f614
   3457  f614				   .
   3458  f614							; 
   3459  f614
   3460  f614				   .__Main_Loop
   3461  f614							; __Main_Loop
   3462  f614
   3463  f614				   .
   3464  f614							; 
   3465  f614
   3466  f614				   .
   3467  f614							; 
   3468  f614
   3469  f614				   .
   3470  f614							; 
   3471  f614
   3472  f614				   .
   3473  f614							; 
   3474  f614
   3475  f614				   .
   3476  f614							; 
   3477  f614
   3478  f614				   .
   3479  f614							; 
   3480  f614
   3481  f614				   .
   3482  f614							; 
   3483  f614
   3484  f614				   .L073		;  COLUBK  =  $D6
   3485  f614
   3486  f614		       a9 d6		      LDA	#$D6
   3487  f616		       85 09		      STA	COLUBK
   3488  f618				   .
   3489  f618							; 
   3490  f618
   3491  f618				   .
   3492  f618							; 
   3493  f618
   3494  f618				   .
   3495  f618							; 
   3496  f618
   3497  f618				   .
   3498  f618							; 
   3499  f618
   3500  f618				   .
   3501  f618							; 
   3502  f618
   3503  f618				   .
   3504  f618							; 
   3505  f618
   3506  f618				   .
   3507  f618							; 
   3508  f618
   3509  f618				   .L074		;  COLUPF  =  0
   3510  f618
   3511  f618		       a9 00		      LDA	#0
   3512  f61a		       85 08		      STA	COLUPF
   3513  f61c				   .
   3514  f61c							; 
   3515  f61c
   3516  f61c				   .
   3517  f61c							; 
   3518  f61c
   3519  f61c				   .
   3520  f61c							; 
   3521  f61c
   3522  f61c				   .
   3523  f61c							; 
   3524  f61c
   3525  f61c				   .
   3526  f61c							; 
   3527  f61c
   3528  f61c				   .
   3529  f61c							; 
   3530  f61c
   3531  f61c				   .
   3532  f61c							; 
   3533  f61c
   3534  f61c				   .L075		;  COLUP0  =  $22  :  COLUP1  =  $20
   3535  f61c
   3536  f61c		       a9 22		      LDA	#$22
   3537  f61e		       85 06		      STA	COLUP0
   3538  f620		       a9 20		      LDA	#$20
   3539  f622		       85 07		      STA	COLUP1
   3540  f624				   .
   3541  f624							; 
   3542  f624
   3543  f624				   .
   3544  f624							; 
   3545  f624
   3546  f624				   .
   3547  f624							; 
   3548  f624
   3549  f624				   .
   3550  f624							; 
   3551  f624
   3552  f624				   .
   3553  f624							; 
   3554  f624
   3555  f624				   .
   3556  f624							; 
   3557  f624
   3558  f624				   .
   3559  f624							; 
   3560  f624
   3561  f624				   .L076		;  NUSIZ0  =  $10
   3562  f624
   3563  f624		       a9 10		      LDA	#$10
   3564  f626		       85 04		      STA	NUSIZ0
   3565  f628				   .
   3566  f628							; 
   3567  f628
   3568  f628				   .
   3569  f628							; 
   3570  f628
   3571  f628				   .
   3572  f628							; 
   3573  f628
   3574  f628				   .
   3575  f628							; 
   3576  f628
   3577  f628				   .
   3578  f628							; 
   3579  f628
   3580  f628				   .
   3581  f628							; 
   3582  f628
   3583  f628				   .
   3584  f628							; 
   3585  f628
   3586  f628				   .L077		;  NUSIZ1  =  $05
   3587  f628
   3588  f628		       a9 05		      LDA	#$05
   3589  f62a		       85 05		      STA	NUSIZ1
   3590  f62c				   .
   3591  f62c							; 
   3592  f62c
   3593  f62c				   .
   3594  f62c							; 
   3595  f62c
   3596  f62c				   .
   3597  f62c							; 
   3598  f62c
   3599  f62c				   .
   3600  f62c							; 
   3601  f62c
   3602  f62c				   .
   3603  f62c							; 
   3604  f62c
   3605  f62c				   .
   3606  f62c							; 
   3607  f62c
   3608  f62c				   .
   3609  f62c							; 
   3610  f62c
   3611  f62c				   .
   3612  f62c							; 
   3613  f62c
   3614  f62c				   .
   3615  f62c							; 
   3616  f62c
   3617  f62c				   .
   3618  f62c							; 
   3619  f62c
   3620  f62c				   .L078		;  _Master_Counter  =	_Master_Counter  +  1
   3621  f62c
   3622  f62c		       e6 d4		      INC	_Master_Counter
   3623  f62e				   .
   3624  f62e							; 
   3625  f62e
   3626  f62e				   .
   3627  f62e							; 
   3628  f62e
   3629  f62e				   .
   3630  f62e							; 
   3631  f62e
   3632  f62e				   .
   3633  f62e							; 
   3634  f62e
   3635  f62e				   .L079		;  if _Master_Counter	<  7 then goto __Skip_Counters
   3636  f62e
   3637  f62e		       a5 d4		      LDA	_Master_Counter
   3638  f630		       c9 07		      CMP	#7
   3639  f632		       b0 03		      BCS	.skipL079
   3640  f634				   .condpart8
   3641  f634		       4c 47 f6 	      jmp	.__Skip_Counters
   3642  f637
   3643  f637				   .skipL079
   3644  f637				   .
   3645  f637							; 
   3646  f637
   3647  f637				   .
   3648  f637							; 
   3649  f637
   3650  f637				   .
   3651  f637							; 
   3652  f637
   3653  f637				   .
   3654  f637							; 
   3655  f637
   3656  f637				   .L080		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   3657  f637
   3658  f637		       e6 d5		      INC	_Frame_Counter
   3659  f639		       a9 00		      LDA	#0
   3660  f63b		       85 d4		      STA	_Master_Counter
   3661  f63d				   .
   3662  f63d							; 
   3663  f63d
   3664  f63d				   .
   3665  f63d							; 
   3666  f63d
   3667  f63d				   .
   3668  f63d							; 
   3669  f63d
   3670  f63d				   .
   3671  f63d							; 
   3672  f63d
   3673  f63d				   .L081		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   3674  f63d
   3675  f63d		       a9 03		      LDA	#3
   3676  f63f		       c5 d5		      CMP	_Frame_Counter
   3677  f641		       b0 04		      BCS	.skipL081
   3678  f643				   .condpart9
   3679  f643		       a9 00		      LDA	#0
   3680  f645		       85 d5		      STA	_Frame_Counter
   3681  f647				   .skipL081
   3682  f647				   .
   3683  f647							; 
   3684  f647
   3685  f647				   .__Skip_Counters
   3686  f647							; __Skip_Counters
   3687  f647
   3688  f647				   .
   3689  f647							; 
   3690  f647
   3691  f647				   .
   3692  f647							; 
   3693  f647
   3694  f647				   .
   3695  f647							; 
   3696  f647
   3697  f647				   .
   3698  f647							; 
   3699  f647
   3700  f647				   .
   3701  f647							; 
   3702  f647
   3703  f647				   .
   3704  f647							; 
   3705  f647
   3706  f647				   .
   3707  f647							; 
   3708  f647
   3709  f647				   .L082		;  on _Frame_Counter goto __Sq00 __Sq01 __Sq02 __Sq03
   3710  f647
   3711  f647		       a6 d5		      LDX	_Frame_Counter
   3712  f649		       bd 52 f6 	      LDA	.L082jumptablehi,x
   3713  f64c		       48		      PHA
   3714  f64d		       bd 56 f6 	      LDA	.L082jumptablelo,x
   3715  f650		       48		      PHA
   3716  f651		       60		      RTS
   3717  f652				   .L082jumptablehi
   3718  f652		       fa		      .byte.b	>(.__Sq00-1)
   3719  f653		       fa		      .byte.b	>(.__Sq01-1)
   3720  f654		       fa		      .byte.b	>(.__Sq02-1)
   3721  f655		       fa		      .byte.b	>(.__Sq03-1)
   3722  f656				   .L082jumptablelo
   3723  f656		       63		      .byte.b	<(.__Sq00-1)
   3724  f657		       72		      .byte.b	<(.__Sq01-1)
   3725  f658		       81		      .byte.b	<(.__Sq02-1)
   3726  f659		       90		      .byte.b	<(.__Sq03-1)
   3727  f65a				   .
   3728  f65a							; 
   3729  f65a
   3730  f65a				   .__Squirrel_Frame_Done
   3731  f65a							; __Squirrel_Frame_Done
   3732  f65a
   3733  f65a				   .
   3734  f65a							; 
   3735  f65a
   3736  f65a				   .
   3737  f65a							; 
   3738  f65a
   3739  f65a				   .
   3740  f65a							; 
   3741  f65a
   3742  f65a				   .
   3743  f65a							; 
   3744  f65a
   3745  f65a				   .
   3746  f65a							; 
   3747  f65a
   3748  f65a				   .
   3749  f65a							; 
   3750  f65a
   3751  f65a				   .
   3752  f65a							; 
   3753  f65a
   3754  f65a				   .
   3755  f65a							; 
   3756  f65a
   3757  f65a				   .
   3758  f65a							; 
   3759  f65a
   3760  f65a				   .
   3761  f65a							; 
   3762  f65a
   3763  f65a				   .L083		;  if missile0y  >  240 then goto __FireB_Check
   3764  f65a
   3765  f65a		       a9 f0		      LDA	#240
   3766  f65c		       c5 91		      CMP	missile0y
   3767  f65e		       b0 03		      BCS	.skipL083
   3768  f660				   .condpart10
   3769  f660		       4c 6d f6 	      jmp	.__FireB_Check
   3770  f663
   3771  f663				   .skipL083
   3772  f663				   .
   3773  f663							; 
   3774  f663
   3775  f663				   .
   3776  f663							; 
   3777  f663
   3778  f663				   .
   3779  f663							; 
   3780  f663
   3781  f663				   .
   3782  f663							; 
   3783  f663
   3784  f663				   .L084		;  missile0y  =  missile0y  -	2  :  goto __Skip_FireB
   3785  f663
   3786  f663		       a5 91		      LDA	missile0y
   3787  f665		       38		      SEC
   3788  f666		       e9 02		      SBC	#2
   3789  f668		       85 91		      STA	missile0y
   3790  f66a		       4c c5 f6 	      jmp	.__Skip_FireB
   3791  f66d
   3792  f66d				   .
   3793  f66d							; 
   3794  f66d
   3795  f66d				   .__FireB_Check
   3796  f66d							; __FireB_Check
   3797  f66d
   3798  f66d				   .
   3799  f66d							; 
   3800  f66d
   3801  f66d				   .
   3802  f66d							; 
   3803  f66d
   3804  f66d				   .
   3805  f66d							; 
   3806  f66d
   3807  f66d				   .
   3808  f66d							; 
   3809  f66d
   3810  f66d				   .L085		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Fire_Missile
   3811  f66d
   3812  f66d		       a5 ec		      LDA	_Bit3_Auto_Play
   3813  f66f		       29 08		      AND	#8
   3814  f671		       d0 03		      BNE	.skipL085
   3815  f673				   .condpart11
   3816  f673		       4c 87 f6 	      jmp	.__AP_Skip_Fire_Missile
   3817  f676
   3818  f676				   .skipL085
   3819  f676				   .
   3820  f676							; 
   3821  f676
   3822  f676				   .
   3823  f676							; 
   3824  f676
   3825  f676				   .
   3826  f676							; 
   3827  f676
   3828  f676				   .
   3829  f676							; 
   3830  f676
   3831  f676				   .
   3832  f676							; 
   3833  f676
   3834  f676				   .L086		;  temp5  =  rand  :  if temp5  <  230 then goto __Skip_FireB
   3835  f676
   3836  f676		       20 b9 f3 	      jsr	randomize
   3837  f679		       85 a0		      STA	temp5
   3838  f67b		       a5 a0		      LDA	temp5
   3839  f67d		       c9 e6		      CMP	#230
   3840  f67f		       b0 03		      BCS	.skipL086
   3841  f681				   .condpart12
   3842  f681		       4c c5 f6 	      jmp	.__Skip_FireB
   3843  f684
   3844  f684				   .skipL086
   3845  f684				   .
   3846  f684							; 
   3847  f684
   3848  f684				   .L087		;  goto __AP_Fire
   3849  f684
   3850  f684		       4c 9d f6 	      jmp	.__AP_Fire
   3851  f687
   3852  f687				   .
   3853  f687							; 
   3854  f687
   3855  f687				   .__AP_Skip_Fire_Missile
   3856  f687							; __AP_Skip_Fire_Missile
   3857  f687
   3858  f687				   .
   3859  f687							; 
   3860  f687
   3861  f687				   .
   3862  f687							; 
   3863  f687
   3864  f687				   .
   3865  f687							; 
   3866  f687
   3867  f687				   .
   3868  f687							; 
   3869  f687
   3870  f687				   .
   3871  f687							; 
   3872  f687
   3873  f687				   .L088		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Skip_FireB
   3874  f687
   3875  f687		       24 0c		      bit	INPT4
   3876  f689		       10 09		      BPL	.skipL088
   3877  f68b				   .condpart13
   3878  f68b		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3879  f68d		       29 fd		      AND	#253
   3880  f68f		       85 ec		      STA	_Bit1_FireB_Restrainer
   3881  f691		       4c c5 f6 	      jmp	.__Skip_FireB
   3882  f694
   3883  f694				   .skipL088
   3884  f694				   .
   3885  f694							; 
   3886  f694
   3887  f694				   .
   3888  f694							; 
   3889  f694
   3890  f694				   .
   3891  f694							; 
   3892  f694
   3893  f694				   .
   3894  f694							; 
   3895  f694
   3896  f694				   .
   3897  f694							; 
   3898  f694
   3899  f694				   .L089		;  if _Bit1_FireB_Restrainer{1} then goto __Skip_FireB
   3900  f694
   3901  f694		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3902  f696		       29 02		      AND	#2
   3903  f698		       f0 03		      BEQ	.skipL089
   3904  f69a				   .condpart14
   3905  f69a		       4c c5 f6 	      jmp	.__Skip_FireB
   3906  f69d
   3907  f69d				   .skipL089
   3908  f69d				   .
   3909  f69d							; 
   3910  f69d
   3911  f69d				   .__AP_Fire
   3912  f69d							; __AP_Fire
   3913  f69d
   3914  f69d				   .
   3915  f69d							; 
   3916  f69d
   3917  f69d				   .
   3918  f69d							; 
   3919  f69d
   3920  f69d				   .
   3921  f69d							; 
   3922  f69d
   3923  f69d				   .
   3924  f69d							; 
   3925  f69d
   3926  f69d				   .L090		;  missile0y  =  player0y  -  2  :  missile0x	=  player0x  +	4
   3927  f69d
   3928  f69d		       a5 85		      LDA	player0y
   3929  f69f		       38		      SEC
   3930  f6a0		       e9 02		      SBC	#2
   3931  f6a2		       85 91		      STA	missile0y
   3932  f6a4		       a5 80		      LDA	player0x
   3933  f6a6		       18		      CLC
   3934  f6a7		       69 04		      ADC	#4
   3935  f6a9		       85 82		      STA	missile0x
   3936  f6ab				   .
   3937  f6ab							; 
   3938  f6ab
   3939  f6ab				   .
   3940  f6ab							; 
   3941  f6ab
   3942  f6ab				   .
   3943  f6ab							; 
   3944  f6ab
   3945  f6ab				   .
   3946  f6ab							; 
   3947  f6ab
   3948  f6ab				   .L091		;  if _Bit3_Auto_Play{3} then goto __Skip_FireB
   3949  f6ab
   3950  f6ab		       a5 ec		      LDA	_Bit3_Auto_Play
   3951  f6ad		       29 08		      AND	#8
   3952  f6af		       f0 03		      BEQ	.skipL091
   3953  f6b1				   .condpart15
   3954  f6b1		       4c c5 f6 	      jmp	.__Skip_FireB
   3955  f6b4
   3956  f6b4				   .skipL091
   3957  f6b4				   .
   3958  f6b4							; 
   3959  f6b4
   3960  f6b4				   .
   3961  f6b4							; 
   3962  f6b4
   3963  f6b4				   .
   3964  f6b4							; 
   3965  f6b4
   3966  f6b4				   .
   3967  f6b4							; 
   3968  f6b4
   3969  f6b4				   .L092		;  if _Ch0_Sound then goto __Skip_FireB
   3970  f6b4
   3971  f6b4		       a5 d6		      LDA	_Ch0_Sound
   3972  f6b6		       f0 03		      BEQ	.skipL092
   3973  f6b8				   .condpart16
   3974  f6b8		       4c c5 f6 	      jmp	.__Skip_FireB
   3975  f6bb
   3976  f6bb				   .skipL092
   3977  f6bb				   .
   3978  f6bb							; 
   3979  f6bb
   3980  f6bb				   .L093		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3981  f6bb
   3982  f6bb		       a9 01		      LDA	#1
   3983  f6bd		       85 d6		      STA	_Ch0_Sound
   3984  f6bf		       85 d7		      STA	_Ch0_Duration
   3985  f6c1		       a9 00		      LDA	#0
   3986  f6c3		       85 d8		      STA	_Ch0_Counter
   3987  f6c5				   .
   3988  f6c5							; 
   3989  f6c5
   3990  f6c5				   .__Skip_FireB
   3991  f6c5							; __Skip_FireB
   3992  f6c5
   3993  f6c5				   .
   3994  f6c5							; 
   3995  f6c5
   3996  f6c5				   .
   3997  f6c5							; 
   3998  f6c5
   3999  f6c5				   .
   4000  f6c5							; 
   4001  f6c5
   4002  f6c5				   .
   4003  f6c5							; 
   4004  f6c5
   4005  f6c5				   .
   4006  f6c5							; 
   4007  f6c5
   4008  f6c5				   .
   4009  f6c5							; 
   4010  f6c5
   4011  f6c5				   .
   4012  f6c5							; 
   4013  f6c5
   4014  f6c5				   .
   4015  f6c5							; 
   4016  f6c5
   4017  f6c5				   .
   4018  f6c5							; 
   4019  f6c5
   4020  f6c5				   .
   4021  f6c5							; 
   4022  f6c5
   4023  f6c5				   .L094		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_New_Dir
   4024  f6c5
   4025  f6c5		       a5 ec		      LDA	_Bit3_Auto_Play
   4026  f6c7		       29 08		      AND	#8
   4027  f6c9		       d0 03		      BNE	.skipL094
   4028  f6cb				   .condpart17
   4029  f6cb		       4c 24 f7 	      jmp	.__AP_Skip_New_Dir
   4030  f6ce
   4031  f6ce				   .skipL094
   4032  f6ce				   .
   4033  f6ce							; 
   4034  f6ce
   4035  f6ce				   .
   4036  f6ce							; 
   4037  f6ce
   4038  f6ce				   .
   4039  f6ce							; 
   4040  f6ce
   4041  f6ce				   .
   4042  f6ce							; 
   4043  f6ce
   4044  f6ce				   .L095		;  _AP_Dir_Counter  =	_AP_Dir_Counter  +  1
   4045  f6ce
   4046  f6ce		       e6 dd		      INC	_AP_Dir_Counter
   4047  f6d0				   .
   4048  f6d0							; 
   4049  f6d0
   4050  f6d0				   .
   4051  f6d0							; 
   4052  f6d0
   4053  f6d0				   .
   4054  f6d0							; 
   4055  f6d0
   4056  f6d0				   .
   4057  f6d0							; 
   4058  f6d0
   4059  f6d0				   .
   4060  f6d0							; 
   4061  f6d0
   4062  f6d0				   .
   4063  f6d0							; 
   4064  f6d0
   4065  f6d0				   .L096		;  temp6  =   ( rand & 63 )   +  50
   4066  f6d0
   4067  f6d0							; complex statement detected
   4068  f6d0		       20 b9 f3 	      jsr	randomize
   4069  f6d3		       29 3f		      AND	#63
   4070  f6d5		       18		      CLC
   4071  f6d6		       69 32		      ADC	#50
   4072  f6d8		       85 a1		      STA	temp6
   4073  f6da				   .
   4074  f6da							; 
   4075  f6da
   4076  f6da				   .
   4077  f6da							; 
   4078  f6da
   4079  f6da				   .
   4080  f6da							; 
   4081  f6da
   4082  f6da				   .
   4083  f6da							; 
   4084  f6da
   4085  f6da				   .L097		;  if _AP_Dir_Counter	<  temp6 then goto __AP_Move_Acorn
   4086  f6da
   4087  f6da		       a5 dd		      LDA	_AP_Dir_Counter
   4088  f6dc		       c5 a1		      CMP	temp6
   4089  f6de		       b0 03		      BCS	.skipL097
   4090  f6e0				   .condpart18
   4091  f6e0		       4c 05 f7 	      jmp	.__AP_Move_Acorn
   4092  f6e3
   4093  f6e3				   .skipL097
   4094  f6e3				   .
   4095  f6e3							; 
   4096  f6e3
   4097  f6e3				   .
   4098  f6e3							; 
   4099  f6e3
   4100  f6e3				   .
   4101  f6e3							; 
   4102  f6e3
   4103  f6e3				   .
   4104  f6e3							; 
   4105  f6e3
   4106  f6e3				   .L098		;  temp5  =  rand
   4107  f6e3
   4108  f6e3		       20 b9 f3 	      jsr	randomize
   4109  f6e6		       85 a0		      STA	temp5
   4110  f6e8				   .
   4111  f6e8							; 
   4112  f6e8
   4113  f6e8				   .
   4114  f6e8							; 
   4115  f6e8
   4116  f6e8				   .
   4117  f6e8							; 
   4118  f6e8
   4119  f6e8				   .
   4120  f6e8							; 
   4121  f6e8
   4122  f6e8				   .L099		;  if temp5  <  230 then goto __AP_Move_Acorn
   4123  f6e8
   4124  f6e8		       a5 a0		      LDA	temp5
   4125  f6ea		       c9 e6		      CMP	#230
   4126  f6ec		       b0 03		      BCS	.skipL099
   4127  f6ee				   .condpart19
   4128  f6ee		       4c 05 f7 	      jmp	.__AP_Move_Acorn
   4129  f6f1
   4130  f6f1				   .skipL099
   4131  f6f1				   .
   4132  f6f1							; 
   4133  f6f1
   4134  f6f1				   .
   4135  f6f1							; 
   4136  f6f1
   4137  f6f1				   .
   4138  f6f1							; 
   4139  f6f1
   4140  f6f1				   .
   4141  f6f1							; 
   4142  f6f1
   4143  f6f1				   .L0100		;  _Bit3_AP_P0_Dir{3}	=  !_Bit3_AP_P0_Dir{3}
   4144  f6f1
   4145  f6f1		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4146  f6f3		       29 08		      AND	#8
   4147  f6f5		       08		      PHP
   4148  f6f6		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4149  f6f8		       29 f7		      AND	#247
   4150  f6fa		       28		      PLP
   4151  f6fb		       d0 02		      .byte.b	$D0, $02
   4152  f6fd		       09 08		      ORA	#8
   4153  f6ff		       85 e5		      STA	_Bit3_AP_P0_Dir
   4154  f701				   .
   4155  f701							; 
   4156  f701
   4157  f701				   .
   4158  f701							; 
   4159  f701
   4160  f701				   .
   4161  f701							; 
   4162  f701
   4163  f701				   .
   4164  f701							; 
   4165  f701
   4166  f701				   .L0101		;  _AP_Dir_Counter  =	0
   4167  f701
   4168  f701		       a9 00		      LDA	#0
   4169  f703		       85 dd		      STA	_AP_Dir_Counter
   4170  f705				   .
   4171  f705							; 
   4172  f705
   4173  f705				   .__AP_Move_Acorn
   4174  f705							; __AP_Move_Acorn
   4175  f705
   4176  f705				   .
   4177  f705							; 
   4178  f705
   4179  f705				   .
   4180  f705							; 
   4181  f705
   4182  f705				   .
   4183  f705							; 
   4184  f705
   4185  f705				   .
   4186  f705							; 
   4187  f705
   4188  f705				   .L0102		;  if !_Bit3_AP_P0_Dir{3} then if player0x  >	_P_Edge_Left then player0x  =  player0x  -  1
   4189  f705
   4190  f705		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4191  f707		       29 08		      AND	#8
   4192  f709		       d0 08		      BNE	.skipL0102
   4193  f70b				   .condpart20
   4194  f70b		       a9 01		      LDA	#_P_Edge_Left
   4195  f70d		       c5 80		      CMP	player0x
   4196  f70f		       b0 02		      BCS	.skip20then
   4197  f711				   .condpart21
   4198  f711		       c6 80		      DEC	player0x
   4199  f713				   .skip20then
   4200  f713				   .skipL0102
   4201  f713				   .L0103		;  if _Bit3_AP_P0_Dir{3} then if player0x  <  _P_Edge_Right then player0x  =  player0x  +  1
   4202  f713
   4203  f713		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4204  f715		       29 08		      AND	#8
   4205  f717		       f0 08		      BEQ	.skipL0103
   4206  f719				   .condpart22
   4207  f719		       a5 80		      LDA	player0x
   4208  f71b		       c9 99		      CMP	#_P_Edge_Right
   4209  f71d		       b0 02		      BCS	.skip22then
   4210  f71f				   .condpart23
   4211  f71f		       e6 80		      INC	player0x
   4212  f721				   .skip22then
   4213  f721				   .skipL0103
   4214  f721				   .
   4215  f721							; 
   4216  f721
   4217  f721				   .L0104		;  goto __Skip_Joy_Movement
   4218  f721
   4219  f721		       4c 5c f7 	      jmp	.__Skip_Joy_Movement
   4220  f724
   4221  f724				   .
   4222  f724							; 
   4223  f724
   4224  f724				   .__AP_Skip_New_Dir
   4225  f724							; __AP_Skip_New_Dir
   4226  f724
   4227  f724				   .
   4228  f724							; 
   4229  f724
   4230  f724				   .
   4231  f724							; 
   4232  f724
   4233  f724				   .
   4234  f724							; 
   4235  f724
   4236  f724				   .
   4237  f724							; 
   4238  f724
   4239  f724				   .
   4240  f724							; 
   4241  f724
   4242  f724				   .
   4243  f724							; 
   4244  f724
   4245  f724				   .
   4246  f724							; 
   4247  f724
   4248  f724				   .
   4249  f724							; 
   4250  f724
   4251  f724				   .L0105		;  if joy0up then if player0y	>  _P_Edge_Top then player0y  =  player0y  -  1
   4252  f724
   4253  f724		       a9 10		      lda	#$10
   4254  f726		       2c 80 02 	      bit	SWCHA
   4255  f729		       d0 08		      BNE	.skipL0105
   4256  f72b				   .condpart24
   4257  f72b		       a9 0a		      LDA	#_P_Edge_Top
   4258  f72d		       c5 85		      CMP	player0y
   4259  f72f		       b0 02		      BCS	.skip24then
   4260  f731				   .condpart25
   4261  f731		       c6 85		      DEC	player0y
   4262  f733				   .skip24then
   4263  f733				   .skipL0105
   4264  f733				   .L0106		;  if joy0down then if player0y  <  _P_Edge_Bottom then player0y  =  player0y	+  1
   4265  f733
   4266  f733		       a9 20		      lda	#$20
   4267  f735		       2c 80 02 	      bit	SWCHA
   4268  f738		       d0 08		      BNE	.skipL0106
   4269  f73a				   .condpart26
   4270  f73a		       a5 85		      LDA	player0y
   4271  f73c		       c9 53		      CMP	#_P_Edge_Bottom
   4272  f73e		       b0 02		      BCS	.skip26then
   4273  f740				   .condpart27
   4274  f740		       e6 85		      INC	player0y
   4275  f742				   .skip26then
   4276  f742				   .skipL0106
   4277  f742				   .L0107		;  if joy0left then if player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4278  f742
   4279  f742		       2c 80 02 	      bit	SWCHA
   4280  f745		       70 08		      BVS	.skipL0107
   4281  f747				   .condpart28
   4282  f747		       a9 01		      LDA	#_P_Edge_Left
   4283  f749		       c5 80		      CMP	player0x
   4284  f74b		       b0 02		      BCS	.skip28then
   4285  f74d				   .condpart29
   4286  f74d		       c6 80		      DEC	player0x
   4287  f74f				   .skip28then
   4288  f74f				   .skipL0107
   4289  f74f				   .L0108		;  if joy0right then if player0x  <  _P_Edge_Right then player0x  =  player0x	+  1
   4290  f74f
   4291  f74f		       2c 80 02 	      bit	SWCHA
   4292  f752		       30 08		      BMI	.skipL0108
   4293  f754				   .condpart30
   4294  f754		       a5 80		      LDA	player0x
   4295  f756		       c9 99		      CMP	#_P_Edge_Right
   4296  f758		       b0 02		      BCS	.skip30then
   4297  f75a				   .condpart31
   4298  f75a		       e6 80		      INC	player0x
   4299  f75c				   .skip30then
   4300  f75c				   .skipL0108
   4301  f75c				   .
   4302  f75c							; 
   4303  f75c
   4304  f75c				   .__Skip_Joy_Movement
   4305  f75c							; __Skip_Joy_Movement
   4306  f75c
   4307  f75c				   .
   4308  f75c							; 
   4309  f75c
   4310  f75c				   .
   4311  f75c							; 
   4312  f75c
   4313  f75c				   .
   4314  f75c							; 
   4315  f75c
   4316  f75c				   .
   4317  f75c							; 
   4318  f75c
   4319  f75c				   .
   4320  f75c							; 
   4321  f75c
   4322  f75c				   .
   4323  f75c							; 
   4324  f75c
   4325  f75c				   .
   4326  f75c							; 
   4327  f75c
   4328  f75c				   .L0109		;  if player1y  <  player0y then player1y  =  player1y  +  1
   4329  f75c
   4330  f75c		       a5 86		      LDA	player1y
   4331  f75e		       c5 85		      CMP	player0y
   4332  f760		       b0 02		      BCS	.skipL0109
   4333  f762				   .condpart32
   4334  f762		       e6 86		      INC	player1y
   4335  f764				   .skipL0109
   4336  f764				   .L0110		;  if player1y  >  player0y then player1y  =  player1y  -  1
   4337  f764
   4338  f764		       a5 85		      LDA	player0y
   4339  f766		       c5 86		      CMP	player1y
   4340  f768		       b0 02		      BCS	.skipL0110
   4341  f76a				   .condpart33
   4342  f76a		       c6 86		      DEC	player1y
   4343  f76c				   .skipL0110
   4344  f76c				   .L0111		;  temp5  =  player1x	+  8  :  if temp5  <  player0x then if player1x  <  144 then player1x  =  player1x  +  1
   4345  f76c
   4346  f76c		       a5 81		      LDA	player1x
   4347  f76e		       18		      CLC
   4348  f76f		       69 08		      ADC	#8
   4349  f771		       85 a0		      STA	temp5
   4350  f773		       a5 a0		      LDA	temp5
   4351  f775		       c5 80		      CMP	player0x
   4352  f777		       b0 08		      BCS	.skipL0111
   4353  f779				   .condpart34
   4354  f779		       a5 81		      LDA	player1x
   4355  f77b		       c9 90		      CMP	#144
   4356  f77d		       b0 02		      BCS	.skip34then
   4357  f77f				   .condpart35
   4358  f77f		       e6 81		      INC	player1x
   4359  f781				   .skip34then
   4360  f781				   .skipL0111
   4361  f781				   .L0112		;  temp5  =  player1x	+  8  :  if temp5  >  player0x then if player1x  >  0 then player1x  =	player1x  -  1
   4362  f781
   4363  f781		       a5 81		      LDA	player1x
   4364  f783		       18		      CLC
   4365  f784		       69 08		      ADC	#8
   4366  f786		       85 a0		      STA	temp5
   4367  f788		       a5 80		      LDA	player0x
   4368  f78a		       c5 a0		      CMP	temp5
   4369  f78c		       b0 08		      BCS	.skipL0112
   4370  f78e				   .condpart36
   4371  f78e		       a9 00		      LDA	#0
   4372  f790		       c5 81		      CMP	player1x
   4373  f792		       b0 02		      BCS	.skip36then
   4374  f794				   .condpart37
   4375  f794		       c6 81		      DEC	player1x
   4376  f796				   .skip36then
   4377  f796				   .skipL0112
   4378  f796				   .
   4379  f796							; 
   4380  f796
   4381  f796				   .
   4382  f796							; 
   4383  f796
   4384  f796				   .
   4385  f796							; 
   4386  f796
   4387  f796				   .
   4388  f796							; 
   4389  f796
   4390  f796				   .
   4391  f796							; 
   4392  f796
   4393  f796				   .
   4394  f796							; 
   4395  f796
   4396  f796				   .
   4397  f796							; 
   4398  f796
   4399  f796				   .
   4400  f796							; 
   4401  f796
   4402  f796				   .
   4403  f796							; 
   4404  f796
   4405  f796				   .
   4406  f796							; 
   4407  f796
   4408  f796				   .L0113		;  if !collision(missile0,player1) then goto __Skip_Squirrel_Kill
   4409  f796
   4410  f796		       24 00		      bit	CXM0P
   4411  f798		       30 03		      BMI	.skipL0113
   4412  f79a				   .condpart38
   4413  f79a		       4c ec f7 	      jmp	.__Skip_Squirrel_Kill
   4414  f79d
   4415  f79d				   .skipL0113
   4416  f79d				   .
   4417  f79d							; 
   4418  f79d
   4419  f79d				   .
   4420  f79d							; 
   4421  f79d
   4422  f79d				   .
   4423  f79d							; 
   4424  f79d
   4425  f79d				   .
   4426  f79d							; 
   4427  f79d
   4428  f79d				   .L0114		;  temp6  =  player1y
   4429  f79d
   4430  f79d		       a5 86		      LDA	player1y
   4431  f79f		       85 a1		      STA	temp6
   4432  f7a1				   .
   4433  f7a1							; 
   4434  f7a1
   4435  f7a1				   .
   4436  f7a1							; 
   4437  f7a1
   4438  f7a1				   .
   4439  f7a1							; 
   4440  f7a1
   4441  f7a1				   .
   4442  f7a1							; 
   4443  f7a1
   4444  f7a1				   .L0115		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  missile0y  =  250
   4445  f7a1
   4446  f7a1							; complex statement detected
   4447  f7a1		       20 b9 f3 	      jsr	randomize
   4448  f7a4		       4a		      lsr
   4449  f7a5		       48		      PHA
   4450  f7a6		       20 b9 f3 	      jsr	randomize
   4451  f7a9		       29 0f		      AND	#15
   4452  f7ab		       ba		      TSX
   4453  f7ac		       e8		      INX
   4454  f7ad		       9a		      TXS
   4455  f7ae		       18		      CLC
   4456  f7af		       75 00		      ADC	$00,x
   4457  f7b1		       85 81		      STA	player1x
   4458  f7b3		       a9 00		      LDA	#0
   4459  f7b5		       85 86		      STA	player1y
   4460  f7b7		       a9 fa		      LDA	#250
   4461  f7b9		       85 91		      STA	missile0y
   4462  f7bb				   .
   4463  f7bb							; 
   4464  f7bb
   4465  f7bb				   .
   4466  f7bb							; 
   4467  f7bb
   4468  f7bb				   .
   4469  f7bb							; 
   4470  f7bb
   4471  f7bb				   .
   4472  f7bb							; 
   4473  f7bb
   4474  f7bb				   .L0116		;  if _Bit3_Auto_Play{3} then goto __Skip_Squirrel_Kill
   4475  f7bb
   4476  f7bb		       a5 ec		      LDA	_Bit3_Auto_Play
   4477  f7bd		       29 08		      AND	#8
   4478  f7bf		       f0 03		      BEQ	.skipL0116
   4479  f7c1				   .condpart39
   4480  f7c1		       4c ec f7 	      jmp	.__Skip_Squirrel_Kill
   4481  f7c4
   4482  f7c4				   .skipL0116
   4483  f7c4				   .
   4484  f7c4							; 
   4485  f7c4
   4486  f7c4				   .
   4487  f7c4							; 
   4488  f7c4
   4489  f7c4				   .
   4490  f7c4							; 
   4491  f7c4
   4492  f7c4				   .
   4493  f7c4							; 
   4494  f7c4
   4495  f7c4				   .L0117		;  score  =  score  +	1
   4496  f7c4
   4497  f7c4		       f8		      SED
   4498  f7c5		       18		      CLC
   4499  f7c6		       a5 95		      LDA	score+2
   4500  f7c8		       69 01		      ADC	#$01
   4501  f7ca		       85 95		      STA	score+2
   4502  f7cc		       a5 94		      LDA	score+1
   4503  f7ce		       69 00		      ADC	#$00
   4504  f7d0		       85 94		      STA	score+1
   4505  f7d2		       a5 93		      LDA	score
   4506  f7d4		       69 00		      ADC	#$00
   4507  f7d6		       85 93		      STA	score
   4508  f7d8		       d8		      CLD
   4509  f7d9				   .
   4510  f7d9							; 
   4511  f7d9
   4512  f7d9				   .
   4513  f7d9							; 
   4514  f7d9
   4515  f7d9				   .
   4516  f7d9							; 
   4517  f7d9
   4518  f7d9				   .
   4519  f7d9							; 
   4520  f7d9
   4521  f7d9				   .L0118		;  if _Ch0_Sound then goto __Skip_Squirrel_Kill
   4522  f7d9
   4523  f7d9		       a5 d6		      LDA	_Ch0_Sound
   4524  f7db		       f0 03		      BEQ	.skipL0118
   4525  f7dd				   .condpart40
   4526  f7dd		       4c ec f7 	      jmp	.__Skip_Squirrel_Kill
   4527  f7e0
   4528  f7e0				   .skipL0118
   4529  f7e0				   .
   4530  f7e0							; 
   4531  f7e0
   4532  f7e0				   .L0119		;  _Ch0_Sound	=  2  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   4533  f7e0
   4534  f7e0		       a9 02		      LDA	#2
   4535  f7e2		       85 d6		      STA	_Ch0_Sound
   4536  f7e4		       a9 01		      LDA	#1
   4537  f7e6		       85 d7		      STA	_Ch0_Duration
   4538  f7e8		       a9 00		      LDA	#0
   4539  f7ea		       85 d8		      STA	_Ch0_Counter
   4540  f7ec				   .
   4541  f7ec							; 
   4542  f7ec
   4543  f7ec				   .__Skip_Squirrel_Kill
   4544  f7ec							; __Skip_Squirrel_Kill
   4545  f7ec
   4546  f7ec				   .
   4547  f7ec							; 
   4548  f7ec
   4549  f7ec				   .
   4550  f7ec							; 
   4551  f7ec
   4552  f7ec				   .
   4553  f7ec							; 
   4554  f7ec
   4555  f7ec				   .
   4556  f7ec							; 
   4557  f7ec
   4558  f7ec				   .
   4559  f7ec							; 
   4560  f7ec
   4561  f7ec				   .
   4562  f7ec							; 
   4563  f7ec
   4564  f7ec				   .
   4565  f7ec							; 
   4566  f7ec
   4567  f7ec				   .
   4568  f7ec							; 
   4569  f7ec
   4570  f7ec				   .
   4571  f7ec							; 
   4572  f7ec
   4573  f7ec				   .
   4574  f7ec							; 
   4575  f7ec
   4576  f7ec				   .L0120		;  if !collision(player0,player1) then goto __Skip_Acorn_Eaten
   4577  f7ec
   4578  f7ec		       24 07		      bit	CXPPMM
   4579  f7ee		       30 03		      BMI	.skipL0120
   4580  f7f0				   .condpart41
   4581  f7f0		       4c 64 f8 	      jmp	.__Skip_Acorn_Eaten
   4582  f7f3
   4583  f7f3				   .skipL0120
   4584  f7f3				   .
   4585  f7f3							; 
   4586  f7f3
   4587  f7f3				   .
   4588  f7f3							; 
   4589  f7f3
   4590  f7f3				   .
   4591  f7f3							; 
   4592  f7f3
   4593  f7f3				   .
   4594  f7f3							; 
   4595  f7f3
   4596  f7f3				   .
   4597  f7f3							; 
   4598  f7f3
   4599  f7f3				   .L0121		;  if !pfscore1 then _Bit7_Last_Life{7}  =  1	:  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =	1
   4600  f7f3
   4601  f7f3		       a5 f2		      LDA	pfscore1
   4602  f7f5		       d0 12		      BNE	.skipL0121
   4603  f7f7				   .condpart42
   4604  f7f7		       a5 ec		      LDA	_Bit7_Last_Life
   4605  f7f9		       09 80		      ORA	#128
   4606  f7fb		       85 ec		      STA	_Bit7_Last_Life
   4607  f7fd		       a5 ec		      LDA	_Bit3_Auto_Play
   4608  f7ff		       29 08		      AND	#8
   4609  f801		       f0 06		      BEQ	.skip42then
   4610  f803				   .condpart43
   4611  f803		       a5 ec		      LDA	_Bit2_Game_Control
   4612  f805		       09 04		      ORA	#4
   4613  f807		       85 ec		      STA	_Bit2_Game_Control
   4614  f809				   .skip42then
   4615  f809				   .skipL0121
   4616  f809				   .
   4617  f809							; 
   4618  f809
   4619  f809				   .
   4620  f809							; 
   4621  f809
   4622  f809				   .
   4623  f809							; 
   4624  f809
   4625  f809				   .
   4626  f809							; 
   4627  f809
   4628  f809				   .L0122		;  if pfscore1 then pfscore1  =  pfscore1 / 4
   4629  f809
   4630  f809		       a5 f2		      LDA	pfscore1
   4631  f80b		       f0 06		      BEQ	.skipL0122
   4632  f80d				   .condpart44
   4633  f80d		       a5 f2		      LDA	pfscore1
   4634  f80f		       4a		      lsr
   4635  f810		       4a		      lsr
   4636  f811		       85 f2		      STA	pfscore1
   4637  f813				   .skipL0122
   4638  f813				   .
   4639  f813							; 
   4640  f813
   4641  f813				   .
   4642  f813							; 
   4643  f813
   4644  f813				   .
   4645  f813							; 
   4646  f813
   4647  f813				   .
   4648  f813							; 
   4649  f813
   4650  f813				   .L0123		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  missile0y  =  250
   4651  f813
   4652  f813							; complex statement detected
   4653  f813		       20 b9 f3 	      jsr	randomize
   4654  f816		       4a		      lsr
   4655  f817		       48		      PHA
   4656  f818		       20 b9 f3 	      jsr	randomize
   4657  f81b		       29 0f		      AND	#15
   4658  f81d		       ba		      TSX
   4659  f81e		       e8		      INX
   4660  f81f		       9a		      TXS
   4661  f820		       18		      CLC
   4662  f821		       75 00		      ADC	$00,x
   4663  f823		       85 81		      STA	player1x
   4664  f825		       a9 00		      LDA	#0
   4665  f827		       85 86		      STA	player1y
   4666  f829		       a9 fa		      LDA	#250
   4667  f82b		       85 91		      STA	missile0y
   4668  f82d				   .
   4669  f82d							; 
   4670  f82d
   4671  f82d				   .
   4672  f82d							; 
   4673  f82d
   4674  f82d				   .
   4675  f82d							; 
   4676  f82d
   4677  f82d				   .
   4678  f82d							; 
   4679  f82d
   4680  f82d				   .L0124		;  if _Bit3_Auto_Play{3} then goto __Skip_Acorn_Eaten
   4681  f82d
   4682  f82d		       a5 ec		      LDA	_Bit3_Auto_Play
   4683  f82f		       29 08		      AND	#8
   4684  f831		       f0 03		      BEQ	.skipL0124
   4685  f833				   .condpart45
   4686  f833		       4c 64 f8 	      jmp	.__Skip_Acorn_Eaten
   4687  f836
   4688  f836				   .skipL0124
   4689  f836				   .
   4690  f836							; 
   4691  f836
   4692  f836				   .
   4693  f836							; 
   4694  f836
   4695  f836				   .
   4696  f836							; 
   4697  f836
   4698  f836				   .
   4699  f836							; 
   4700  f836
   4701  f836				   .L0125		;  if _sc3  >	0 then score  =  score	-  1
   4702  f836
   4703  f836		       a9 00		      LDA	#0
   4704  f838		       c5 95		      CMP	_sc3
   4705  f83a		       b0 15		      BCS	.skipL0125
   4706  f83c				   .condpart46
   4707  f83c		       f8		      SED
   4708  f83d		       38		      SEC
   4709  f83e		       a5 95		      LDA	score+2
   4710  f840		       e9 01		      SBC	#$01
   4711  f842		       85 95		      STA	score+2
   4712  f844		       a5 94		      LDA	score+1
   4713  f846		       e9 00		      SBC	#$00
   4714  f848		       85 94		      STA	score+1
   4715  f84a		       a5 93		      LDA	score
   4716  f84c		       e9 00		      SBC	#$00
   4717  f84e		       85 93		      STA	score
   4718  f850		       d8		      CLD
   4719  f851				   .skipL0125
   4720  f851				   .
   4721  f851							; 
   4722  f851
   4723  f851				   .
   4724  f851							; 
   4725  f851
   4726  f851				   .
   4727  f851							; 
   4728  f851
   4729  f851				   .
   4730  f851							; 
   4731  f851
   4732  f851				   .L0126		;  if _Ch0_Sound then goto __Skip_Acorn_Eaten
   4733  f851
   4734  f851		       a5 d6		      LDA	_Ch0_Sound
   4735  f853		       f0 03		      BEQ	.skipL0126
   4736  f855				   .condpart47
   4737  f855		       4c 64 f8 	      jmp	.__Skip_Acorn_Eaten
   4738  f858
   4739  f858				   .skipL0126
   4740  f858				   .
   4741  f858							; 
   4742  f858
   4743  f858				   .L0127		;  _Ch0_Sound	=  3  :  _Ch0_Duration = 1  :  _Ch0_Counter = 0
   4744  f858
   4745  f858		       a9 03		      LDA	#3
   4746  f85a		       85 d6		      STA	_Ch0_Sound
   4747  f85c		       a9 01		      LDA	#1
   4748  f85e		       85 d7		      STA	_Ch0_Duration
   4749  f860		       a9 00		      LDA	#0
   4750  f862		       85 d8		      STA	_Ch0_Counter
   4751  f864				   .
   4752  f864							; 
   4753  f864
   4754  f864				   .__Skip_Acorn_Eaten
   4755  f864							; __Skip_Acorn_Eaten
   4756  f864
   4757  f864				   .
   4758  f864							; 
   4759  f864
   4760  f864				   .
   4761  f864							; 
   4762  f864
   4763  f864				   .
   4764  f864							; 
   4765  f864
   4766  f864				   .
   4767  f864							; 
   4768  f864
   4769  f864				   .
   4770  f864							; 
   4771  f864
   4772  f864				   .
   4773  f864							; 
   4774  f864
   4775  f864				   .
   4776  f864							; 
   4777  f864
   4778  f864				   .
   4779  f864							; 
   4780  f864
   4781  f864				   .
   4782  f864							; 
   4783  f864
   4784  f864				   .
   4785  f864							; 
   4786  f864
   4787  f864				   .L0128		;  if !_Ch0_Sound then goto __Skip_Channel_0
   4788  f864
   4789  f864		       a5 d6		      LDA	_Ch0_Sound
   4790  f866		       d0 03		      BNE	.skipL0128
   4791  f868				   .condpart48
   4792  f868		       4c 5c f9 	      jmp	.__Skip_Channel_0
   4793  f86b
   4794  f86b				   .skipL0128
   4795  f86b				   .
   4796  f86b							; 
   4797  f86b
   4798  f86b				   .
   4799  f86b							; 
   4800  f86b
   4801  f86b				   .
   4802  f86b							; 
   4803  f86b
   4804  f86b				   .
   4805  f86b							; 
   4806  f86b
   4807  f86b				   .L0129		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   4808  f86b
   4809  f86b		       c6 d7		      DEC	_Ch0_Duration
   4810  f86d				   .
   4811  f86d							; 
   4812  f86d
   4813  f86d				   .
   4814  f86d							; 
   4815  f86d
   4816  f86d				   .
   4817  f86d							; 
   4818  f86d
   4819  f86d				   .
   4820  f86d							; 
   4821  f86d
   4822  f86d				   .
   4823  f86d							; 
   4824  f86d
   4825  f86d				   .L0130		;  if _Ch0_Duration then goto __Skip_Channel_0
   4826  f86d
   4827  f86d		       a5 d7		      LDA	_Ch0_Duration
   4828  f86f		       f0 03		      BEQ	.skipL0130
   4829  f871				   .condpart49
   4830  f871		       4c 5c f9 	      jmp	.__Skip_Channel_0
   4831  f874
   4832  f874				   .skipL0130
   4833  f874				   .
   4834  f874							; 
   4835  f874
   4836  f874				   .
   4837  f874							; 
   4838  f874
   4839  f874				   .
   4840  f874							; 
   4841  f874
   4842  f874				   .
   4843  f874							; 
   4844  f874
   4845  f874				   .
   4846  f874							; 
   4847  f874
   4848  f874				   .
   4849  f874							; 
   4850  f874
   4851  f874				   .
   4852  f874							; 
   4853  f874
   4854  f874				   .
   4855  f874							; 
   4856  f874
   4857  f874				   .
   4858  f874							; 
   4859  f874
   4860  f874				   .
   4861  f874							; 
   4862  f874
   4863  f874				   .
   4864  f874							; 
   4865  f874
   4866  f874				   .
   4867  f874							; 
   4868  f874
   4869  f874				   .L0131		;  if _Ch0_Sound  <>  1 then goto __Skip_Chan0_Sound_001
   4870  f874
   4871  f874		       a5 d6		      LDA	_Ch0_Sound
   4872  f876		       c9 01		      CMP	#1
   4873  f878		       f0 03		      BEQ	.skipL0131
   4874  f87a				   .condpart50
   4875  f87a		       4c b9 f8 	      jmp	.__Skip_Chan0_Sound_001
   4876  f87d
   4877  f87d				   .skipL0131
   4878  f87d				   .
   4879  f87d							; 
   4880  f87d
   4881  f87d				   .
   4882  f87d							; 
   4883  f87d
   4884  f87d				   .
   4885  f87d							; 
   4886  f87d
   4887  f87d				   .
   4888  f87d							; 
   4889  f87d
   4890  f87d				   .L0132		;  temp4  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4891  f87d
   4892  f87d		       a6 d8		      LDX	_Ch0_Counter
   4893  f87f		       bd 3b fe 	      LDA	_Data_Fire_B_Sound,x
   4894  f882		       85 9f		      STA	temp4
   4895  f884		       e6 d8		      INC	_Ch0_Counter
   4896  f886				   .
   4897  f886							; 
   4898  f886
   4899  f886				   .
   4900  f886							; 
   4901  f886
   4902  f886				   .
   4903  f886							; 
   4904  f886
   4905  f886				   .
   4906  f886							; 
   4907  f886
   4908  f886				   .L0133		;  if temp4  =  255 then goto __Clear_Channel_0
   4909  f886
   4910  f886		       a5 9f		      LDA	temp4
   4911  f888		       c9 ff		      CMP	#255
   4912  f88a		       d0 03		      BNE	.skipL0133
   4913  f88c				   .condpart51
   4914  f88c		       4c 56 f9 	      jmp	.__Clear_Channel_0
   4915  f88f
   4916  f88f				   .skipL0133
   4917  f88f				   .
   4918  f88f							; 
   4919  f88f
   4920  f88f				   .
   4921  f88f							; 
   4922  f88f
   4923  f88f				   .
   4924  f88f							; 
   4925  f88f
   4926  f88f				   .
   4927  f88f							; 
   4928  f88f
   4929  f88f				   .L0134		;  temp5  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4930  f88f
   4931  f88f		       a6 d8		      LDX	_Ch0_Counter
   4932  f891		       bd 3b fe 	      LDA	_Data_Fire_B_Sound,x
   4933  f894		       85 a0		      STA	temp5
   4934  f896		       e6 d8		      INC	_Ch0_Counter
   4935  f898				   .L0135		;  temp6  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4936  f898
   4937  f898		       a6 d8		      LDX	_Ch0_Counter
   4938  f89a		       bd 3b fe 	      LDA	_Data_Fire_B_Sound,x
   4939  f89d		       85 a1		      STA	temp6
   4940  f89f		       e6 d8		      INC	_Ch0_Counter
   4941  f8a1				   .
   4942  f8a1							; 
   4943  f8a1
   4944  f8a1				   .
   4945  f8a1							; 
   4946  f8a1
   4947  f8a1				   .
   4948  f8a1							; 
   4949  f8a1
   4950  f8a1				   .
   4951  f8a1							; 
   4952  f8a1
   4953  f8a1				   .L0136		;  AUDV0  =  temp4
   4954  f8a1
   4955  f8a1		       a5 9f		      LDA	temp4
   4956  f8a3		       85 19		      STA	AUDV0
   4957  f8a5				   .L0137		;  AUDC0  =  temp5
   4958  f8a5
   4959  f8a5		       a5 a0		      LDA	temp5
   4960  f8a7		       85 15		      STA	AUDC0
   4961  f8a9				   .L0138		;  AUDF0  =  temp6
   4962  f8a9
   4963  f8a9		       a5 a1		      LDA	temp6
   4964  f8ab		       85 17		      STA	AUDF0
   4965  f8ad				   .
   4966  f8ad							; 
   4967  f8ad
   4968  f8ad				   .
   4969  f8ad							; 
   4970  f8ad
   4971  f8ad				   .
   4972  f8ad							; 
   4973  f8ad
   4974  f8ad				   .
   4975  f8ad							; 
   4976  f8ad
   4977  f8ad				   .L0139		;  _Ch0_Duration  =  _Data_Fire_B_Sound[_Ch0_Counter]	:  _Ch0_Counter  =  _Ch0_Counter  +  1
   4978  f8ad
   4979  f8ad		       a6 d8		      LDX	_Ch0_Counter
   4980  f8af		       bd 3b fe 	      LDA	_Data_Fire_B_Sound,x
   4981  f8b2		       85 d7		      STA	_Ch0_Duration
   4982  f8b4		       e6 d8		      INC	_Ch0_Counter
   4983  f8b6				   .
   4984  f8b6							; 
   4985  f8b6
   4986  f8b6				   .
   4987  f8b6							; 
   4988  f8b6
   4989  f8b6				   .
   4990  f8b6							; 
   4991  f8b6
   4992  f8b6				   .
   4993  f8b6							; 
   4994  f8b6
   4995  f8b6				   .L0140		;  goto __Skip_Channel_0
   4996  f8b6
   4997  f8b6		       4c 5c f9 	      jmp	.__Skip_Channel_0
   4998  f8b9
   4999  f8b9				   .
   5000  f8b9							; 
   5001  f8b9
   5002  f8b9				   .__Skip_Chan0_Sound_001
   5003  f8b9							; __Skip_Chan0_Sound_001
   5004  f8b9
   5005  f8b9				   .
   5006  f8b9							; 
   5007  f8b9
   5008  f8b9				   .
   5009  f8b9							; 
   5010  f8b9
   5011  f8b9				   .
   5012  f8b9							; 
   5013  f8b9
   5014  f8b9				   .
   5015  f8b9							; 
   5016  f8b9
   5017  f8b9				   .
   5018  f8b9							; 
   5019  f8b9
   5020  f8b9				   .
   5021  f8b9							; 
   5022  f8b9
   5023  f8b9				   .
   5024  f8b9							; 
   5025  f8b9
   5026  f8b9				   .
   5027  f8b9							; 
   5028  f8b9
   5029  f8b9				   .
   5030  f8b9							; 
   5031  f8b9
   5032  f8b9				   .
   5033  f8b9							; 
   5034  f8b9
   5035  f8b9				   .
   5036  f8b9							; 
   5037  f8b9
   5038  f8b9				   .
   5039  f8b9							; 
   5040  f8b9
   5041  f8b9				   .L0141		;  if _Ch0_Sound  <>  2 then goto __Skip_Chan0_Sound_002
   5042  f8b9
   5043  f8b9		       a5 d6		      LDA	_Ch0_Sound
   5044  f8bb		       c9 02		      CMP	#2
   5045  f8bd		       f0 03		      BEQ	.skipL0141
   5046  f8bf				   .condpart52
   5047  f8bf		       4c fe f8 	      jmp	.__Skip_Chan0_Sound_002
   5048  f8c2
   5049  f8c2				   .skipL0141
   5050  f8c2				   .
   5051  f8c2							; 
   5052  f8c2
   5053  f8c2				   .
   5054  f8c2							; 
   5055  f8c2
   5056  f8c2				   .
   5057  f8c2							; 
   5058  f8c2
   5059  f8c2				   .
   5060  f8c2							; 
   5061  f8c2
   5062  f8c2				   .L0142		;  temp4  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5063  f8c2
   5064  f8c2		       a6 d8		      LDX	_Ch0_Counter
   5065  f8c4		       bd 57 fe 	      LDA	_Data_Enemy_Destroyed,x
   5066  f8c7		       85 9f		      STA	temp4
   5067  f8c9		       e6 d8		      INC	_Ch0_Counter
   5068  f8cb				   .
   5069  f8cb							; 
   5070  f8cb
   5071  f8cb				   .
   5072  f8cb							; 
   5073  f8cb
   5074  f8cb				   .
   5075  f8cb							; 
   5076  f8cb
   5077  f8cb				   .
   5078  f8cb							; 
   5079  f8cb
   5080  f8cb				   .L0143		;  if temp4  =  255 then goto __Clear_Channel_0
   5081  f8cb
   5082  f8cb		       a5 9f		      LDA	temp4
   5083  f8cd		       c9 ff		      CMP	#255
   5084  f8cf		       d0 03		      BNE	.skipL0143
   5085  f8d1				   .condpart53
   5086  f8d1		       4c 56 f9 	      jmp	.__Clear_Channel_0
   5087  f8d4
   5088  f8d4				   .skipL0143
   5089  f8d4				   .
   5090  f8d4							; 
   5091  f8d4
   5092  f8d4				   .
   5093  f8d4							; 
   5094  f8d4
   5095  f8d4				   .
   5096  f8d4							; 
   5097  f8d4
   5098  f8d4				   .
   5099  f8d4							; 
   5100  f8d4
   5101  f8d4				   .L0144		;  temp5  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5102  f8d4
   5103  f8d4		       a6 d8		      LDX	_Ch0_Counter
   5104  f8d6		       bd 57 fe 	      LDA	_Data_Enemy_Destroyed,x
   5105  f8d9		       85 a0		      STA	temp5
   5106  f8db		       e6 d8		      INC	_Ch0_Counter
   5107  f8dd				   .L0145		;  temp6  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5108  f8dd
   5109  f8dd		       a6 d8		      LDX	_Ch0_Counter
   5110  f8df		       bd 57 fe 	      LDA	_Data_Enemy_Destroyed,x
   5111  f8e2		       85 a1		      STA	temp6
   5112  f8e4		       e6 d8		      INC	_Ch0_Counter
   5113  f8e6				   .
   5114  f8e6							; 
   5115  f8e6
   5116  f8e6				   .
   5117  f8e6							; 
   5118  f8e6
   5119  f8e6				   .
   5120  f8e6							; 
   5121  f8e6
   5122  f8e6				   .
   5123  f8e6							; 
   5124  f8e6
   5125  f8e6				   .L0146		;  AUDV0  =  temp4
   5126  f8e6
   5127  f8e6		       a5 9f		      LDA	temp4
   5128  f8e8		       85 19		      STA	AUDV0
   5129  f8ea				   .L0147		;  AUDC0  =  temp5
   5130  f8ea
   5131  f8ea		       a5 a0		      LDA	temp5
   5132  f8ec		       85 15		      STA	AUDC0
   5133  f8ee				   .L0148		;  AUDF0  =  temp6
   5134  f8ee
   5135  f8ee		       a5 a1		      LDA	temp6
   5136  f8f0		       85 17		      STA	AUDF0
   5137  f8f2				   .
   5138  f8f2							; 
   5139  f8f2
   5140  f8f2				   .
   5141  f8f2							; 
   5142  f8f2
   5143  f8f2				   .
   5144  f8f2							; 
   5145  f8f2
   5146  f8f2				   .
   5147  f8f2							; 
   5148  f8f2
   5149  f8f2				   .L0149		;  _Ch0_Duration  =  _Data_Enemy_Destroyed[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   5150  f8f2
   5151  f8f2		       a6 d8		      LDX	_Ch0_Counter
   5152  f8f4		       bd 57 fe 	      LDA	_Data_Enemy_Destroyed,x
   5153  f8f7		       85 d7		      STA	_Ch0_Duration
   5154  f8f9		       e6 d8		      INC	_Ch0_Counter
   5155  f8fb				   .
   5156  f8fb							; 
   5157  f8fb
   5158  f8fb				   .
   5159  f8fb							; 
   5160  f8fb
   5161  f8fb				   .
   5162  f8fb							; 
   5163  f8fb
   5164  f8fb				   .
   5165  f8fb							; 
   5166  f8fb
   5167  f8fb				   .L0150		;  goto __Skip_Channel_0
   5168  f8fb
   5169  f8fb		       4c 5c f9 	      jmp	.__Skip_Channel_0
   5170  f8fe
   5171  f8fe				   .
   5172  f8fe							; 
   5173  f8fe
   5174  f8fe				   .__Skip_Chan0_Sound_002
   5175  f8fe							; __Skip_Chan0_Sound_002
   5176  f8fe
   5177  f8fe				   .
   5178  f8fe							; 
   5179  f8fe
   5180  f8fe				   .
   5181  f8fe							; 
   5182  f8fe
   5183  f8fe				   .
   5184  f8fe							; 
   5185  f8fe
   5186  f8fe				   .
   5187  f8fe							; 
   5188  f8fe
   5189  f8fe				   .
   5190  f8fe							; 
   5191  f8fe
   5192  f8fe				   .
   5193  f8fe							; 
   5194  f8fe
   5195  f8fe				   .
   5196  f8fe							; 
   5197  f8fe
   5198  f8fe				   .
   5199  f8fe							; 
   5200  f8fe
   5201  f8fe				   .
   5202  f8fe							; 
   5203  f8fe
   5204  f8fe				   .
   5205  f8fe							; 
   5206  f8fe
   5207  f8fe				   .
   5208  f8fe							; 
   5209  f8fe
   5210  f8fe				   .
   5211  f8fe							; 
   5212  f8fe
   5213  f8fe				   .L0151		;  if _Ch0_Sound  <>  3 then goto __Skip_Chan0_Sound_003
   5214  f8fe
   5215  f8fe		       a5 d6		      LDA	_Ch0_Sound
   5216  f900		       c9 03		      CMP	#3
   5217  f902		       f0 03		      BEQ	.skipL0151
   5218  f904				   .condpart54
   5219  f904		       4c 53 f9 	      jmp	.__Skip_Chan0_Sound_003
   5220  f907
   5221  f907				   .skipL0151
   5222  f907				   .
   5223  f907							; 
   5224  f907
   5225  f907				   .
   5226  f907							; 
   5227  f907
   5228  f907				   .
   5229  f907							; 
   5230  f907
   5231  f907				   .
   5232  f907							; 
   5233  f907
   5234  f907				   .L0152		;  temp4  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5235  f907
   5236  f907		       a6 d8		      LDX	_Ch0_Counter
   5237  f909		       bd 8f fe 	      LDA	_Data_Player_Damaged,x
   5238  f90c		       85 9f		      STA	temp4
   5239  f90e		       e6 d8		      INC	_Ch0_Counter
   5240  f910				   .
   5241  f910							; 
   5242  f910
   5243  f910				   .
   5244  f910							; 
   5245  f910
   5246  f910				   .
   5247  f910							; 
   5248  f910
   5249  f910				   .
   5250  f910							; 
   5251  f910
   5252  f910				   .L0153		;  if temp4  =  255 then if _Bit7_Last_Life{7} then _Bit2_Game_Control{2}  =  1
   5253  f910
   5254  f910		       a5 9f		      LDA	temp4
   5255  f912		       c9 ff		      CMP	#255
   5256  f914		       d0 0a		      BNE	.skipL0153
   5257  f916				   .condpart55
   5258  f916		       24 ec		      BIT	_Bit7_Last_Life
   5259  f918		       10 06		      BPL	.skip55then
   5260  f91a				   .condpart56
   5261  f91a		       a5 ec		      LDA	_Bit2_Game_Control
   5262  f91c		       09 04		      ORA	#4
   5263  f91e		       85 ec		      STA	_Bit2_Game_Control
   5264  f920				   .skip55then
   5265  f920				   .skipL0153
   5266  f920				   .
   5267  f920							; 
   5268  f920
   5269  f920				   .
   5270  f920							; 
   5271  f920
   5272  f920				   .
   5273  f920							; 
   5274  f920
   5275  f920				   .
   5276  f920							; 
   5277  f920
   5278  f920				   .L0154		;  if temp4  =  255 then goto __Clear_Channel_0
   5279  f920
   5280  f920		       a5 9f		      LDA	temp4
   5281  f922		       c9 ff		      CMP	#255
   5282  f924		       d0 03		      BNE	.skipL0154
   5283  f926				   .condpart57
   5284  f926		       4c 56 f9 	      jmp	.__Clear_Channel_0
   5285  f929
   5286  f929				   .skipL0154
   5287  f929				   .
   5288  f929							; 
   5289  f929
   5290  f929				   .
   5291  f929							; 
   5292  f929
   5293  f929				   .
   5294  f929							; 
   5295  f929
   5296  f929				   .
   5297  f929							; 
   5298  f929
   5299  f929				   .L0155		;  temp5  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5300  f929
   5301  f929		       a6 d8		      LDX	_Ch0_Counter
   5302  f92b		       bd 8f fe 	      LDA	_Data_Player_Damaged,x
   5303  f92e		       85 a0		      STA	temp5
   5304  f930		       e6 d8		      INC	_Ch0_Counter
   5305  f932				   .L0156		;  temp6  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5306  f932
   5307  f932		       a6 d8		      LDX	_Ch0_Counter
   5308  f934		       bd 8f fe 	      LDA	_Data_Player_Damaged,x
   5309  f937		       85 a1		      STA	temp6
   5310  f939		       e6 d8		      INC	_Ch0_Counter
   5311  f93b				   .
   5312  f93b							; 
   5313  f93b
   5314  f93b				   .
   5315  f93b							; 
   5316  f93b
   5317  f93b				   .
   5318  f93b							; 
   5319  f93b
   5320  f93b				   .
   5321  f93b							; 
   5322  f93b
   5323  f93b				   .L0157		;  AUDV0  =  temp4
   5324  f93b
   5325  f93b		       a5 9f		      LDA	temp4
   5326  f93d		       85 19		      STA	AUDV0
   5327  f93f				   .L0158		;  AUDC0  =  temp5
   5328  f93f
   5329  f93f		       a5 a0		      LDA	temp5
   5330  f941		       85 15		      STA	AUDC0
   5331  f943				   .L0159		;  AUDF0  =  temp6
   5332  f943
   5333  f943		       a5 a1		      LDA	temp6
   5334  f945		       85 17		      STA	AUDF0
   5335  f947				   .
   5336  f947							; 
   5337  f947
   5338  f947				   .
   5339  f947							; 
   5340  f947
   5341  f947				   .
   5342  f947							; 
   5343  f947
   5344  f947				   .
   5345  f947							; 
   5346  f947
   5347  f947				   .L0160		;  _Ch0_Duration  =  _Data_Player_Damaged[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   5348  f947
   5349  f947		       a6 d8		      LDX	_Ch0_Counter
   5350  f949		       bd 8f fe 	      LDA	_Data_Player_Damaged,x
   5351  f94c		       85 d7		      STA	_Ch0_Duration
   5352  f94e		       e6 d8		      INC	_Ch0_Counter
   5353  f950				   .
   5354  f950							; 
   5355  f950
   5356  f950				   .
   5357  f950							; 
   5358  f950
   5359  f950				   .
   5360  f950							; 
   5361  f950
   5362  f950				   .
   5363  f950							; 
   5364  f950
   5365  f950				   .L0161		;  goto __Skip_Channel_0
   5366  f950
   5367  f950		       4c 5c f9 	      jmp	.__Skip_Channel_0
   5368  f953
   5369  f953				   .
   5370  f953							; 
   5371  f953
   5372  f953				   .__Skip_Chan0_Sound_003
   5373  f953							; __Skip_Chan0_Sound_003
   5374  f953
   5375  f953				   .
   5376  f953							; 
   5377  f953
   5378  f953				   .
   5379  f953							; 
   5380  f953
   5381  f953				   .
   5382  f953							; 
   5383  f953
   5384  f953				   .
   5385  f953							; 
   5386  f953
   5387  f953				   .
   5388  f953							; 
   5389  f953
   5390  f953				   .
   5391  f953							; 
   5392  f953
   5393  f953				   .
   5394  f953							; 
   5395  f953
   5396  f953				   .
   5397  f953							; 
   5398  f953
   5399  f953				   .
   5400  f953							; 
   5401  f953
   5402  f953				   .
   5403  f953							; 
   5404  f953
   5405  f953				   .
   5406  f953							; 
   5407  f953
   5408  f953				   .
   5409  f953							; 
   5410  f953
   5411  f953				   .
   5412  f953							; 
   5413  f953
   5414  f953				   .
   5415  f953							; 
   5416  f953
   5417  f953				   .
   5418  f953							; 
   5419  f953
   5420  f953				   .
   5421  f953							; 
   5422  f953
   5423  f953				   .
   5424  f953							; 
   5425  f953
   5426  f953				   .L0162		;  goto __Skip_Channel_0
   5427  f953
   5428  f953		       4c 5c f9 	      jmp	.__Skip_Channel_0
   5429  f956
   5430  f956				   .
   5431  f956							; 
   5432  f956
   5433  f956				   .
   5434  f956							; 
   5435  f956
   5436  f956				   .
   5437  f956							; 
   5438  f956
   5439  f956				   .
   5440  f956							; 
   5441  f956
   5442  f956				   .
   5443  f956							; 
   5444  f956
   5445  f956				   .
   5446  f956							; 
   5447  f956
   5448  f956				   .
   5449  f956							; 
   5450  f956
   5451  f956				   .__Clear_Channel_0
   5452  f956							; __Clear_Channel_0
   5453  f956
   5454  f956				   .
   5455  f956							; 
   5456  f956
   5457  f956				   .
   5458  f956							; 
   5459  f956
   5460  f956				   .
   5461  f956							; 
   5462  f956
   5463  f956				   .
   5464  f956							; 
   5465  f956
   5466  f956				   .L0163		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   5467  f956
   5468  f956		       a9 00		      LDA	#0
   5469  f958		       85 d6		      STA	_Ch0_Sound
   5470  f95a		       85 19		      STA	AUDV0
   5471  f95c				   .
   5472  f95c							; 
   5473  f95c
   5474  f95c				   .
   5475  f95c							; 
   5476  f95c
   5477  f95c				   .
   5478  f95c							; 
   5479  f95c
   5480  f95c				   .
   5481  f95c							; 
   5482  f95c
   5483  f95c				   .
   5484  f95c							; 
   5485  f95c
   5486  f95c				   .
   5487  f95c							; 
   5488  f95c
   5489  f95c				   .
   5490  f95c							; 
   5491  f95c
   5492  f95c				   .__Skip_Channel_0
   5493  f95c							; __Skip_Channel_0
   5494  f95c
   5495  f95c				   .
   5496  f95c							; 
   5497  f95c
   5498  f95c				   .
   5499  f95c							; 
   5500  f95c
   5501  f95c				   .
   5502  f95c							; 
   5503  f95c
   5504  f95c				   .
   5505  f95c							; 
   5506  f95c
   5507  f95c				   .
   5508  f95c							; 
   5509  f95c
   5510  f95c				   .
   5511  f95c							; 
   5512  f95c
   5513  f95c				   .
   5514  f95c							; 
   5515  f95c
   5516  f95c				   .
   5517  f95c							; 
   5518  f95c
   5519  f95c				   .
   5520  f95c							; 
   5521  f95c
   5522  f95c				   .
   5523  f95c							; 
   5524  f95c
   5525  f95c				   .
   5526  f95c							; 
   5527  f95c
   5528  f95c				   .
   5529  f95c							; 
   5530  f95c
   5531  f95c				   .L0164		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Flip
   5532  f95c
   5533  f95c		       a5 ec		      LDA	_Bit3_Auto_Play
   5534  f95e		       29 08		      AND	#8
   5535  f960		       d0 03		      BNE	.skipL0164
   5536  f962				   .condpart58
   5537  f962		       4c ae f9 	      jmp	.__AP_Skip_Flip
   5538  f965
   5539  f965				   .skipL0164
   5540  f965				   .
   5541  f965							; 
   5542  f965
   5543  f965				   .
   5544  f965							; 
   5545  f965
   5546  f965				   .
   5547  f965							; 
   5548  f965
   5549  f965				   .
   5550  f965							; 
   5551  f965
   5552  f965				   .L0165		;  _AP_2_Sec_Score_Flip  =  _AP_2_Sec_Score_Flip  +  1
   5553  f965
   5554  f965		       e6 dc		      INC	_AP_2_Sec_Score_Flip
   5555  f967				   .
   5556  f967							; 
   5557  f967
   5558  f967				   .
   5559  f967							; 
   5560  f967
   5561  f967				   .
   5562  f967							; 
   5563  f967
   5564  f967				   .
   5565  f967							; 
   5566  f967
   5567  f967				   .
   5568  f967							; 
   5569  f967
   5570  f967				   .L0166		;  if _AP_2_Sec_Score_Flip  <	120 then goto __AP_Skip_Flip
   5571  f967
   5572  f967		       a5 dc		      LDA	_AP_2_Sec_Score_Flip
   5573  f969		       c9 78		      CMP	#120
   5574  f96b		       b0 03		      BCS	.skipL0166
   5575  f96d				   .condpart59
   5576  f96d		       4c ae f9 	      jmp	.__AP_Skip_Flip
   5577  f970
   5578  f970				   .skipL0166
   5579  f970				   .
   5580  f970							; 
   5581  f970
   5582  f970				   .
   5583  f970							; 
   5584  f970
   5585  f970				   .
   5586  f970							; 
   5587  f970
   5588  f970				   .
   5589  f970							; 
   5590  f970
   5591  f970				   .L0167		;  _AP_2_Sec_Score_Flip  =  0	:  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   5592  f970
   5593  f970		       a9 00		      LDA	#0
   5594  f972		       85 dc		      STA	_AP_2_Sec_Score_Flip
   5595  f974		       a5 ec		      LDA	_Bit6_Swap_Scores
   5596  f976		       29 40		      AND	#64
   5597  f978		       08		      PHP
   5598  f979		       a5 ec		      LDA	_Bit6_Swap_Scores
   5599  f97b		       29 bf		      AND	#191
   5600  f97d		       28		      PLP
   5601  f97e		       d0 02		      .byte.b	$D0, $02
   5602  f980		       09 40		      ORA	#64
   5603  f982		       85 ec		      STA	_Bit6_Swap_Scores
   5604  f984				   .
   5605  f984							; 
   5606  f984
   5607  f984				   .
   5608  f984							; 
   5609  f984
   5610  f984				   .
   5611  f984							; 
   5612  f984
   5613  f984				   .
   5614  f984							; 
   5615  f984
   5616  f984				   .L0168		;  if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
   5617  f984
   5618  f984		       24 ec		      BIT	_Bit6_Swap_Scores
   5619  f986		       70 03		      BVS	.skipL0168
   5620  f988				   .condpart60
   5621  f988		       4c 9e f9 	      jmp	.__AP_Skip_HiScore_Swap
   5622  f98b
   5623  f98b				   .skipL0168
   5624  f98b				   .
   5625  f98b							; 
   5626  f98b
   5627  f98b				   .
   5628  f98b							; 
   5629  f98b
   5630  f98b				   .
   5631  f98b							; 
   5632  f98b
   5633  f98b				   .
   5634  f98b							; 
   5635  f98b
   5636  f98b				   .L0169		;  scorecolor	=  $AE
   5637  f98b
   5638  f98b		       a9 ae		      LDA	#$AE
   5639  f98d		       85 a3		      STA	scorecolor
   5640  f98f				   .
   5641  f98f							; 
   5642  f98f
   5643  f98f				   .L0170		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   5644  f98f
   5645  f98f		       a5 e9		      LDA	_High_Score1
   5646  f991		       85 93		      STA	_sc1
   5647  f993		       a5 ea		      LDA	_High_Score2
   5648  f995		       85 94		      STA	_sc2
   5649  f997		       a5 eb		      LDA	_High_Score3
   5650  f999		       85 95		      STA	_sc3
   5651  f99b				   .
   5652  f99b							; 
   5653  f99b
   5654  f99b				   .L0171		;  goto __AP_Skip_Flip
   5655  f99b
   5656  f99b		       4c ae f9 	      jmp	.__AP_Skip_Flip
   5657  f99e
   5658  f99e				   .
   5659  f99e							; 
   5660  f99e
   5661  f99e				   .__AP_Skip_HiScore_Swap
   5662  f99e							; __AP_Skip_HiScore_Swap
   5663  f99e
   5664  f99e				   .
   5665  f99e							; 
   5666  f99e
   5667  f99e				   .
   5668  f99e							; 
   5669  f99e
   5670  f99e				   .
   5671  f99e							; 
   5672  f99e
   5673  f99e				   .
   5674  f99e							; 
   5675  f99e
   5676  f99e				   .L0172		;  scorecolor	=  $1C
   5677  f99e
   5678  f99e		       a9 1c		      LDA	#$1C
   5679  f9a0		       85 a3		      STA	scorecolor
   5680  f9a2				   .
   5681  f9a2							; 
   5682  f9a2
   5683  f9a2				   .L0173		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   5684  f9a2
   5685  f9a2		       a5 e6		      LDA	_Score1_Mem
   5686  f9a4		       85 93		      STA	_sc1
   5687  f9a6		       a5 e7		      LDA	_Score2_Mem
   5688  f9a8		       85 94		      STA	_sc2
   5689  f9aa		       a5 e8		      LDA	_Score3_Mem
   5690  f9ac		       85 95		      STA	_sc3
   5691  f9ae				   .
   5692  f9ae							; 
   5693  f9ae
   5694  f9ae				   .__AP_Skip_Flip
   5695  f9ae							; __AP_Skip_Flip
   5696  f9ae
   5697  f9ae				   .
   5698  f9ae							; 
   5699  f9ae
   5700  f9ae				   .
   5701  f9ae							; 
   5702  f9ae
   5703  f9ae				   .
   5704  f9ae							; 
   5705  f9ae
   5706  f9ae				   .
   5707  f9ae							; 
   5708  f9ae
   5709  f9ae				   .
   5710  f9ae							; 
   5711  f9ae
   5712  f9ae				   .
   5713  f9ae							; 
   5714  f9ae
   5715  f9ae				   .
   5716  f9ae							; 
   5717  f9ae
   5718  f9ae				   .
   5719  f9ae							; 
   5720  f9ae
   5721  f9ae				   .
   5722  f9ae							; 
   5723  f9ae
   5724  f9ae				   .
   5725  f9ae							; 
   5726  f9ae
   5727  f9ae				   .L0174		;  if _Bit3_Auto_Play{3} then goto __AP_Skip_Pause
   5728  f9ae
   5729  f9ae		       a5 ec		      LDA	_Bit3_Auto_Play
   5730  f9b0		       29 08		      AND	#8
   5731  f9b2		       f0 03		      BEQ	.skipL0174
   5732  f9b4				   .condpart61
   5733  f9b4		       4c f3 f9 	      jmp	.__AP_Skip_Pause
   5734  f9b7
   5735  f9b7				   .skipL0174
   5736  f9b7				   .
   5737  f9b7							; 
   5738  f9b7
   5739  f9b7				   .
   5740  f9b7							; 
   5741  f9b7
   5742  f9b7				   .
   5743  f9b7							; 
   5744  f9b7
   5745  f9b7				   .
   5746  f9b7							; 
   5747  f9b7
   5748  f9b7				   .L0175		;  _Bit1_BW_Check{1}  =  0
   5749  f9b7
   5750  f9b7		       a5 e5		      LDA	_Bit1_BW_Check
   5751  f9b9		       29 fd		      AND	#253
   5752  f9bb		       85 e5		      STA	_Bit1_BW_Check
   5753  f9bd				   .
   5754  f9bd							; 
   5755  f9bd
   5756  f9bd				   .L0176		;  if switchbw then _Bit1_BW_Check{1}	=  1
   5757  f9bd
   5758  f9bd		       a9 08		      lda	#8
   5759  f9bf		       2c 82 02 	      bit	SWCHB
   5760  f9c2		       d0 06		      BNE	.skipL0176
   5761  f9c4				   .condpart62
   5762  f9c4		       a5 e5		      LDA	_Bit1_BW_Check
   5763  f9c6		       09 02		      ORA	#2
   5764  f9c8		       85 e5		      STA	_Bit1_BW_Check
   5765  f9ca				   .skipL0176
   5766  f9ca				   .
   5767  f9ca							; 
   5768  f9ca
   5769  f9ca				   .
   5770  f9ca							; 
   5771  f9ca
   5772  f9ca				   .
   5773  f9ca							; 
   5774  f9ca
   5775  f9ca				   .
   5776  f9ca							; 
   5777  f9ca
   5778  f9ca				   .
   5779  f9ca							; 
   5780  f9ca
   5781  f9ca				   .L0177		;  if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup
   5782  f9ca
   5783  f9ca		       a5 e5		      LDA	_Bit0_BW_Mem
   5784  f9cc		       4a		      LSR
   5785  f9cd		       90 09		      BCC	.skipL0177
   5786  f9cf				   .condpart63
   5787  f9cf		       a5 e5		      LDA	_Bit1_BW_Check
   5788  f9d1		       29 02		      AND	#2
   5789  f9d3		       d0 03		      BNE	.skip63then
   5790  f9d5				   .condpart64
   5791  f9d5		       4c ee fb 	      jmp	.__Pause_Setup
   5792  f9d8
   5793  f9d8				   .skip63then
   5794  f9d8				   .skipL0177
   5795  f9d8				   .
   5796  f9d8							; 
   5797  f9d8
   5798  f9d8				   .L0178		;  if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup
   5799  f9d8
   5800  f9d8		       a5 e5		      LDA	_Bit0_BW_Mem
   5801  f9da		       4a		      LSR
   5802  f9db		       b0 09		      BCS	.skipL0178
   5803  f9dd				   .condpart65
   5804  f9dd		       a5 e5		      LDA	_Bit1_BW_Check
   5805  f9df		       29 02		      AND	#2
   5806  f9e1		       f0 03		      BEQ	.skip65then
   5807  f9e3				   .condpart66
   5808  f9e3		       4c ee fb 	      jmp	.__Pause_Setup
   5809  f9e6
   5810  f9e6				   .skip65then
   5811  f9e6				   .skipL0178
   5812  f9e6				   .
   5813  f9e6							; 
   5814  f9e6
   5815  f9e6				   .
   5816  f9e6							; 
   5817  f9e6
   5818  f9e6				   .
   5819  f9e6							; 
   5820  f9e6
   5821  f9e6				   .
   5822  f9e6							; 
   5823  f9e6
   5824  f9e6				   .L0179		;  if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup
   5825  f9e6
   5826  f9e6		       24 0d		      bit	INPT5
   5827  f9e8		       30 09		      BMI	.skipL0179
   5828  f9ea				   .condpart67
   5829  f9ea		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5830  f9ec		       29 02		      AND	#2
   5831  f9ee		       d0 03		      BNE	.skip67then
   5832  f9f0				   .condpart68
   5833  f9f0		       4c ee fb 	      jmp	.__Pause_Setup
   5834  f9f3
   5835  f9f3				   .skip67then
   5836  f9f3				   .skipL0179
   5837  f9f3				   .
   5838  f9f3							; 
   5839  f9f3
   5840  f9f3				   .__AP_Skip_Pause
   5841  f9f3							; __AP_Skip_Pause
   5842  f9f3
   5843  f9f3				   .
   5844  f9f3							; 
   5845  f9f3
   5846  f9f3				   .
   5847  f9f3							; 
   5848  f9f3
   5849  f9f3				   .
   5850  f9f3							; 
   5851  f9f3
   5852  f9f3				   .
   5853  f9f3							; 
   5854  f9f3
   5855  f9f3				   .
   5856  f9f3							; 
   5857  f9f3
   5858  f9f3				   .
   5859  f9f3							; 
   5860  f9f3
   5861  f9f3				   .
   5862  f9f3							; 
   5863  f9f3
   5864  f9f3				   .L0180		;  drawscreen
   5865  f9f3
   5866  f9f3		       20 c7 f3 	      jsr	drawscreen
   5867  f9f6				   .
   5868  f9f6							; 
   5869  f9f6
   5870  f9f6				   .
   5871  f9f6							; 
   5872  f9f6
   5873  f9f6				   .
   5874  f9f6							; 
   5875  f9f6
   5876  f9f6				   .
   5877  f9f6							; 
   5878  f9f6
   5879  f9f6				   .
   5880  f9f6							; 
   5881  f9f6
   5882  f9f6				   .
   5883  f9f6							; 
   5884  f9f6
   5885  f9f6				   .
   5886  f9f6							; 
   5887  f9f6
   5888  f9f6				   .
   5889  f9f6							; 
   5890  f9f6
   5891  f9f6				   .
   5892  f9f6							; 
   5893  f9f6
   5894  f9f6				   .
   5895  f9f6							; 
   5896  f9f6
   5897  f9f6				   .
   5898  f9f6							; 
   5899  f9f6
   5900  f9f6				   .
   5901  f9f6							; 
   5902  f9f6
   5903  f9f6				   .
   5904  f9f6							; 
   5905  f9f6
   5906  f9f6				   .
   5907  f9f6							; 
   5908  f9f6
   5909  f9f6				   .
   5910  f9f6							; 
   5911  f9f6
   5912  f9f6				   .L0181		;  if !_Bit2_Game_Control{2} then goto __Skip_Check_G_Over
   5913  f9f6
   5914  f9f6		       a5 ec		      LDA	_Bit2_Game_Control
   5915  f9f8		       29 04		      AND	#4
   5916  f9fa		       d0 03		      BNE	.skipL0181
   5917  f9fc				   .condpart69
   5918  f9fc		       4c 1d fa 	      jmp	.__Skip_Check_G_Over
   5919  f9ff
   5920  f9ff				   .skipL0181
   5921  f9ff				   .
   5922  f9ff							; 
   5923  f9ff
   5924  f9ff				   .
   5925  f9ff							; 
   5926  f9ff
   5927  f9ff				   .
   5928  f9ff							; 
   5929  f9ff
   5930  f9ff				   .
   5931  f9ff							; 
   5932  f9ff
   5933  f9ff				   .
   5934  f9ff							; 
   5935  f9ff
   5936  f9ff				   .L0182		;  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =  0  :  _sc1  =	_Score1_Mem  :	_sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem  :  goto __Start_Restart
   5937  f9ff
   5938  f9ff		       a5 ec		      LDA	_Bit3_Auto_Play
   5939  fa01		       29 08		      AND	#8
   5940  fa03		       f0 15		      BEQ	.skipL0182
   5941  fa05				   .condpart70
   5942  fa05		       a5 ec		      LDA	_Bit2_Game_Control
   5943  fa07		       29 fb		      AND	#251
   5944  fa09		       85 ec		      STA	_Bit2_Game_Control
   5945  fa0b		       a5 e6		      LDA	_Score1_Mem
   5946  fa0d		       85 93		      STA	_sc1
   5947  fa0f		       a5 e7		      LDA	_Score2_Mem
   5948  fa11		       85 94		      STA	_sc2
   5949  fa13		       a5 e8		      LDA	_Score3_Mem
   5950  fa15		       85 95		      STA	_sc3
   5951  fa17		       4c 67 f4 	      jmp	.__Start_Restart
   5952  fa1a
   5953  fa1a				   .skipL0182
   5954  fa1a				   .
   5955  fa1a							; 
   5956  fa1a
   5957  fa1a				   .
   5958  fa1a							; 
   5959  fa1a
   5960  fa1a				   .
   5961  fa1a							; 
   5962  fa1a
   5963  fa1a				   .
   5964  fa1a							; 
   5965  fa1a
   5966  fa1a				   .L0183		;  goto __Game_Over_Setup
   5967  fa1a
   5968  fa1a		       4c a0 fa 	      jmp	.__Game_Over_Setup
   5969  fa1d
   5970  fa1d				   .
   5971  fa1d							; 
   5972  fa1d
   5973  fa1d				   .__Skip_Check_G_Over
   5974  fa1d							; __Skip_Check_G_Over
   5975  fa1d
   5976  fa1d				   .
   5977  fa1d							; 
   5978  fa1d
   5979  fa1d				   .
   5980  fa1d							; 
   5981  fa1d
   5982  fa1d				   .
   5983  fa1d							; 
   5984  fa1d
   5985  fa1d				   .
   5986  fa1d							; 
   5987  fa1d
   5988  fa1d				   .
   5989  fa1d							; 
   5990  fa1d
   5991  fa1d				   .
   5992  fa1d							; 
   5993  fa1d
   5994  fa1d				   .
   5995  fa1d							; 
   5996  fa1d
   5997  fa1d				   .
   5998  fa1d							; 
   5999  fa1d
   6000  fa1d				   .
   6001  fa1d							; 
   6002  fa1d
   6003  fa1d				   .
   6004  fa1d							; 
   6005  fa1d
   6006  fa1d				   .
   6007  fa1d							; 
   6008  fa1d
   6009  fa1d				   .
   6010  fa1d							; 
   6011  fa1d
   6012  fa1d				   .
   6013  fa1d							; 
   6014  fa1d
   6015  fa1d				   .
   6016  fa1d							; 
   6017  fa1d
   6018  fa1d				   .L0184		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Reset
   6019  fa1d
   6020  fa1d		       a5 ec		      LDA	_Bit3_Auto_Play
   6021  fa1f		       29 08		      AND	#8
   6022  fa21		       d0 03		      BNE	.skipL0184
   6023  fa23				   .condpart71
   6024  fa23		       4c 43 fa 	      jmp	.__AP_Skip_Reset
   6025  fa26
   6026  fa26				   .skipL0184
   6027  fa26				   .
   6028  fa26							; 
   6029  fa26
   6030  fa26				   .
   6031  fa26							; 
   6032  fa26
   6033  fa26				   .
   6034  fa26							; 
   6035  fa26
   6036  fa26				   .
   6037  fa26							; 
   6038  fa26
   6039  fa26				   .
   6040  fa26							; 
   6041  fa26
   6042  fa26				   .
   6043  fa26							; 
   6044  fa26
   6045  fa26				   .L0185		;  if switchreset  ||	joy0fire then _Bit3_Auto_Play{3}  =  0	:  _Bit2_Game_Control{2}  =  1	:  goto __Start_Restart
   6046  fa26
   6047  fa26		       a9 01		      lda	#1
   6048  fa28		       2c 82 02 	      bit	SWCHB
   6049  fa2b		       d0 03		      BNE	.skipL0185
   6050  fa2d				   .condpart72
   6051  fa2d		       4c 34 fa 	      jmp	.condpart73
   6052  fa30				   .skipL0185
   6053  fa30		       24 0c		      bit	INPT4
   6054  fa32		       30 0f		      BMI	.skip2OR
   6055  fa34				   .condpart73
   6056  fa34		       a5 ec		      LDA	_Bit3_Auto_Play
   6057  fa36		       29 f7		      AND	#247
   6058  fa38		       85 ec		      STA	_Bit3_Auto_Play
   6059  fa3a		       a5 ec		      LDA	_Bit2_Game_Control
   6060  fa3c		       09 04		      ORA	#4
   6061  fa3e		       85 ec		      STA	_Bit2_Game_Control
   6062  fa40		       4c 67 f4 	      jmp	.__Start_Restart
   6063  fa43
   6064  fa43				   .skip2OR
   6065  fa43				   .
   6066  fa43							; 
   6067  fa43
   6068  fa43				   .__AP_Skip_Reset
   6069  fa43							; __AP_Skip_Reset
   6070  fa43
   6071  fa43				   .
   6072  fa43							; 
   6073  fa43
   6074  fa43				   .
   6075  fa43							; 
   6076  fa43
   6077  fa43				   .
   6078  fa43							; 
   6079  fa43
   6080  fa43				   .
   6081  fa43							; 
   6082  fa43
   6083  fa43				   .
   6084  fa43							; 
   6085  fa43
   6086  fa43				   .L0186		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   6087  fa43
   6088  fa43		       a9 01		      lda	#1
   6089  fa45		       2c 82 02 	      bit	SWCHB
   6090  fa48		       f0 09		      BEQ	.skipL0186
   6091  fa4a				   .condpart74
   6092  fa4a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6093  fa4c		       29 fe		      AND	#254
   6094  fa4e		       85 ec		      STA	_Bit0_Reset_Restrainer
   6095  fa50		       4c 14 f6 	      jmp	.__Main_Loop
   6096  fa53
   6097  fa53				   .skipL0186
   6098  fa53				   .
   6099  fa53							; 
   6100  fa53
   6101  fa53				   .
   6102  fa53							; 
   6103  fa53
   6104  fa53				   .
   6105  fa53							; 
   6106  fa53
   6107  fa53				   .
   6108  fa53							; 
   6109  fa53
   6110  fa53				   .
   6111  fa53							; 
   6112  fa53
   6113  fa53				   .L0187		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   6114  fa53
   6115  fa53		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6116  fa55		       4a		      LSR
   6117  fa56		       90 03		      BCC	.skipL0187
   6118  fa58				   .condpart75
   6119  fa58		       4c 14 f6 	      jmp	.__Main_Loop
   6120  fa5b
   6121  fa5b				   .skipL0187
   6122  fa5b				   .
   6123  fa5b							; 
   6124  fa5b
   6125  fa5b				   .
   6126  fa5b							; 
   6127  fa5b
   6128  fa5b				   .
   6129  fa5b							; 
   6130  fa5b
   6131  fa5b				   .
   6132  fa5b							; 
   6133  fa5b
   6134  fa5b				   .L0188		;  _Bit2_Game_Control{2}  =  0
   6135  fa5b
   6136  fa5b		       a5 ec		      LDA	_Bit2_Game_Control
   6137  fa5d		       29 fb		      AND	#251
   6138  fa5f		       85 ec		      STA	_Bit2_Game_Control
   6139  fa61				   .
   6140  fa61							; 
   6141  fa61
   6142  fa61				   .
   6143  fa61							; 
   6144  fa61
   6145  fa61				   .
   6146  fa61							; 
   6147  fa61
   6148  fa61				   .
   6149  fa61							; 
   6150  fa61
   6151  fa61				   .
   6152  fa61							; 
   6153  fa61
   6154  fa61				   .L0189		;  goto __Game_Over_Setup
   6155  fa61
   6156  fa61		       4c a0 fa 	      jmp	.__Game_Over_Setup
   6157  fa64
   6158  fa64				   .
   6159  fa64							; 
   6160  fa64
   6161  fa64				   .
   6162  fa64							; 
   6163  fa64
   6164  fa64				   .
   6165  fa64							; 
   6166  fa64
   6167  fa64				   .
   6168  fa64							; 
   6169  fa64
   6170  fa64				   .
   6171  fa64							; 
   6172  fa64
   6173  fa64				   .
   6174  fa64							; 
   6175  fa64
   6176  fa64				   .
   6177  fa64							; 
   6178  fa64
   6179  fa64				   .
   6180  fa64							; 
   6181  fa64
   6182  fa64				   .
   6183  fa64							; 
   6184  fa64
   6185  fa64				   .
   6186  fa64							; 
   6187  fa64
   6188  fa64				   .
   6189  fa64							; 
   6190  fa64
   6191  fa64				   .
   6192  fa64							; 
   6193  fa64
   6194  fa64				   .
   6195  fa64							; 
   6196  fa64
   6197  fa64				   .
   6198  fa64							; 
   6199  fa64
   6200  fa64				   .
   6201  fa64							; 
   6202  fa64
   6203  fa64				   .
   6204  fa64							; 
   6205  fa64
   6206  fa64				   .
   6207  fa64							; 
   6208  fa64
   6209  fa64				   .
   6210  fa64							; 
   6211  fa64
   6212  fa64				   .
   6213  fa64							; 
   6214  fa64
   6215  fa64				   .
   6216  fa64							; 
   6217  fa64
   6218  fa64				   .__Sq00
   6219  fa64							; __Sq00
   6220  fa64
   6221  fa64				   .L0190		;  player1:
   6222  fa64
   6223  fa64		       a2 d8		      LDX	#<playerL0190_1
   6224  fa66		       86 8c		      STX	player1pointerlo
   6225  fa68		       a9 fe		      LDA	#>playerL0190_1
   6226  fa6a		       85 8d		      STA	player1pointerhi
   6227  fa6c		       a9 03		      LDA	#3
   6228  fa6e		       85 8f		      STA	player1height
   6229  fa70				   .
   6230  fa70							; 
   6231  fa70
   6232  fa70				   .L0191		;  goto __Squirrel_Frame_Done
   6233  fa70
   6234  fa70		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   6235  fa73
   6236  fa73				   .
   6237  fa73							; 
   6238  fa73
   6239  fa73				   .
   6240  fa73							; 
   6241  fa73
   6242  fa73				   .__Sq01
   6243  fa73							; __Sq01
   6244  fa73
   6245  fa73				   .L0192		;  player1:
   6246  fa73
   6247  fa73		       a2 dc		      LDX	#<playerL0192_1
   6248  fa75		       86 8c		      STX	player1pointerlo
   6249  fa77		       a9 fe		      LDA	#>playerL0192_1
   6250  fa79		       85 8d		      STA	player1pointerhi
   6251  fa7b		       a9 03		      LDA	#3
   6252  fa7d		       85 8f		      STA	player1height
   6253  fa7f				   .
   6254  fa7f							; 
   6255  fa7f
   6256  fa7f				   .L0193		;  goto __Squirrel_Frame_Done
   6257  fa7f
   6258  fa7f		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   6259  fa82
   6260  fa82				   .
   6261  fa82							; 
   6262  fa82
   6263  fa82				   .
   6264  fa82							; 
   6265  fa82
   6266  fa82				   .__Sq02
   6267  fa82							; __Sq02
   6268  fa82
   6269  fa82				   .L0194		;  player1:
   6270  fa82
   6271  fa82		       a2 e0		      LDX	#<playerL0194_1
   6272  fa84		       86 8c		      STX	player1pointerlo
   6273  fa86		       a9 fe		      LDA	#>playerL0194_1
   6274  fa88		       85 8d		      STA	player1pointerhi
   6275  fa8a		       a9 03		      LDA	#3
   6276  fa8c		       85 8f		      STA	player1height
   6277  fa8e				   .
   6278  fa8e							; 
   6279  fa8e
   6280  fa8e				   .L0195		;  goto __Squirrel_Frame_Done
   6281  fa8e
   6282  fa8e		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   6283  fa91
   6284  fa91				   .
   6285  fa91							; 
   6286  fa91
   6287  fa91				   .
   6288  fa91							; 
   6289  fa91
   6290  fa91				   .__Sq03
   6291  fa91							; __Sq03
   6292  fa91
   6293  fa91				   .L0196		;  player1:
   6294  fa91
   6295  fa91		       a2 e4		      LDX	#<playerL0196_1
   6296  fa93		       86 8c		      STX	player1pointerlo
   6297  fa95		       a9 fe		      LDA	#>playerL0196_1
   6298  fa97		       85 8d		      STA	player1pointerhi
   6299  fa99		       a9 03		      LDA	#3
   6300  fa9b		       85 8f		      STA	player1height
   6301  fa9d				   .
   6302  fa9d							; 
   6303  fa9d
   6304  fa9d				   .L0197		;  goto __Squirrel_Frame_Done
   6305  fa9d
   6306  fa9d		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   6307  faa0
   6308  faa0				   .
   6309  faa0							; 
   6310  faa0
   6311  faa0				   .
   6312  faa0							; 
   6313  faa0
   6314  faa0				   .
   6315  faa0							; 
   6316  faa0
   6317  faa0				   .
   6318  faa0							; 
   6319  faa0
   6320  faa0				   .
   6321  faa0							; 
   6322  faa0
   6323  faa0				   .
   6324  faa0							; 
   6325  faa0
   6326  faa0				   .
   6327  faa0							; 
   6328  faa0
   6329  faa0				   .
   6330  faa0							; 
   6331  faa0
   6332  faa0				   .
   6333  faa0							; 
   6334  faa0
   6335  faa0				   .
   6336  faa0							; 
   6337  faa0
   6338  faa0				   .
   6339  faa0							; 
   6340  faa0
   6341  faa0				   .__Game_Over_Setup
   6342  faa0							; __Game_Over_Setup
   6343  faa0
   6344  faa0				   .
   6345  faa0							; 
   6346  faa0
   6347  faa0				   .
   6348  faa0							; 
   6349  faa0
   6350  faa0				   .
   6351  faa0							; 
   6352  faa0
   6353  faa0				   .
   6354  faa0							; 
   6355  faa0
   6356  faa0				   .
   6357  faa0							; 
   6358  faa0
   6359  faa0				   .
   6360  faa0							; 
   6361  faa0
   6362  faa0				   .
   6363  faa0							; 
   6364  faa0
   6365  faa0				   .
   6366  faa0							; 
   6367  faa0
   6368  faa0				   .
   6369  faa0							; 
   6370  faa0
   6371  faa0				   .
   6372  faa0							; 
   6373  faa0
   6374  faa0				   .
   6375  faa0							; 
   6376  faa0
   6377  faa0				   .L0198		;  if _sc1  >	_High_Score1 then goto __New_High_Score
   6378  faa0
   6379  faa0		       a5 e9		      LDA	_High_Score1
   6380  faa2		       c5 93		      CMP	_sc1
   6381  faa4		       b0 03		      BCS	.skipL0198
   6382  faa6				   .condpart76
   6383  faa6		       4c d9 fa 	      jmp	.__New_High_Score
   6384  faa9
   6385  faa9				   .skipL0198
   6386  faa9				   .L0199		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
   6387  faa9
   6388  faa9		       a5 93		      LDA	_sc1
   6389  faab		       c5 e9		      CMP	_High_Score1
   6390  faad		       b0 03		      BCS	.skipL0199
   6391  faaf				   .condpart77
   6392  faaf		       4c e5 fa 	      jmp	.__Skip_High_Score
   6393  fab2
   6394  fab2				   .skipL0199
   6395  fab2				   .
   6396  fab2							; 
   6397  fab2
   6398  fab2				   .
   6399  fab2							; 
   6400  fab2
   6401  fab2				   .
   6402  fab2							; 
   6403  fab2
   6404  fab2				   .
   6405  fab2							; 
   6406  fab2
   6407  fab2				   .L0200		;  if _sc2  >	_High_Score2 then goto __New_High_Score
   6408  fab2
   6409  fab2		       a5 ea		      LDA	_High_Score2
   6410  fab4		       c5 94		      CMP	_sc2
   6411  fab6		       b0 03		      BCS	.skipL0200
   6412  fab8				   .condpart78
   6413  fab8		       4c d9 fa 	      jmp	.__New_High_Score
   6414  fabb
   6415  fabb				   .skipL0200
   6416  fabb				   .L0201		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
   6417  fabb
   6418  fabb		       a5 94		      LDA	_sc2
   6419  fabd		       c5 ea		      CMP	_High_Score2
   6420  fabf		       b0 03		      BCS	.skipL0201
   6421  fac1				   .condpart79
   6422  fac1		       4c e5 fa 	      jmp	.__Skip_High_Score
   6423  fac4
   6424  fac4				   .skipL0201
   6425  fac4				   .
   6426  fac4							; 
   6427  fac4
   6428  fac4				   .
   6429  fac4							; 
   6430  fac4
   6431  fac4				   .
   6432  fac4							; 
   6433  fac4
   6434  fac4				   .
   6435  fac4							; 
   6436  fac4
   6437  fac4				   .L0202		;  if _sc3  >	_High_Score3 then goto __New_High_Score
   6438  fac4
   6439  fac4		       a5 eb		      LDA	_High_Score3
   6440  fac6		       c5 95		      CMP	_sc3
   6441  fac8		       b0 03		      BCS	.skipL0202
   6442  faca				   .condpart80
   6443  faca		       4c d9 fa 	      jmp	.__New_High_Score
   6444  facd
   6445  facd				   .skipL0202
   6446  facd				   .L0203		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
   6447  facd
   6448  facd		       a5 95		      LDA	_sc3
   6449  facf		       c5 eb		      CMP	_High_Score3
   6450  fad1		       b0 03		      BCS	.skipL0203
   6451  fad3				   .condpart81
   6452  fad3		       4c e5 fa 	      jmp	.__Skip_High_Score
   6453  fad6
   6454  fad6				   .skipL0203
   6455  fad6				   .
   6456  fad6							; 
   6457  fad6
   6458  fad6				   .
   6459  fad6							; 
   6460  fad6
   6461  fad6				   .
   6462  fad6							; 
   6463  fad6
   6464  fad6				   .
   6465  fad6							; 
   6466  fad6
   6467  fad6				   .L0204		;  goto __Skip_High_Score
   6468  fad6
   6469  fad6		       4c e5 fa 	      jmp	.__Skip_High_Score
   6470  fad9
   6471  fad9				   .
   6472  fad9							; 
   6473  fad9
   6474  fad9				   .
   6475  fad9							; 
   6476  fad9
   6477  fad9				   .
   6478  fad9							; 
   6479  fad9
   6480  fad9				   .
   6481  fad9							; 
   6482  fad9
   6483  fad9				   .__New_High_Score
   6484  fad9							; __New_High_Score
   6485  fad9
   6486  fad9				   .
   6487  fad9							; 
   6488  fad9
   6489  fad9				   .L0205		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
   6490  fad9
   6491  fad9		       a5 93		      LDA	_sc1
   6492  fadb		       85 e9		      STA	_High_Score1
   6493  fadd		       a5 94		      LDA	_sc2
   6494  fadf		       85 ea		      STA	_High_Score2
   6495  fae1		       a5 95		      LDA	_sc3
   6496  fae3		       85 eb		      STA	_High_Score3
   6497  fae5				   .
   6498  fae5							; 
   6499  fae5
   6500  fae5				   .__Skip_High_Score
   6501  fae5							; __Skip_High_Score
   6502  fae5
   6503  fae5				   .
   6504  fae5							; 
   6505  fae5
   6506  fae5				   .
   6507  fae5							; 
   6508  fae5
   6509  fae5				   .
   6510  fae5							; 
   6511  fae5
   6512  fae5				   .
   6513  fae5							; 
   6514  fae5
   6515  fae5				   .
   6516  fae5							; 
   6517  fae5
   6518  fae5				   .L0206		;  if !_Bit2_Game_Control{2} then goto __Start_Restart
   6519  fae5
   6520  fae5		       a5 ec		      LDA	_Bit2_Game_Control
   6521  fae7		       29 04		      AND	#4
   6522  fae9		       d0 03		      BNE	.skipL0206
   6523  faeb				   .condpart82
   6524  faeb		       4c 67 f4 	      jmp	.__Start_Restart
   6525  faee
   6526  faee				   .skipL0206
   6527  faee				   .
   6528  faee							; 
   6529  faee
   6530  faee				   .
   6531  faee							; 
   6532  faee
   6533  faee				   .
   6534  faee							; 
   6535  faee
   6536  faee				   .
   6537  faee							; 
   6538  faee
   6539  faee				   .
   6540  faee							; 
   6541  faee
   6542  faee				   .
   6543  faee							; 
   6544  faee
   6545  faee				   .L0207		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   6546  faee
   6547  faee		       a5 93		      LDA	_sc1
   6548  faf0		       85 e6		      STA	_Score1_Mem
   6549  faf2		       a5 94		      LDA	_sc2
   6550  faf4		       85 e7		      STA	_Score2_Mem
   6551  faf6		       a5 95		      LDA	_sc3
   6552  faf8		       85 e8		      STA	_Score3_Mem
   6553  fafa				   .
   6554  fafa							; 
   6555  fafa
   6556  fafa				   .
   6557  fafa							; 
   6558  fafa
   6559  fafa				   .
   6560  fafa							; 
   6561  fafa
   6562  fafa				   .
   6563  fafa							; 
   6564  fafa
   6565  fafa				   .
   6566  fafa							; 
   6567  fafa
   6568  fafa				   .
   6569  fafa							; 
   6570  fafa
   6571  fafa				   .L0208		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   6572  fafa
   6573  fafa		       a9 00		      LDA	#0
   6574  fafc		       85 d4		      STA	_Master_Counter
   6575  fafe		       85 d5		      STA	_Frame_Counter
   6576  fb00				   .
   6577  fb00							; 
   6578  fb00
   6579  fb00				   .
   6580  fb00							; 
   6581  fb00
   6582  fb00				   .
   6583  fb00							; 
   6584  fb00
   6585  fb00				   .
   6586  fb00							; 
   6587  fb00
   6588  fb00				   .
   6589  fb00							; 
   6590  fb00
   6591  fb00				   .
   6592  fb00							; 
   6593  fb00
   6594  fb00				   .L0209		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200
   6595  fb00
   6596  fb00		       a9 c8		      LDA	#200
   6597  fb02		       85 85		      STA	player0y
   6598  fb04		       85 86		      STA	player1y
   6599  fb06		       85 91		      STA	missile0y
   6600  fb08				   .
   6601  fb08							; 
   6602  fb08
   6603  fb08				   .
   6604  fb08							; 
   6605  fb08
   6606  fb08				   .
   6607  fb08							; 
   6608  fb08
   6609  fb08				   .
   6610  fb08							; 
   6611  fb08
   6612  fb08				   .
   6613  fb08							; 
   6614  fb08
   6615  fb08				   .
   6616  fb08							; 
   6617  fb08
   6618  fb08				   .
   6619  fb08							; 
   6620  fb08
   6621  fb08				   .
   6622  fb08							; 
   6623  fb08
   6624  fb08				   .
   6625  fb08							; 
   6626  fb08
   6627  fb08				   .
   6628  fb08							; 
   6629  fb08
   6630  fb08				   .
   6631  fb08							; 
   6632  fb08
   6633  fb08				   .L0210		;  _Bit0_Reset_Restrainer{0}  =  1
   6634  fb08
   6635  fb08		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6636  fb0a		       09 01		      ORA	#1
   6637  fb0c		       85 ec		      STA	_Bit0_Reset_Restrainer
   6638  fb0e				   .
   6639  fb0e							; 
   6640  fb0e
   6641  fb0e				   .
   6642  fb0e							; 
   6643  fb0e
   6644  fb0e				   .
   6645  fb0e							; 
   6646  fb0e
   6647  fb0e				   .
   6648  fb0e							; 
   6649  fb0e
   6650  fb0e				   .
   6651  fb0e							; 
   6652  fb0e
   6653  fb0e				   .
   6654  fb0e							; 
   6655  fb0e
   6656  fb0e				   .L0211		;  playfield:
   6657  fb0e
   6658  fb0e				  -	      ifconst	pfres
   6659  fb0e				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6660  fb0e					      else
   6661  fb0e		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6662  fb10					      endif
   6663  fb10		       4c 3f fb 	      jmp	pflabel2
   6664  fb13				   PF_data2
   6665  fb13		       7e bf		      .byte.b	%01111110, %10111111
   6666  fb15					      if	(pfwidth>2)
   6667  fb15		       ff 7d		      .byte.b	%11111111, %01111101
   6668  fb17					      endif
   6669  fb17		       60 b3		      .byte.b	%01100000, %10110011
   6670  fb19					      if	(pfwidth>2)
   6671  fb19		       99 0d		      .byte.b	%10011001, %00001101
   6672  fb1b					      endif
   6673  fb1b		       6e bf		      .byte.b	%01101110, %10111111
   6674  fb1d					      if	(pfwidth>2)
   6675  fb1d		       99 3d		      .byte.b	%10011001, %00111101
   6676  fb1f					      endif
   6677  fb1f		       66 b3		      .byte.b	%01100110, %10110011
   6678  fb21					      if	(pfwidth>2)
   6679  fb21		       99 0d		      .byte.b	%10011001, %00001101
   6680  fb23					      endif
   6681  fb23		       7e b3		      .byte.b	%01111110, %10110011
   6682  fb25					      if	(pfwidth>2)
   6683  fb25		       99 7d		      .byte.b	%10011001, %01111101
   6684  fb27					      endif
   6685  fb27		       00 00		      .byte.b	%00000000, %00000000
   6686  fb29					      if	(pfwidth>2)
   6687  fb29		       00 00		      .byte.b	%00000000, %00000000
   6688  fb2b					      endif
   6689  fb2b		       1f cd		      .byte.b	%00011111, %11001101
   6690  fb2d					      if	(pfwidth>2)
   6691  fb2d		       7d 1f		      .byte.b	%01111101, %00011111
   6692  fb2f					      endif
   6693  fb2f		       19 cd		      .byte.b	%00011001, %11001101
   6694  fb31					      if	(pfwidth>2)
   6695  fb31		       61 19		      .byte.b	%01100001, %00011001
   6696  fb33					      endif
   6697  fb33		       19 cd		      .byte.b	%00011001, %11001101
   6698  fb35					      if	(pfwidth>2)
   6699  fb35		       79 0f		      .byte.b	%01111001, %00001111
   6700  fb37					      endif
   6701  fb37		       19 cd		      .byte.b	%00011001, %11001101
   6702  fb39					      if	(pfwidth>2)
   6703  fb39		       61 19		      .byte.b	%01100001, %00011001
   6704  fb3b					      endif
   6705  fb3b		       1f 31		      .byte.b	%00011111, %00110001
   6706  fb3d					      if	(pfwidth>2)
   6707  fb3d		       7d 19		      .byte.b	%01111101, %00011001
   6708  fb3f					      endif
   6709  fb3f				   pflabel2
   6710  fb3f		       bd 13 fb 	      lda	PF_data2,x
   6711  fb42		       95 a4		      sta	playfield,x
   6712  fb44		       ca		      dex
   6713  fb45		       10 f8		      bpl	pflabel2
   6714  fb47				   .
   6715  fb47							; 
   6716  fb47
   6717  fb47				   .
   6718  fb47							; 
   6719  fb47
   6720  fb47				   .
   6721  fb47							; 
   6722  fb47
   6723  fb47				   .
   6724  fb47							; 
   6725  fb47
   6726  fb47				   .
   6727  fb47							; 
   6728  fb47
   6729  fb47				   .
   6730  fb47							; 
   6731  fb47
   6732  fb47				   .
   6733  fb47							; 
   6734  fb47
   6735  fb47				   .
   6736  fb47							; 
   6737  fb47
   6738  fb47				   .
   6739  fb47							; 
   6740  fb47
   6741  fb47				   .
   6742  fb47							; 
   6743  fb47
   6744  fb47				   .
   6745  fb47							; 
   6746  fb47
   6747  fb47				   .__Game_Over_Loop
   6748  fb47							; __Game_Over_Loop
   6749  fb47
   6750  fb47				   .
   6751  fb47							; 
   6752  fb47
   6753  fb47				   .
   6754  fb47							; 
   6755  fb47
   6756  fb47				   .
   6757  fb47							; 
   6758  fb47
   6759  fb47				   .
   6760  fb47							; 
   6761  fb47
   6762  fb47				   .
   6763  fb47							; 
   6764  fb47
   6765  fb47				   .
   6766  fb47							; 
   6767  fb47
   6768  fb47				   .
   6769  fb47							; 
   6770  fb47
   6771  fb47				   .
   6772  fb47							; 
   6773  fb47
   6774  fb47				   .
   6775  fb47							; 
   6776  fb47
   6777  fb47				   .
   6778  fb47							; 
   6779  fb47
   6780  fb47				   .
   6781  fb47							; 
   6782  fb47
   6783  fb47				   .
   6784  fb47							; 
   6785  fb47
   6786  fb47				   .
   6787  fb47							; 
   6788  fb47
   6789  fb47				   .
   6790  fb47							; 
   6791  fb47
   6792  fb47				   .
   6793  fb47							; 
   6794  fb47
   6795  fb47				   .
   6796  fb47							; 
   6797  fb47
   6798  fb47				   .
   6799  fb47							; 
   6800  fb47
   6801  fb47				   .
   6802  fb47							; 
   6803  fb47
   6804  fb47				   .
   6805  fb47							; 
   6806  fb47
   6807  fb47				   .L0212		;  _Master_Counter  =	_Master_Counter  +  1
   6808  fb47
   6809  fb47		       e6 d4		      INC	_Master_Counter
   6810  fb49				   .
   6811  fb49							; 
   6812  fb49
   6813  fb49				   .
   6814  fb49							; 
   6815  fb49
   6816  fb49				   .
   6817  fb49							; 
   6818  fb49
   6819  fb49				   .
   6820  fb49							; 
   6821  fb49
   6822  fb49				   .
   6823  fb49							; 
   6824  fb49
   6825  fb49				   .L0213		;  if _Master_Counter	<  120 then goto __Skip_20_Second_Counter
   6826  fb49
   6827  fb49		       a5 d4		      LDA	_Master_Counter
   6828  fb4b		       c9 78		      CMP	#120
   6829  fb4d		       b0 03		      BCS	.skipL0213
   6830  fb4f				   .condpart83
   6831  fb4f		       4c ad fb 	      jmp	.__Skip_20_Second_Counter
   6832  fb52
   6833  fb52				   .skipL0213
   6834  fb52				   .
   6835  fb52							; 
   6836  fb52
   6837  fb52				   .
   6838  fb52							; 
   6839  fb52
   6840  fb52				   .
   6841  fb52							; 
   6842  fb52
   6843  fb52				   .
   6844  fb52							; 
   6845  fb52
   6846  fb52				   .
   6847  fb52							; 
   6848  fb52
   6849  fb52				   .L0214		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   6850  fb52
   6851  fb52		       e6 d5		      INC	_Frame_Counter
   6852  fb54		       a9 00		      LDA	#0
   6853  fb56		       85 d4		      STA	_Master_Counter
   6854  fb58				   .
   6855  fb58							; 
   6856  fb58
   6857  fb58				   .
   6858  fb58							; 
   6859  fb58
   6860  fb58				   .
   6861  fb58							; 
   6862  fb58
   6863  fb58				   .
   6864  fb58							; 
   6865  fb58
   6866  fb58				   .
   6867  fb58							; 
   6868  fb58
   6869  fb58				   .
   6870  fb58							; 
   6871  fb58
   6872  fb58				   .
   6873  fb58							; 
   6874  fb58
   6875  fb58				   .
   6876  fb58							; 
   6877  fb58
   6878  fb58				   .L0215		;  if _Frame_Counter  >  9 then _Bit2_Game_Control{2}	=  0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart
   6879  fb58
   6880  fb58		       a9 09		      LDA	#9
   6881  fb5a		       c5 d5		      CMP	_Frame_Counter
   6882  fb5c		       b0 15		      BCS	.skipL0215
   6883  fb5e				   .condpart84
   6884  fb5e		       a5 ec		      LDA	_Bit2_Game_Control
   6885  fb60		       29 fb		      AND	#251
   6886  fb62		       85 ec		      STA	_Bit2_Game_Control
   6887  fb64		       a5 e6		      LDA	_Score1_Mem
   6888  fb66		       85 93		      STA	_sc1
   6889  fb68		       a5 e7		      LDA	_Score2_Mem
   6890  fb6a		       85 94		      STA	_sc2
   6891  fb6c		       a5 e8		      LDA	_Score3_Mem
   6892  fb6e		       85 95		      STA	_sc3
   6893  fb70		       4c 67 f4 	      jmp	.__Start_Restart
   6894  fb73
   6895  fb73				   .skipL0215
   6896  fb73				   .
   6897  fb73							; 
   6898  fb73
   6899  fb73				   .
   6900  fb73							; 
   6901  fb73
   6902  fb73				   .
   6903  fb73							; 
   6904  fb73
   6905  fb73				   .
   6906  fb73							; 
   6907  fb73
   6908  fb73				   .L0216		;  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   6909  fb73
   6910  fb73		       a5 ec		      LDA	_Bit6_Swap_Scores
   6911  fb75		       29 40		      AND	#64
   6912  fb77		       08		      PHP
   6913  fb78		       a5 ec		      LDA	_Bit6_Swap_Scores
   6914  fb7a		       29 bf		      AND	#191
   6915  fb7c		       28		      PLP
   6916  fb7d		       d0 02		      .byte.b	$D0, $02
   6917  fb7f		       09 40		      ORA	#64
   6918  fb81		       85 ec		      STA	_Bit6_Swap_Scores
   6919  fb83				   .
   6920  fb83							; 
   6921  fb83
   6922  fb83				   .
   6923  fb83							; 
   6924  fb83
   6925  fb83				   .
   6926  fb83							; 
   6927  fb83
   6928  fb83				   .
   6929  fb83							; 
   6930  fb83
   6931  fb83				   .L0217		;  if !_Bit6_Swap_Scores{6} then goto __GO_Current_Score
   6932  fb83
   6933  fb83		       24 ec		      BIT	_Bit6_Swap_Scores
   6934  fb85		       70 03		      BVS	.skipL0217
   6935  fb87				   .condpart85
   6936  fb87		       4c 9d fb 	      jmp	.__GO_Current_Score
   6937  fb8a
   6938  fb8a				   .skipL0217
   6939  fb8a				   .
   6940  fb8a							; 
   6941  fb8a
   6942  fb8a				   .
   6943  fb8a							; 
   6944  fb8a
   6945  fb8a				   .
   6946  fb8a							; 
   6947  fb8a
   6948  fb8a				   .
   6949  fb8a							; 
   6950  fb8a
   6951  fb8a				   .L0218		;  scorecolor	=  $AE
   6952  fb8a
   6953  fb8a		       a9 ae		      LDA	#$AE
   6954  fb8c		       85 a3		      STA	scorecolor
   6955  fb8e				   .
   6956  fb8e							; 
   6957  fb8e
   6958  fb8e				   .L0219		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   6959  fb8e
   6960  fb8e		       a5 e9		      LDA	_High_Score1
   6961  fb90		       85 93		      STA	_sc1
   6962  fb92		       a5 ea		      LDA	_High_Score2
   6963  fb94		       85 94		      STA	_sc2
   6964  fb96		       a5 eb		      LDA	_High_Score3
   6965  fb98		       85 95		      STA	_sc3
   6966  fb9a				   .
   6967  fb9a							; 
   6968  fb9a
   6969  fb9a				   .L0220		;  goto __Skip_20_Second_Counter
   6970  fb9a
   6971  fb9a		       4c ad fb 	      jmp	.__Skip_20_Second_Counter
   6972  fb9d
   6973  fb9d				   .
   6974  fb9d							; 
   6975  fb9d
   6976  fb9d				   .
   6977  fb9d							; 
   6978  fb9d
   6979  fb9d				   .
   6980  fb9d							; 
   6981  fb9d
   6982  fb9d				   .
   6983  fb9d							; 
   6984  fb9d
   6985  fb9d				   .__GO_Current_Score
   6986  fb9d							; __GO_Current_Score
   6987  fb9d
   6988  fb9d				   .
   6989  fb9d							; 
   6990  fb9d
   6991  fb9d				   .L0221		;  scorecolor	=  $1C
   6992  fb9d
   6993  fb9d		       a9 1c		      LDA	#$1C
   6994  fb9f		       85 a3		      STA	scorecolor
   6995  fba1				   .
   6996  fba1							; 
   6997  fba1
   6998  fba1				   .L0222		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   6999  fba1
   7000  fba1		       a5 e6		      LDA	_Score1_Mem
   7001  fba3		       85 93		      STA	_sc1
   7002  fba5		       a5 e7		      LDA	_Score2_Mem
   7003  fba7		       85 94		      STA	_sc2
   7004  fba9		       a5 e8		      LDA	_Score3_Mem
   7005  fbab		       85 95		      STA	_sc3
   7006  fbad				   .
   7007  fbad							; 
   7008  fbad
   7009  fbad				   .__Skip_20_Second_Counter
   7010  fbad							; __Skip_20_Second_Counter
   7011  fbad
   7012  fbad				   .
   7013  fbad							; 
   7014  fbad
   7015  fbad				   .
   7016  fbad							; 
   7017  fbad
   7018  fbad				   .
   7019  fbad							; 
   7020  fbad
   7021  fbad				   .
   7022  fbad							; 
   7023  fbad
   7024  fbad				   .
   7025  fbad							; 
   7026  fbad
   7027  fbad				   .
   7028  fbad							; 
   7029  fbad
   7030  fbad				   .
   7031  fbad							; 
   7032  fbad
   7033  fbad				   .L0223		;  COLUBK  =  $44  :  COLUPF  =  $2C
   7034  fbad
   7035  fbad		       a9 44		      LDA	#$44
   7036  fbaf		       85 09		      STA	COLUBK
   7037  fbb1		       a9 2c		      LDA	#$2C
   7038  fbb3		       85 08		      STA	COLUPF
   7039  fbb5				   .
   7040  fbb5							; 
   7041  fbb5
   7042  fbb5				   .
   7043  fbb5							; 
   7044  fbb5
   7045  fbb5				   .
   7046  fbb5							; 
   7047  fbb5
   7048  fbb5				   .
   7049  fbb5							; 
   7050  fbb5
   7051  fbb5				   .
   7052  fbb5							; 
   7053  fbb5
   7054  fbb5				   .
   7055  fbb5							; 
   7056  fbb5
   7057  fbb5				   .L0224		;  if _Frame_Counter  >  0 then COLUBK  =  $D2  :  COLUPF  =  $DA
   7058  fbb5
   7059  fbb5		       a9 00		      LDA	#0
   7060  fbb7		       c5 d5		      CMP	_Frame_Counter
   7061  fbb9		       b0 08		      BCS	.skipL0224
   7062  fbbb				   .condpart86
   7063  fbbb		       a9 d2		      LDA	#$D2
   7064  fbbd		       85 09		      STA	COLUBK
   7065  fbbf		       a9 da		      LDA	#$DA
   7066  fbc1		       85 08		      STA	COLUPF
   7067  fbc3				   .skipL0224
   7068  fbc3				   .
   7069  fbc3							; 
   7070  fbc3
   7071  fbc3				   .
   7072  fbc3							; 
   7073  fbc3
   7074  fbc3				   .
   7075  fbc3							; 
   7076  fbc3
   7077  fbc3				   .
   7078  fbc3							; 
   7079  fbc3
   7080  fbc3				   .
   7081  fbc3							; 
   7082  fbc3
   7083  fbc3				   .
   7084  fbc3							; 
   7085  fbc3
   7086  fbc3				   .
   7087  fbc3							; 
   7088  fbc3
   7089  fbc3				   .L0225		;  drawscreen
   7090  fbc3
   7091  fbc3		       20 c7 f3 	      jsr	drawscreen
   7092  fbc6				   .
   7093  fbc6							; 
   7094  fbc6
   7095  fbc6				   .
   7096  fbc6							; 
   7097  fbc6
   7098  fbc6				   .
   7099  fbc6							; 
   7100  fbc6
   7101  fbc6				   .
   7102  fbc6							; 
   7103  fbc6
   7104  fbc6				   .
   7105  fbc6							; 
   7106  fbc6
   7107  fbc6				   .
   7108  fbc6							; 
   7109  fbc6
   7110  fbc6				   .
   7111  fbc6							; 
   7112  fbc6
   7113  fbc6				   .
   7114  fbc6							; 
   7115  fbc6
   7116  fbc6				   .
   7117  fbc6							; 
   7118  fbc6
   7119  fbc6				   .
   7120  fbc6							; 
   7121  fbc6
   7122  fbc6				   .
   7123  fbc6							; 
   7124  fbc6
   7125  fbc6				   .
   7126  fbc6							; 
   7127  fbc6
   7128  fbc6				   .
   7129  fbc6							; 
   7130  fbc6
   7131  fbc6				   .
   7132  fbc6							; 
   7133  fbc6
   7134  fbc6				   .L0226		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
   7135  fbc6
   7136  fbc6		       a5 d5		      LDA	_Frame_Counter
   7137  fbc8		       c9 00		      CMP	#0
   7138  fbca		       d0 03		      BNE	.skipL0226
   7139  fbcc				   .condpart87
   7140  fbcc		       4c 47 fb 	      jmp	.__Game_Over_Loop
   7141  fbcf
   7142  fbcf				   .skipL0226
   7143  fbcf				   .
   7144  fbcf							; 
   7145  fbcf
   7146  fbcf				   .
   7147  fbcf							; 
   7148  fbcf
   7149  fbcf				   .
   7150  fbcf							; 
   7151  fbcf
   7152  fbcf				   .
   7153  fbcf							; 
   7154  fbcf
   7155  fbcf				   .
   7156  fbcf							; 
   7157  fbcf
   7158  fbcf				   .L0227		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
   7159  fbcf
   7160  fbcf		       a9 01		      lda	#1
   7161  fbd1		       2c 82 02 	      bit	SWCHB
   7162  fbd4		       f0 0d		      BEQ	.skipL0227
   7163  fbd6				   .condpart88
   7164  fbd6		       24 0c		      bit	INPT4
   7165  fbd8		       10 09		      BPL	.skip88then
   7166  fbda				   .condpart89
   7167  fbda		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7168  fbdc		       29 fe		      AND	#254
   7169  fbde		       85 ec		      STA	_Bit0_Reset_Restrainer
   7170  fbe0		       4c 47 fb 	      jmp	.__Game_Over_Loop
   7171  fbe3
   7172  fbe3				   .skip88then
   7173  fbe3				   .skipL0227
   7174  fbe3				   .
   7175  fbe3							; 
   7176  fbe3
   7177  fbe3				   .
   7178  fbe3							; 
   7179  fbe3
   7180  fbe3				   .
   7181  fbe3							; 
   7182  fbe3
   7183  fbe3				   .
   7184  fbe3							; 
   7185  fbe3
   7186  fbe3				   .
   7187  fbe3							; 
   7188  fbe3
   7189  fbe3				   .L0228		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   7190  fbe3
   7191  fbe3		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   7192  fbe5		       4a		      LSR
   7193  fbe6		       90 03		      BCC	.skipL0228
   7194  fbe8				   .condpart90
   7195  fbe8		       4c 47 fb 	      jmp	.__Game_Over_Loop
   7196  fbeb
   7197  fbeb				   .skipL0228
   7198  fbeb				   .
   7199  fbeb							; 
   7200  fbeb
   7201  fbeb				   .
   7202  fbeb							; 
   7203  fbeb
   7204  fbeb				   .
   7205  fbeb							; 
   7206  fbeb
   7207  fbeb				   .
   7208  fbeb							; 
   7209  fbeb
   7210  fbeb				   .L0229		;  goto __Start_Restart
   7211  fbeb
   7212  fbeb		       4c 67 f4 	      jmp	.__Start_Restart
   7213  fbee
   7214  fbee				   .
   7215  fbee							; 
   7216  fbee
   7217  fbee				   .
   7218  fbee							; 
   7219  fbee
   7220  fbee				   .
   7221  fbee							; 
   7222  fbee
   7223  fbee				   .
   7224  fbee							; 
   7225  fbee
   7226  fbee				   .
   7227  fbee							; 
   7228  fbee
   7229  fbee				   .
   7230  fbee							; 
   7231  fbee
   7232  fbee				   .
   7233  fbee							; 
   7234  fbee
   7235  fbee				   .
   7236  fbee							; 
   7237  fbee
   7238  fbee				   .
   7239  fbee							; 
   7240  fbee
   7241  fbee				   .
   7242  fbee							; 
   7243  fbee
   7244  fbee				   .
   7245  fbee							; 
   7246  fbee
   7247  fbee				   .
   7248  fbee							; 
   7249  fbee
   7250  fbee				   .
   7251  fbee							; 
   7252  fbee
   7253  fbee				   .
   7254  fbee							; 
   7255  fbee
   7256  fbee				   .
   7257  fbee							; 
   7258  fbee
   7259  fbee				   .
   7260  fbee							; 
   7261  fbee
   7262  fbee				   .
   7263  fbee							; 
   7264  fbee
   7265  fbee				   .
   7266  fbee							; 
   7267  fbee
   7268  fbee				   .
   7269  fbee							; 
   7270  fbee
   7271  fbee				   .
   7272  fbee							; 
   7273  fbee
   7274  fbee				   .
   7275  fbee							; 
   7276  fbee
   7277  fbee				   .
   7278  fbee							; 
   7279  fbee
   7280  fbee				   .__Pause_Setup
   7281  fbee							; __Pause_Setup
   7282  fbee
   7283  fbee				   .
   7284  fbee							; 
   7285  fbee
   7286  fbee				   .
   7287  fbee							; 
   7288  fbee
   7289  fbee				   .
   7290  fbee							; 
   7291  fbee
   7292  fbee				   .
   7293  fbee							; 
   7294  fbee
   7295  fbee				   .
   7296  fbee							; 
   7297  fbee
   7298  fbee				   .
   7299  fbee							; 
   7300  fbee
   7301  fbee				   .L0230		;  AUDV0  =  0  :  AUDV1  =  0
   7302  fbee
   7303  fbee		       a9 00		      LDA	#0
   7304  fbf0		       85 19		      STA	AUDV0
   7305  fbf2		       85 1a		      STA	AUDV1
   7306  fbf4				   .
   7307  fbf4							; 
   7308  fbf4
   7309  fbf4				   .
   7310  fbf4							; 
   7311  fbf4
   7312  fbf4				   .
   7313  fbf4							; 
   7314  fbf4
   7315  fbf4				   .
   7316  fbf4							; 
   7317  fbf4
   7318  fbf4				   .
   7319  fbf4							; 
   7320  fbf4
   7321  fbf4				   .
   7322  fbf4							; 
   7323  fbf4
   7324  fbf4				   .L0231		;  _Bit1_FireB_Restrainer{1}  =  1
   7325  fbf4
   7326  fbf4		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7327  fbf6		       09 02		      ORA	#2
   7328  fbf8		       85 ec		      STA	_Bit1_FireB_Restrainer
   7329  fbfa				   .
   7330  fbfa							; 
   7331  fbfa
   7332  fbfa				   .
   7333  fbfa							; 
   7334  fbfa
   7335  fbfa				   .
   7336  fbfa							; 
   7337  fbfa
   7338  fbfa				   .
   7339  fbfa							; 
   7340  fbfa
   7341  fbfa				   .
   7342  fbfa							; 
   7343  fbfa
   7344  fbfa				   .
   7345  fbfa							; 
   7346  fbfa
   7347  fbfa				   .L0232		;  _Pause_Counter_Tmp	=  0
   7348  fbfa
   7349  fbfa		       a9 00		      LDA	#0
   7350  fbfc		       85 db		      STA	_Pause_Counter_Tmp
   7351  fbfe				   .
   7352  fbfe							; 
   7353  fbfe
   7354  fbfe				   .
   7355  fbfe							; 
   7356  fbfe
   7357  fbfe				   .
   7358  fbfe							; 
   7359  fbfe
   7360  fbfe				   .
   7361  fbfe							; 
   7362  fbfe
   7363  fbfe				   .
   7364  fbfe							; 
   7365  fbfe
   7366  fbfe				   .
   7367  fbfe							; 
   7368  fbfe
   7369  fbfe				   .L0233		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7370  fbfe
   7371  fbfe							; complex statement detected
   7372  fbfe		       20 b9 f3 	      jsr	randomize
   7373  fc01		       29 07		      AND	#7
   7374  fc03		       85 dd		      STA	_Pause_Color_Tmp
   7375  fc05				   .
   7376  fc05							; 
   7377  fc05
   7378  fc05				   .L0234		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7379  fc05
   7380  fc05		       a5 dd		      LDA	_Pause_Color_Tmp
   7381  fc07		       85 dc		      STA	_Pause_Mem_Color_Tmp
   7382  fc09				   .
   7383  fc09							; 
   7384  fc09
   7385  fc09				   .
   7386  fc09							; 
   7387  fc09
   7388  fc09				   .
   7389  fc09							; 
   7390  fc09
   7391  fc09				   .
   7392  fc09							; 
   7393  fc09
   7394  fc09				   .
   7395  fc09							; 
   7396  fc09
   7397  fc09				   .
   7398  fc09							; 
   7399  fc09
   7400  fc09				   .
   7401  fc09							; 
   7402  fc09
   7403  fc09				   .
   7404  fc09							; 
   7405  fc09
   7406  fc09				   .
   7407  fc09							; 
   7408  fc09
   7409  fc09				   .
   7410  fc09							; 
   7411  fc09
   7412  fc09				   .__Pause_Game
   7413  fc09							; __Pause_Game
   7414  fc09
   7415  fc09				   .
   7416  fc09							; 
   7417  fc09
   7418  fc09				   .
   7419  fc09							; 
   7420  fc09
   7421  fc09				   .
   7422  fc09							; 
   7423  fc09
   7424  fc09				   .
   7425  fc09							; 
   7426  fc09
   7427  fc09				   .
   7428  fc09							; 
   7429  fc09
   7430  fc09				   .
   7431  fc09							; 
   7432  fc09
   7433  fc09				   .
   7434  fc09							; 
   7435  fc09
   7436  fc09				   .L0235		;  NUSIZ0  =  $10
   7437  fc09
   7438  fc09		       a9 10		      LDA	#$10
   7439  fc0b		       85 04		      STA	NUSIZ0
   7440  fc0d				   .
   7441  fc0d							; 
   7442  fc0d
   7443  fc0d				   .
   7444  fc0d							; 
   7445  fc0d
   7446  fc0d				   .
   7447  fc0d							; 
   7448  fc0d
   7449  fc0d				   .
   7450  fc0d							; 
   7451  fc0d
   7452  fc0d				   .
   7453  fc0d							; 
   7454  fc0d
   7455  fc0d				   .
   7456  fc0d							; 
   7457  fc0d
   7458  fc0d				   .
   7459  fc0d							; 
   7460  fc0d
   7461  fc0d				   .L0236		;  NUSIZ1  =  $05
   7462  fc0d
   7463  fc0d		       a9 05		      LDA	#$05
   7464  fc0f		       85 05		      STA	NUSIZ1
   7465  fc11				   .
   7466  fc11							; 
   7467  fc11
   7468  fc11				   .
   7469  fc11							; 
   7470  fc11
   7471  fc11				   .
   7472  fc11							; 
   7473  fc11
   7474  fc11				   .
   7475  fc11							; 
   7476  fc11
   7477  fc11				   .
   7478  fc11							; 
   7479  fc11
   7480  fc11				   .
   7481  fc11							; 
   7482  fc11
   7483  fc11				   .
   7484  fc11							; 
   7485  fc11
   7486  fc11				   .
   7487  fc11							; 
   7488  fc11
   7489  fc11				   .
   7490  fc11							; 
   7491  fc11
   7492  fc11				   .
   7493  fc11							; 
   7494  fc11
   7495  fc11				   .L0237		;  _Pause_Counter_Tmp	=  _Pause_Counter_Tmp  +  1
   7496  fc11
   7497  fc11		       e6 db		      INC	_Pause_Counter_Tmp
   7498  fc13				   .
   7499  fc13							; 
   7500  fc13
   7501  fc13				   .
   7502  fc13							; 
   7503  fc13
   7504  fc13				   .
   7505  fc13							; 
   7506  fc13
   7507  fc13				   .
   7508  fc13							; 
   7509  fc13
   7510  fc13				   .L0238		;  if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   7511  fc13
   7512  fc13		       a5 db		      LDA	_Pause_Counter_Tmp
   7513  fc15		       c9 f0		      CMP	#240
   7514  fc17		       b0 03		      BCS	.skipL0238
   7515  fc19				   .condpart91
   7516  fc19		       4c 68 fc 	      jmp	.__Skip_Pause_Counter
   7517  fc1c
   7518  fc1c				   .skipL0238
   7519  fc1c				   .
   7520  fc1c							; 
   7521  fc1c
   7522  fc1c				   .
   7523  fc1c							; 
   7524  fc1c
   7525  fc1c				   .
   7526  fc1c							; 
   7527  fc1c
   7528  fc1c				   .
   7529  fc1c							; 
   7530  fc1c
   7531  fc1c				   .L0239		;  _Pause_Counter_Tmp	=  0
   7532  fc1c
   7533  fc1c		       a9 00		      LDA	#0
   7534  fc1e		       85 db		      STA	_Pause_Counter_Tmp
   7535  fc20				   .
   7536  fc20							; 
   7537  fc20
   7538  fc20				   .
   7539  fc20							; 
   7540  fc20
   7541  fc20				   .
   7542  fc20							; 
   7543  fc20
   7544  fc20				   .
   7545  fc20							; 
   7546  fc20
   7547  fc20				   .L0240		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7548  fc20
   7549  fc20							; complex statement detected
   7550  fc20		       20 b9 f3 	      jsr	randomize
   7551  fc23		       29 07		      AND	#7
   7552  fc25		       85 dd		      STA	_Pause_Color_Tmp
   7553  fc27				   .
   7554  fc27							; 
   7555  fc27
   7556  fc27				   .
   7557  fc27							; 
   7558  fc27
   7559  fc27				   .
   7560  fc27							; 
   7561  fc27
   7562  fc27				   .
   7563  fc27							; 
   7564  fc27
   7565  fc27				   .
   7566  fc27							; 
   7567  fc27
   7568  fc27				   .L0241		;  if _Pause_Color_Tmp  =  _Pause_Mem_Color_Tmp then _Pause_Color_Tmp	=  _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp  =  _Pause_Color_Tmp  -  8
   7569  fc27
   7570  fc27		       a5 dd		      LDA	_Pause_Color_Tmp
   7571  fc29		       c5 dc		      CMP	_Pause_Mem_Color_Tmp
   7572  fc2b		       d0 20		      BNE	.skipL0241
   7573  fc2d				   .condpart92
   7574  fc2d							; complex statement detected
   7575  fc2d		       a5 dd		      LDA	_Pause_Color_Tmp
   7576  fc2f		       48		      PHA
   7577  fc30		       20 b9 f3 	      jsr	randomize
   7578  fc33		       29 03		      AND	#3
   7579  fc35		       ba		      TSX
   7580  fc36		       e8		      INX
   7581  fc37		       9a		      TXS
   7582  fc38		       18		      CLC
   7583  fc39		       75 00		      ADC	$00,x
   7584  fc3b		       18		      CLC
   7585  fc3c		       69 01		      ADC	#1
   7586  fc3e		       85 dd		      STA	_Pause_Color_Tmp
   7587  fc40		       a9 07		      LDA	#7
   7588  fc42		       c5 dd		      CMP	_Pause_Color_Tmp
   7589  fc44		       b0 07		      BCS	.skip92then
   7590  fc46				   .condpart93
   7591  fc46		       a5 dd		      LDA	_Pause_Color_Tmp
   7592  fc48		       38		      SEC
   7593  fc49		       e9 08		      SBC	#8
   7594  fc4b		       85 dd		      STA	_Pause_Color_Tmp
   7595  fc4d				   .skip92then
   7596  fc4d				   .skipL0241
   7597  fc4d				   .
   7598  fc4d							; 
   7599  fc4d
   7600  fc4d				   .
   7601  fc4d							; 
   7602  fc4d
   7603  fc4d				   .
   7604  fc4d							; 
   7605  fc4d
   7606  fc4d				   .
   7607  fc4d							; 
   7608  fc4d
   7609  fc4d				   .L0242		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7610  fc4d
   7611  fc4d		       a5 dd		      LDA	_Pause_Color_Tmp
   7612  fc4f		       85 dc		      STA	_Pause_Mem_Color_Tmp
   7613  fc51				   .
   7614  fc51							; 
   7615  fc51
   7616  fc51				   .
   7617  fc51							; 
   7618  fc51
   7619  fc51				   .
   7620  fc51							; 
   7621  fc51
   7622  fc51				   .
   7623  fc51							; 
   7624  fc51
   7625  fc51				   .L0243		;  _Bit2_Pause_Clr_Scheme{2}  =  0
   7626  fc51
   7627  fc51		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7628  fc53		       29 fb		      AND	#251
   7629  fc55		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7630  fc57				   .
   7631  fc57							; 
   7632  fc57
   7633  fc57				   .L0244		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2}	=  1
   7634  fc57
   7635  fc57		       20 b9 f3 	      jsr	randomize
   7636  fc5a		       85 a0		      STA	temp5
   7637  fc5c		       a5 a0		      LDA	temp5
   7638  fc5e		       c9 80		      CMP	#128
   7639  fc60		       b0 06		      BCS	.skipL0244
   7640  fc62				   .condpart94
   7641  fc62		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7642  fc64		       09 04		      ORA	#4
   7643  fc66		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7644  fc68				   .skipL0244
   7645  fc68				   .
   7646  fc68							; 
   7647  fc68
   7648  fc68				   .__Skip_Pause_Counter
   7649  fc68							; __Skip_Pause_Counter
   7650  fc68
   7651  fc68				   .
   7652  fc68							; 
   7653  fc68
   7654  fc68				   .
   7655  fc68							; 
   7656  fc68
   7657  fc68				   .
   7658  fc68							; 
   7659  fc68
   7660  fc68				   .
   7661  fc68							; 
   7662  fc68
   7663  fc68				   .
   7664  fc68							; 
   7665  fc68
   7666  fc68				   .
   7667  fc68							; 
   7668  fc68
   7669  fc68				   .
   7670  fc68							; 
   7671  fc68
   7672  fc68				   .L0245		;  on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   7673  fc68
   7674  fc68		       a6 dd		      LDX	_Pause_Color_Tmp
   7675  fc6a		       bd 73 fc 	      LDA	.L0245jumptablehi,x
   7676  fc6d		       48		      PHA
   7677  fc6e		       bd 7b fc 	      LDA	.L0245jumptablelo,x
   7678  fc71		       48		      PHA
   7679  fc72		       60		      RTS
   7680  fc73				   .L0245jumptablehi
   7681  fc73		       fc		      .byte.b	>(.__Ps0-1)
   7682  fc74		       fc		      .byte.b	>(.__Ps1-1)
   7683  fc75		       fd		      .byte.b	>(.__Ps2-1)
   7684  fc76		       fd		      .byte.b	>(.__Ps3-1)
   7685  fc77		       fd		      .byte.b	>(.__Ps4-1)
   7686  fc78		       fd		      .byte.b	>(.__Ps5-1)
   7687  fc79		       fd		      .byte.b	>(.__Ps6-1)
   7688  fc7a		       fe		      .byte.b	>(.__Ps7-1)
   7689  fc7b				   .L0245jumptablelo
   7690  fc7b		       bf		      .byte.b	<(.__Ps0-1)
   7691  fc7c		       ee		      .byte.b	<(.__Ps1-1)
   7692  fc7d		       1d		      .byte.b	<(.__Ps2-1)
   7693  fc7e		       4c		      .byte.b	<(.__Ps3-1)
   7694  fc7f		       7b		      .byte.b	<(.__Ps4-1)
   7695  fc80		       aa		      .byte.b	<(.__Ps5-1)
   7696  fc81		       d9		      .byte.b	<(.__Ps6-1)
   7697  fc82		       08		      .byte.b	<(.__Ps7-1)
   7698  fc83				   .
   7699  fc83							; 
   7700  fc83
   7701  fc83				   .__Got_Pause_Colors
   7702  fc83							; __Got_Pause_Colors
   7703  fc83
   7704  fc83				   .
   7705  fc83							; 
   7706  fc83
   7707  fc83				   .
   7708  fc83							; 
   7709  fc83
   7710  fc83				   .
   7711  fc83							; 
   7712  fc83
   7713  fc83				   .
   7714  fc83							; 
   7715  fc83
   7716  fc83				   .
   7717  fc83							; 
   7718  fc83
   7719  fc83				   .
   7720  fc83							; 
   7721  fc83
   7722  fc83				   .
   7723  fc83							; 
   7724  fc83
   7725  fc83				   .L0246		;  drawscreen
   7726  fc83
   7727  fc83		       20 c7 f3 	      jsr	drawscreen
   7728  fc86				   .
   7729  fc86							; 
   7730  fc86
   7731  fc86				   .
   7732  fc86							; 
   7733  fc86
   7734  fc86				   .
   7735  fc86							; 
   7736  fc86
   7737  fc86				   .
   7738  fc86							; 
   7739  fc86
   7740  fc86				   .
   7741  fc86							; 
   7742  fc86
   7743  fc86				   .
   7744  fc86							; 
   7745  fc86
   7746  fc86				   .
   7747  fc86							; 
   7748  fc86
   7749  fc86				   .
   7750  fc86							; 
   7751  fc86
   7752  fc86				   .
   7753  fc86							; 
   7754  fc86
   7755  fc86				   .
   7756  fc86							; 
   7757  fc86
   7758  fc86				   .
   7759  fc86							; 
   7760  fc86
   7761  fc86				   .L0247		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   7762  fc86
   7763  fc86		       24 0c		      bit	INPT4
   7764  fc88		       10 09		      BPL	.skipL0247
   7765  fc8a				   .condpart95
   7766  fc8a		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7767  fc8c		       29 fd		      AND	#253
   7768  fc8e		       85 ec		      STA	_Bit1_FireB_Restrainer
   7769  fc90		       4c 09 fc 	      jmp	.__Pause_Game
   7770  fc93
   7771  fc93				   .skipL0247
   7772  fc93				   .
   7773  fc93							; 
   7774  fc93
   7775  fc93				   .
   7776  fc93							; 
   7777  fc93
   7778  fc93				   .
   7779  fc93							; 
   7780  fc93
   7781  fc93				   .
   7782  fc93							; 
   7783  fc93
   7784  fc93				   .
   7785  fc93							; 
   7786  fc93
   7787  fc93				   .L0248		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   7788  fc93
   7789  fc93		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7790  fc95		       29 02		      AND	#2
   7791  fc97		       f0 03		      BEQ	.skipL0248
   7792  fc99				   .condpart96
   7793  fc99		       4c 09 fc 	      jmp	.__Pause_Game
   7794  fc9c
   7795  fc9c				   .skipL0248
   7796  fc9c				   .
   7797  fc9c							; 
   7798  fc9c
   7799  fc9c				   .
   7800  fc9c							; 
   7801  fc9c
   7802  fc9c				   .
   7803  fc9c							; 
   7804  fc9c
   7805  fc9c				   .
   7806  fc9c							; 
   7807  fc9c
   7808  fc9c				   .L0249		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   7809  fc9c
   7810  fc9c		       a5 e5		      LDA	_Bit0_BW_Mem
   7811  fc9e		       29 fe		      AND	#254
   7812  fca0		       85 e5		      STA	_Bit0_BW_Mem
   7813  fca2		       a9 08		      lda	#8
   7814  fca4		       2c 82 02 	      bit	SWCHB
   7815  fca7		       d0 06		      BNE	.skipL0249
   7816  fca9				   .condpart97
   7817  fca9		       a5 e5		      LDA	_Bit0_BW_Mem
   7818  fcab		       09 01		      ORA	#1
   7819  fcad		       85 e5		      STA	_Bit0_BW_Mem
   7820  fcaf				   .skipL0249
   7821  fcaf				   .
   7822  fcaf							; 
   7823  fcaf
   7824  fcaf				   .
   7825  fcaf							; 
   7826  fcaf
   7827  fcaf				   .
   7828  fcaf							; 
   7829  fcaf
   7830  fcaf				   .
   7831  fcaf							; 
   7832  fcaf
   7833  fcaf				   .
   7834  fcaf							; 
   7835  fcaf
   7836  fcaf				   .
   7837  fcaf							; 
   7838  fcaf
   7839  fcaf				   .
   7840  fcaf							; 
   7841  fcaf
   7842  fcaf				   .
   7843  fcaf							; 
   7844  fcaf
   7845  fcaf				   .
   7846  fcaf							; 
   7847  fcaf
   7848  fcaf				   .
   7849  fcaf							; 
   7850  fcaf
   7851  fcaf				   .
   7852  fcaf							; 
   7853  fcaf
   7854  fcaf				   .
   7855  fcaf							; 
   7856  fcaf
   7857  fcaf				   .
   7858  fcaf							; 
   7859  fcaf
   7860  fcaf				   .
   7861  fcaf							; 
   7862  fcaf
   7863  fcaf				   .
   7864  fcaf							; 
   7865  fcaf
   7866  fcaf				   .
   7867  fcaf							; 
   7868  fcaf
   7869  fcaf				   .
   7870  fcaf							; 
   7871  fcaf
   7872  fcaf				   .
   7873  fcaf							; 
   7874  fcaf
   7875  fcaf				   .
   7876  fcaf							; 
   7877  fcaf
   7878  fcaf				   .
   7879  fcaf							; 
   7880  fcaf
   7881  fcaf				   .
   7882  fcaf							; 
   7883  fcaf
   7884  fcaf				   .
   7885  fcaf							; 
   7886  fcaf
   7887  fcaf				   .
   7888  fcaf							; 
   7889  fcaf
   7890  fcaf				   .
   7891  fcaf							; 
   7892  fcaf
   7893  fcaf				   .__Restore_Game_from_Pause
   7894  fcaf							; __Restore_Game_from_Pause
   7895  fcaf
   7896  fcaf				   .
   7897  fcaf							; 
   7898  fcaf
   7899  fcaf				   .
   7900  fcaf							; 
   7901  fcaf
   7902  fcaf				   .
   7903  fcaf							; 
   7904  fcaf
   7905  fcaf				   .
   7906  fcaf							; 
   7907  fcaf
   7908  fcaf				   .
   7909  fcaf							; 
   7910  fcaf
   7911  fcaf				   .
   7912  fcaf							; 
   7913  fcaf
   7914  fcaf				   .L0250		;  _Bit1_FireB_Restrainer{1}  =  1
   7915  fcaf
   7916  fcaf		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7917  fcb1		       09 02		      ORA	#2
   7918  fcb3		       85 ec		      STA	_Bit1_FireB_Restrainer
   7919  fcb5				   .
   7920  fcb5							; 
   7921  fcb5
   7922  fcb5				   .
   7923  fcb5							; 
   7924  fcb5
   7925  fcb5				   .
   7926  fcb5							; 
   7927  fcb5
   7928  fcb5				   .
   7929  fcb5							; 
   7930  fcb5
   7931  fcb5				   .
   7932  fcb5							; 
   7933  fcb5
   7934  fcb5				   .
   7935  fcb5							; 
   7936  fcb5
   7937  fcb5				   .L0251		;  scorecolor	=  $1C	:  pfscorecolor  =  $D2
   7938  fcb5
   7939  fcb5		       a9 1c		      LDA	#$1C
   7940  fcb7		       85 a3		      STA	scorecolor
   7941  fcb9		       a9 d2		      LDA	#$D2
   7942  fcbb		       85 f4		      STA	pfscorecolor
   7943  fcbd				   .
   7944  fcbd							; 
   7945  fcbd
   7946  fcbd				   .
   7947  fcbd							; 
   7948  fcbd
   7949  fcbd				   .L0252		;  goto __Main_Loop
   7950  fcbd
   7951  fcbd		       4c 14 f6 	      jmp	.__Main_Loop
   7952  fcc0
   7953  fcc0				   .
   7954  fcc0							; 
   7955  fcc0
   7956  fcc0				   .
   7957  fcc0							; 
   7958  fcc0
   7959  fcc0				   .
   7960  fcc0							; 
   7961  fcc0
   7962  fcc0				   .
   7963  fcc0							; 
   7964  fcc0
   7965  fcc0				   .
   7966  fcc0							; 
   7967  fcc0
   7968  fcc0				   .
   7969  fcc0							; 
   7970  fcc0
   7971  fcc0				   .
   7972  fcc0							; 
   7973  fcc0
   7974  fcc0				   .
   7975  fcc0							; 
   7976  fcc0
   7977  fcc0				   .
   7978  fcc0							; 
   7979  fcc0
   7980  fcc0				   .__Ps0
   7981  fcc0							; __Ps0
   7982  fcc0
   7983  fcc0				   .
   7984  fcc0							; 
   7985  fcc0
   7986  fcc0				   .L0253		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   7987  fcc0
   7988  fcc0		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7989  fcc2		       29 04		      AND	#4
   7990  fcc4		       f0 03		      BEQ	.skipL0253
   7991  fcc6				   .condpart98
   7992  fcc6		       4c dc fc 	      jmp	.__Ps0B
   7993  fcc9
   7994  fcc9				   .skipL0253
   7995  fcc9				   .
   7996  fcc9							; 
   7997  fcc9
   7998  fcc9				   .L0254		;  COLUPF  =  $0C  :  COLUP0  =  $0C  :  COLUP1  =  $0C  :  pfscorecolor  =  $0C  :  scorecolor  =  $0C
   7999  fcc9
   8000  fcc9		       a9 0c		      LDA	#$0C
   8001  fccb		       85 08		      STA	COLUPF
   8002  fccd		       85 06		      STA	COLUP0
   8003  fccf		       85 07		      STA	COLUP1
   8004  fcd1		       85 f4		      STA	pfscorecolor
   8005  fcd3		       85 a3		      STA	scorecolor
   8006  fcd5				   .
   8007  fcd5							; 
   8008  fcd5
   8009  fcd5				   .L0255		;  COLUBK  =  $0A
   8010  fcd5
   8011  fcd5		       a9 0a		      LDA	#$0A
   8012  fcd7		       85 09		      STA	COLUBK
   8013  fcd9				   .
   8014  fcd9							; 
   8015  fcd9
   8016  fcd9				   .L0256		;  goto __Got_Pause_Colors
   8017  fcd9
   8018  fcd9		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8019  fcdc
   8020  fcdc				   .
   8021  fcdc							; 
   8022  fcdc
   8023  fcdc				   .
   8024  fcdc							; 
   8025  fcdc
   8026  fcdc				   .
   8027  fcdc							; 
   8028  fcdc
   8029  fcdc				   .
   8030  fcdc							; 
   8031  fcdc
   8032  fcdc				   .
   8033  fcdc							; 
   8034  fcdc
   8035  fcdc				   .
   8036  fcdc							; 
   8037  fcdc
   8038  fcdc				   .
   8039  fcdc							; 
   8040  fcdc
   8041  fcdc				   .__Ps0B
   8042  fcdc							; __Ps0B
   8043  fcdc
   8044  fcdc				   .
   8045  fcdc							; 
   8046  fcdc
   8047  fcdc				   .L0257		;  COLUPF  =  $0A  :  COLUP0  =  $0A  :  COLUP1  =  $0A  :  pfscorecolor  =  $0A  :  scorecolor  =  $0A
   8048  fcdc
   8049  fcdc		       a9 0a		      LDA	#$0A
   8050  fcde		       85 08		      STA	COLUPF
   8051  fce0		       85 06		      STA	COLUP0
   8052  fce2		       85 07		      STA	COLUP1
   8053  fce4		       85 f4		      STA	pfscorecolor
   8054  fce6		       85 a3		      STA	scorecolor
   8055  fce8				   .
   8056  fce8							; 
   8057  fce8
   8058  fce8				   .L0258		;  COLUBK  =  $0C
   8059  fce8
   8060  fce8		       a9 0c		      LDA	#$0C
   8061  fcea		       85 09		      STA	COLUBK
   8062  fcec				   .
   8063  fcec							; 
   8064  fcec
   8065  fcec				   .L0259		;  goto __Got_Pause_Colors
   8066  fcec
   8067  fcec		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8068  fcef
   8069  fcef				   .
   8070  fcef							; 
   8071  fcef
   8072  fcef				   .
   8073  fcef							; 
   8074  fcef
   8075  fcef				   .
   8076  fcef							; 
   8077  fcef
   8078  fcef				   .
   8079  fcef							; 
   8080  fcef
   8081  fcef				   .
   8082  fcef							; 
   8083  fcef
   8084  fcef				   .
   8085  fcef							; 
   8086  fcef
   8087  fcef				   .
   8088  fcef							; 
   8089  fcef
   8090  fcef				   .__Ps1
   8091  fcef							; __Ps1
   8092  fcef
   8093  fcef				   .
   8094  fcef							; 
   8095  fcef
   8096  fcef				   .L0260		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   8097  fcef
   8098  fcef		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8099  fcf1		       29 04		      AND	#4
   8100  fcf3		       f0 03		      BEQ	.skipL0260
   8101  fcf5				   .condpart99
   8102  fcf5		       4c 0b fd 	      jmp	.__Ps1B
   8103  fcf8
   8104  fcf8				   .skipL0260
   8105  fcf8				   .
   8106  fcf8							; 
   8107  fcf8
   8108  fcf8				   .L0261		;  COLUPF  =  $3C  :  COLUP0  =  $3C  :  COLUP1  =  $3C  :  pfscorecolor  =  $3C  :  scorecolor  =  $3C
   8109  fcf8
   8110  fcf8		       a9 3c		      LDA	#$3C
   8111  fcfa		       85 08		      STA	COLUPF
   8112  fcfc		       85 06		      STA	COLUP0
   8113  fcfe		       85 07		      STA	COLUP1
   8114  fd00		       85 f4		      STA	pfscorecolor
   8115  fd02		       85 a3		      STA	scorecolor
   8116  fd04				   .
   8117  fd04							; 
   8118  fd04
   8119  fd04				   .L0262		;  COLUBK  =  $3A
   8120  fd04
   8121  fd04		       a9 3a		      LDA	#$3A
   8122  fd06		       85 09		      STA	COLUBK
   8123  fd08				   .
   8124  fd08							; 
   8125  fd08
   8126  fd08				   .L0263		;  goto __Got_Pause_Colors
   8127  fd08
   8128  fd08		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8129  fd0b
   8130  fd0b				   .
   8131  fd0b							; 
   8132  fd0b
   8133  fd0b				   .
   8134  fd0b							; 
   8135  fd0b
   8136  fd0b				   .
   8137  fd0b							; 
   8138  fd0b
   8139  fd0b				   .
   8140  fd0b							; 
   8141  fd0b
   8142  fd0b				   .
   8143  fd0b							; 
   8144  fd0b
   8145  fd0b				   .
   8146  fd0b							; 
   8147  fd0b
   8148  fd0b				   .
   8149  fd0b							; 
   8150  fd0b
   8151  fd0b				   .__Ps1B
   8152  fd0b							; __Ps1B
   8153  fd0b
   8154  fd0b				   .
   8155  fd0b							; 
   8156  fd0b
   8157  fd0b				   .L0264		;  COLUPF  =  $3A  :  COLUP0  =  $3A  :  COLUP1  =  $3A  :  pfscorecolor  =  $3A  :  scorecolor  =  $3A
   8158  fd0b
   8159  fd0b		       a9 3a		      LDA	#$3A
   8160  fd0d		       85 08		      STA	COLUPF
   8161  fd0f		       85 06		      STA	COLUP0
   8162  fd11		       85 07		      STA	COLUP1
   8163  fd13		       85 f4		      STA	pfscorecolor
   8164  fd15		       85 a3		      STA	scorecolor
   8165  fd17				   .
   8166  fd17							; 
   8167  fd17
   8168  fd17				   .L0265		;  COLUBK  =  $3C
   8169  fd17
   8170  fd17		       a9 3c		      LDA	#$3C
   8171  fd19		       85 09		      STA	COLUBK
   8172  fd1b				   .
   8173  fd1b							; 
   8174  fd1b
   8175  fd1b				   .L0266		;  goto __Got_Pause_Colors
   8176  fd1b
   8177  fd1b		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8178  fd1e
   8179  fd1e				   .
   8180  fd1e							; 
   8181  fd1e
   8182  fd1e				   .
   8183  fd1e							; 
   8184  fd1e
   8185  fd1e				   .
   8186  fd1e							; 
   8187  fd1e
   8188  fd1e				   .
   8189  fd1e							; 
   8190  fd1e
   8191  fd1e				   .
   8192  fd1e							; 
   8193  fd1e
   8194  fd1e				   .
   8195  fd1e							; 
   8196  fd1e
   8197  fd1e				   .
   8198  fd1e							; 
   8199  fd1e
   8200  fd1e				   .__Ps2
   8201  fd1e							; __Ps2
   8202  fd1e
   8203  fd1e				   .
   8204  fd1e							; 
   8205  fd1e
   8206  fd1e				   .L0267		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   8207  fd1e
   8208  fd1e		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8209  fd20		       29 04		      AND	#4
   8210  fd22		       f0 03		      BEQ	.skipL0267
   8211  fd24				   .condpart100
   8212  fd24		       4c 3a fd 	      jmp	.__Ps2B
   8213  fd27
   8214  fd27				   .skipL0267
   8215  fd27				   .
   8216  fd27							; 
   8217  fd27
   8218  fd27				   .L0268		;  COLUPF  =  $6C  :  COLUP0  =  $6C  :  COLUP1  =  $6C  :  pfscorecolor  =  $6C  :  scorecolor  =  $6C
   8219  fd27
   8220  fd27		       a9 6c		      LDA	#$6C
   8221  fd29		       85 08		      STA	COLUPF
   8222  fd2b		       85 06		      STA	COLUP0
   8223  fd2d		       85 07		      STA	COLUP1
   8224  fd2f		       85 f4		      STA	pfscorecolor
   8225  fd31		       85 a3		      STA	scorecolor
   8226  fd33				   .
   8227  fd33							; 
   8228  fd33
   8229  fd33				   .L0269		;  COLUBK  =  $6A
   8230  fd33
   8231  fd33		       a9 6a		      LDA	#$6A
   8232  fd35		       85 09		      STA	COLUBK
   8233  fd37				   .
   8234  fd37							; 
   8235  fd37
   8236  fd37				   .L0270		;  goto __Got_Pause_Colors
   8237  fd37
   8238  fd37		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8239  fd3a
   8240  fd3a				   .
   8241  fd3a							; 
   8242  fd3a
   8243  fd3a				   .
   8244  fd3a							; 
   8245  fd3a
   8246  fd3a				   .
   8247  fd3a							; 
   8248  fd3a
   8249  fd3a				   .
   8250  fd3a							; 
   8251  fd3a
   8252  fd3a				   .
   8253  fd3a							; 
   8254  fd3a
   8255  fd3a				   .
   8256  fd3a							; 
   8257  fd3a
   8258  fd3a				   .
   8259  fd3a							; 
   8260  fd3a
   8261  fd3a				   .__Ps2B
   8262  fd3a							; __Ps2B
   8263  fd3a
   8264  fd3a				   .
   8265  fd3a							; 
   8266  fd3a
   8267  fd3a				   .L0271		;  COLUPF  =  $6A  :  COLUP0  =  $6A  :  COLUP1  =  $6A  :  pfscorecolor  =  $6A  :  scorecolor  =  $6A
   8268  fd3a
   8269  fd3a		       a9 6a		      LDA	#$6A
   8270  fd3c		       85 08		      STA	COLUPF
   8271  fd3e		       85 06		      STA	COLUP0
   8272  fd40		       85 07		      STA	COLUP1
   8273  fd42		       85 f4		      STA	pfscorecolor
   8274  fd44		       85 a3		      STA	scorecolor
   8275  fd46				   .
   8276  fd46							; 
   8277  fd46
   8278  fd46				   .
   8279  fd46							; 
   8280  fd46
   8281  fd46				   .
   8282  fd46							; 
   8283  fd46
   8284  fd46				   .L0272		;  COLUBK  =  $6C
   8285  fd46
   8286  fd46		       a9 6c		      LDA	#$6C
   8287  fd48		       85 09		      STA	COLUBK
   8288  fd4a				   .
   8289  fd4a							; 
   8290  fd4a
   8291  fd4a				   .L0273		;  goto __Got_Pause_Colors
   8292  fd4a
   8293  fd4a		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8294  fd4d
   8295  fd4d				   .
   8296  fd4d							; 
   8297  fd4d
   8298  fd4d				   .
   8299  fd4d							; 
   8300  fd4d
   8301  fd4d				   .
   8302  fd4d							; 
   8303  fd4d
   8304  fd4d				   .
   8305  fd4d							; 
   8306  fd4d
   8307  fd4d				   .
   8308  fd4d							; 
   8309  fd4d
   8310  fd4d				   .
   8311  fd4d							; 
   8312  fd4d
   8313  fd4d				   .
   8314  fd4d							; 
   8315  fd4d
   8316  fd4d				   .__Ps3
   8317  fd4d							; __Ps3
   8318  fd4d
   8319  fd4d				   .
   8320  fd4d							; 
   8321  fd4d
   8322  fd4d				   .L0274		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   8323  fd4d
   8324  fd4d		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8325  fd4f		       29 04		      AND	#4
   8326  fd51		       f0 03		      BEQ	.skipL0274
   8327  fd53				   .condpart101
   8328  fd53		       4c 69 fd 	      jmp	.__Ps3B
   8329  fd56
   8330  fd56				   .skipL0274
   8331  fd56				   .
   8332  fd56							; 
   8333  fd56
   8334  fd56				   .L0275		;  COLUPF  =  $9C  :  COLUP0  =  $9C  :  COLUP1  =  $9C  :  pfscorecolor  =  $9C  :  scorecolor  =  $9C
   8335  fd56
   8336  fd56		       a9 9c		      LDA	#$9C
   8337  fd58		       85 08		      STA	COLUPF
   8338  fd5a		       85 06		      STA	COLUP0
   8339  fd5c		       85 07		      STA	COLUP1
   8340  fd5e		       85 f4		      STA	pfscorecolor
   8341  fd60		       85 a3		      STA	scorecolor
   8342  fd62				   .
   8343  fd62							; 
   8344  fd62
   8345  fd62				   .L0276		;  COLUBK  =  $9A
   8346  fd62
   8347  fd62		       a9 9a		      LDA	#$9A
   8348  fd64		       85 09		      STA	COLUBK
   8349  fd66				   .
   8350  fd66							; 
   8351  fd66
   8352  fd66				   .L0277		;  goto __Got_Pause_Colors
   8353  fd66
   8354  fd66		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8355  fd69
   8356  fd69				   .
   8357  fd69							; 
   8358  fd69
   8359  fd69				   .
   8360  fd69							; 
   8361  fd69
   8362  fd69				   .
   8363  fd69							; 
   8364  fd69
   8365  fd69				   .
   8366  fd69							; 
   8367  fd69
   8368  fd69				   .
   8369  fd69							; 
   8370  fd69
   8371  fd69				   .
   8372  fd69							; 
   8373  fd69
   8374  fd69				   .
   8375  fd69							; 
   8376  fd69
   8377  fd69				   .__Ps3B
   8378  fd69							; __Ps3B
   8379  fd69
   8380  fd69				   .
   8381  fd69							; 
   8382  fd69
   8383  fd69				   .L0278		;  COLUPF  =  $9A  :  COLUP0  =  $9A  :  COLUP1  =  $9A  :  pfscorecolor  =  $9A  :  scorecolor  =  $9A
   8384  fd69
   8385  fd69		       a9 9a		      LDA	#$9A
   8386  fd6b		       85 08		      STA	COLUPF
   8387  fd6d		       85 06		      STA	COLUP0
   8388  fd6f		       85 07		      STA	COLUP1
   8389  fd71		       85 f4		      STA	pfscorecolor
   8390  fd73		       85 a3		      STA	scorecolor
   8391  fd75				   .
   8392  fd75							; 
   8393  fd75
   8394  fd75				   .L0279		;  COLUBK  =  $9C
   8395  fd75
   8396  fd75		       a9 9c		      LDA	#$9C
   8397  fd77		       85 09		      STA	COLUBK
   8398  fd79				   .
   8399  fd79							; 
   8400  fd79
   8401  fd79				   .L0280		;  goto __Got_Pause_Colors
   8402  fd79
   8403  fd79		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8404  fd7c
   8405  fd7c				   .
   8406  fd7c							; 
   8407  fd7c
   8408  fd7c				   .
   8409  fd7c							; 
   8410  fd7c
   8411  fd7c				   .
   8412  fd7c							; 
   8413  fd7c
   8414  fd7c				   .
   8415  fd7c							; 
   8416  fd7c
   8417  fd7c				   .
   8418  fd7c							; 
   8419  fd7c
   8420  fd7c				   .
   8421  fd7c							; 
   8422  fd7c
   8423  fd7c				   .
   8424  fd7c							; 
   8425  fd7c
   8426  fd7c				   .__Ps4
   8427  fd7c							; __Ps4
   8428  fd7c
   8429  fd7c				   .
   8430  fd7c							; 
   8431  fd7c
   8432  fd7c				   .L0281		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   8433  fd7c
   8434  fd7c		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8435  fd7e		       29 04		      AND	#4
   8436  fd80		       f0 03		      BEQ	.skipL0281
   8437  fd82				   .condpart102
   8438  fd82		       4c 98 fd 	      jmp	.__Ps4B
   8439  fd85
   8440  fd85				   .skipL0281
   8441  fd85				   .
   8442  fd85							; 
   8443  fd85
   8444  fd85				   .L0282		;  COLUPF  =  $CC  :  COLUP0  =  $CC  :  COLUP1  =  $CC  :  pfscorecolor  =  $CC  :  scorecolor  =  $CC
   8445  fd85
   8446  fd85		       a9 cc		      LDA	#$CC
   8447  fd87		       85 08		      STA	COLUPF
   8448  fd89		       85 06		      STA	COLUP0
   8449  fd8b		       85 07		      STA	COLUP1
   8450  fd8d		       85 f4		      STA	pfscorecolor
   8451  fd8f		       85 a3		      STA	scorecolor
   8452  fd91				   .
   8453  fd91							; 
   8454  fd91
   8455  fd91				   .L0283		;  COLUBK  =  $CA
   8456  fd91
   8457  fd91		       a9 ca		      LDA	#$CA
   8458  fd93		       85 09		      STA	COLUBK
   8459  fd95				   .
   8460  fd95							; 
   8461  fd95
   8462  fd95				   .L0284		;  goto __Got_Pause_Colors
   8463  fd95
   8464  fd95		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8465  fd98
   8466  fd98				   .
   8467  fd98							; 
   8468  fd98
   8469  fd98				   .
   8470  fd98							; 
   8471  fd98
   8472  fd98				   .
   8473  fd98							; 
   8474  fd98
   8475  fd98				   .
   8476  fd98							; 
   8477  fd98
   8478  fd98				   .
   8479  fd98							; 
   8480  fd98
   8481  fd98				   .
   8482  fd98							; 
   8483  fd98
   8484  fd98				   .
   8485  fd98							; 
   8486  fd98
   8487  fd98				   .__Ps4B
   8488  fd98							; __Ps4B
   8489  fd98
   8490  fd98				   .
   8491  fd98							; 
   8492  fd98
   8493  fd98				   .L0285		;  COLUPF  =  $CA  :  COLUP0  =  $CA  :  COLUP1  =  $CA  :  pfscorecolor  =  $CA  :  scorecolor  =  $CA
   8494  fd98
   8495  fd98		       a9 ca		      LDA	#$CA
   8496  fd9a		       85 08		      STA	COLUPF
   8497  fd9c		       85 06		      STA	COLUP0
   8498  fd9e		       85 07		      STA	COLUP1
   8499  fda0		       85 f4		      STA	pfscorecolor
   8500  fda2		       85 a3		      STA	scorecolor
   8501  fda4				   .
   8502  fda4							; 
   8503  fda4
   8504  fda4				   .L0286		;  COLUBK  =  $CC
   8505  fda4
   8506  fda4		       a9 cc		      LDA	#$CC
   8507  fda6		       85 09		      STA	COLUBK
   8508  fda8				   .
   8509  fda8							; 
   8510  fda8
   8511  fda8				   .L0287		;  goto __Got_Pause_Colors
   8512  fda8
   8513  fda8		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8514  fdab
   8515  fdab				   .
   8516  fdab							; 
   8517  fdab
   8518  fdab				   .
   8519  fdab							; 
   8520  fdab
   8521  fdab				   .
   8522  fdab							; 
   8523  fdab
   8524  fdab				   .
   8525  fdab							; 
   8526  fdab
   8527  fdab				   .
   8528  fdab							; 
   8529  fdab
   8530  fdab				   .
   8531  fdab							; 
   8532  fdab
   8533  fdab				   .
   8534  fdab							; 
   8535  fdab
   8536  fdab				   .__Ps5
   8537  fdab							; __Ps5
   8538  fdab
   8539  fdab				   .
   8540  fdab							; 
   8541  fdab
   8542  fdab				   .L0288		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   8543  fdab
   8544  fdab		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8545  fdad		       29 04		      AND	#4
   8546  fdaf		       f0 03		      BEQ	.skipL0288
   8547  fdb1				   .condpart103
   8548  fdb1		       4c c7 fd 	      jmp	.__Ps5B
   8549  fdb4
   8550  fdb4				   .skipL0288
   8551  fdb4				   .
   8552  fdb4							; 
   8553  fdb4
   8554  fdb4				   .L0289		;  COLUPF  =  $FC  :  COLUP0  =  $FC  :  COLUP1  =  $FC  :  pfscorecolor  =  $FC  :  scorecolor  =  $FC
   8555  fdb4
   8556  fdb4		       a9 fc		      LDA	#$FC
   8557  fdb6		       85 08		      STA	COLUPF
   8558  fdb8		       85 06		      STA	COLUP0
   8559  fdba		       85 07		      STA	COLUP1
   8560  fdbc		       85 f4		      STA	pfscorecolor
   8561  fdbe		       85 a3		      STA	scorecolor
   8562  fdc0				   .
   8563  fdc0							; 
   8564  fdc0
   8565  fdc0				   .L0290		;  COLUBK  =  $FA
   8566  fdc0
   8567  fdc0		       a9 fa		      LDA	#$FA
   8568  fdc2		       85 09		      STA	COLUBK
   8569  fdc4				   .
   8570  fdc4							; 
   8571  fdc4
   8572  fdc4				   .L0291		;  goto __Got_Pause_Colors
   8573  fdc4
   8574  fdc4		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8575  fdc7
   8576  fdc7				   .
   8577  fdc7							; 
   8578  fdc7
   8579  fdc7				   .
   8580  fdc7							; 
   8581  fdc7
   8582  fdc7				   .
   8583  fdc7							; 
   8584  fdc7
   8585  fdc7				   .
   8586  fdc7							; 
   8587  fdc7
   8588  fdc7				   .
   8589  fdc7							; 
   8590  fdc7
   8591  fdc7				   .
   8592  fdc7							; 
   8593  fdc7
   8594  fdc7				   .
   8595  fdc7							; 
   8596  fdc7
   8597  fdc7				   .__Ps5B
   8598  fdc7							; __Ps5B
   8599  fdc7
   8600  fdc7				   .
   8601  fdc7							; 
   8602  fdc7
   8603  fdc7				   .L0292		;  COLUPF  =  $FA  :  COLUP0  =  $FA  :  COLUP1  =  $FA  :  pfscorecolor  =  $FA :  scorecolor  =  $FA
   8604  fdc7
   8605  fdc7		       a9 fa		      LDA	#$FA
   8606  fdc9		       85 08		      STA	COLUPF
   8607  fdcb		       85 06		      STA	COLUP0
   8608  fdcd		       85 07		      STA	COLUP1
   8609  fdcf		       85 f4		      STA	pfscorecolor
   8610  fdd1		       85 a3		      STA	scorecolor
   8611  fdd3				   .
   8612  fdd3							; 
   8613  fdd3
   8614  fdd3				   .L0293		;  COLUBK  =  $FC
   8615  fdd3
   8616  fdd3		       a9 fc		      LDA	#$FC
   8617  fdd5		       85 09		      STA	COLUBK
   8618  fdd7				   .
   8619  fdd7							; 
   8620  fdd7
   8621  fdd7				   .L0294		;  goto __Got_Pause_Colors
   8622  fdd7
   8623  fdd7		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8624  fdda
   8625  fdda				   .
   8626  fdda							; 
   8627  fdda
   8628  fdda				   .
   8629  fdda							; 
   8630  fdda
   8631  fdda				   .
   8632  fdda							; 
   8633  fdda
   8634  fdda				   .
   8635  fdda							; 
   8636  fdda
   8637  fdda				   .
   8638  fdda							; 
   8639  fdda
   8640  fdda				   .
   8641  fdda							; 
   8642  fdda
   8643  fdda				   .
   8644  fdda							; 
   8645  fdda
   8646  fdda				   .__Ps6
   8647  fdda							; __Ps6
   8648  fdda
   8649  fdda				   .
   8650  fdda							; 
   8651  fdda
   8652  fdda				   .L0295		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   8653  fdda
   8654  fdda		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8655  fddc		       29 04		      AND	#4
   8656  fdde		       f0 03		      BEQ	.skipL0295
   8657  fde0				   .condpart104
   8658  fde0		       4c f6 fd 	      jmp	.__Ps6B
   8659  fde3
   8660  fde3				   .skipL0295
   8661  fde3				   .
   8662  fde3							; 
   8663  fde3
   8664  fde3				   .L0296		;  COLUPF  =  $8C  :  COLUP0  =  $8C  :  COLUP1  =  $8C  :  pfscorecolor  =  $8C  :  scorecolor  =  $8C
   8665  fde3
   8666  fde3		       a9 8c		      LDA	#$8C
   8667  fde5		       85 08		      STA	COLUPF
   8668  fde7		       85 06		      STA	COLUP0
   8669  fde9		       85 07		      STA	COLUP1
   8670  fdeb		       85 f4		      STA	pfscorecolor
   8671  fded		       85 a3		      STA	scorecolor
   8672  fdef				   .
   8673  fdef							; 
   8674  fdef
   8675  fdef				   .L0297		;  COLUBK  =  $8A
   8676  fdef
   8677  fdef		       a9 8a		      LDA	#$8A
   8678  fdf1		       85 09		      STA	COLUBK
   8679  fdf3				   .
   8680  fdf3							; 
   8681  fdf3
   8682  fdf3				   .L0298		;  goto __Got_Pause_Colors
   8683  fdf3
   8684  fdf3		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8685  fdf6
   8686  fdf6				   .
   8687  fdf6							; 
   8688  fdf6
   8689  fdf6				   .
   8690  fdf6							; 
   8691  fdf6
   8692  fdf6				   .
   8693  fdf6							; 
   8694  fdf6
   8695  fdf6				   .
   8696  fdf6							; 
   8697  fdf6
   8698  fdf6				   .
   8699  fdf6							; 
   8700  fdf6
   8701  fdf6				   .
   8702  fdf6							; 
   8703  fdf6
   8704  fdf6				   .
   8705  fdf6							; 
   8706  fdf6
   8707  fdf6				   .__Ps6B
   8708  fdf6							; __Ps6B
   8709  fdf6
   8710  fdf6				   .
   8711  fdf6							; 
   8712  fdf6
   8713  fdf6				   .L0299		;  COLUPF  =  $8A  :  COLUP0  =  $8A  :  COLUP1  =  $8A  :  pfscorecolor  =  $8A  :  scorecolor  =  $8A
   8714  fdf6
   8715  fdf6		       a9 8a		      LDA	#$8A
   8716  fdf8		       85 08		      STA	COLUPF
   8717  fdfa		       85 06		      STA	COLUP0
   8718  fdfc		       85 07		      STA	COLUP1
   8719  fdfe		       85 f4		      STA	pfscorecolor
   8720  fe00		       85 a3		      STA	scorecolor
   8721  fe02				   .
   8722  fe02							; 
   8723  fe02
   8724  fe02				   .L0300		;  COLUBK  =  $8C
   8725  fe02
   8726  fe02		       a9 8c		      LDA	#$8C
   8727  fe04		       85 09		      STA	COLUBK
   8728  fe06				   .
   8729  fe06							; 
   8730  fe06
   8731  fe06				   .L0301		;  goto __Got_Pause_Colors
   8732  fe06
   8733  fe06		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8734  fe09
   8735  fe09				   .
   8736  fe09							; 
   8737  fe09
   8738  fe09				   .
   8739  fe09							; 
   8740  fe09
   8741  fe09				   .
   8742  fe09							; 
   8743  fe09
   8744  fe09				   .
   8745  fe09							; 
   8746  fe09
   8747  fe09				   .
   8748  fe09							; 
   8749  fe09
   8750  fe09				   .
   8751  fe09							; 
   8752  fe09
   8753  fe09				   .
   8754  fe09							; 
   8755  fe09
   8756  fe09				   .__Ps7
   8757  fe09							; __Ps7
   8758  fe09
   8759  fe09				   .
   8760  fe09							; 
   8761  fe09
   8762  fe09				   .L0302		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   8763  fe09
   8764  fe09		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8765  fe0b		       29 04		      AND	#4
   8766  fe0d		       f0 03		      BEQ	.skipL0302
   8767  fe0f				   .condpart105
   8768  fe0f		       4c 25 fe 	      jmp	.__Ps7B
   8769  fe12
   8770  fe12				   .skipL0302
   8771  fe12				   .
   8772  fe12							; 
   8773  fe12
   8774  fe12				   .L0303		;  COLUPF  =  $2C  :  COLUP0  =  $2C  :  COLUP1  =  $2C  :  pfscorecolor  =  $2C  :  scorecolor  =  $2C
   8775  fe12
   8776  fe12		       a9 2c		      LDA	#$2C
   8777  fe14		       85 08		      STA	COLUPF
   8778  fe16		       85 06		      STA	COLUP0
   8779  fe18		       85 07		      STA	COLUP1
   8780  fe1a		       85 f4		      STA	pfscorecolor
   8781  fe1c		       85 a3		      STA	scorecolor
   8782  fe1e				   .
   8783  fe1e							; 
   8784  fe1e
   8785  fe1e				   .L0304		;  COLUBK  =  $2A
   8786  fe1e
   8787  fe1e		       a9 2a		      LDA	#$2A
   8788  fe20		       85 09		      STA	COLUBK
   8789  fe22				   .
   8790  fe22							; 
   8791  fe22
   8792  fe22				   .L0305		;  goto __Got_Pause_Colors
   8793  fe22
   8794  fe22		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8795  fe25
   8796  fe25				   .
   8797  fe25							; 
   8798  fe25
   8799  fe25				   .
   8800  fe25							; 
   8801  fe25
   8802  fe25				   .
   8803  fe25							; 
   8804  fe25
   8805  fe25				   .
   8806  fe25							; 
   8807  fe25
   8808  fe25				   .
   8809  fe25							; 
   8810  fe25
   8811  fe25				   .
   8812  fe25							; 
   8813  fe25
   8814  fe25				   .
   8815  fe25							; 
   8816  fe25
   8817  fe25				   .__Ps7B
   8818  fe25							; __Ps7B
   8819  fe25
   8820  fe25				   .
   8821  fe25							; 
   8822  fe25
   8823  fe25				   .L0306		;  COLUPF  =  $2A  :  COLUP0  =  $2A  :  COLUP1  =  $2A  :  pfscorecolor  =  $2A  :  scorecolor  =  $2A
   8824  fe25
   8825  fe25		       a9 2a		      LDA	#$2A
   8826  fe27		       85 08		      STA	COLUPF
   8827  fe29		       85 06		      STA	COLUP0
   8828  fe2b		       85 07		      STA	COLUP1
   8829  fe2d		       85 f4		      STA	pfscorecolor
   8830  fe2f		       85 a3		      STA	scorecolor
   8831  fe31				   .
   8832  fe31							; 
   8833  fe31
   8834  fe31				   .L0307		;  COLUBK  =  $2C
   8835  fe31
   8836  fe31		       a9 2c		      LDA	#$2C
   8837  fe33		       85 09		      STA	COLUBK
   8838  fe35				   .
   8839  fe35							; 
   8840  fe35
   8841  fe35				   .L0308		;  goto __Got_Pause_Colors
   8842  fe35
   8843  fe35		       4c 83 fc 	      jmp	.__Got_Pause_Colors
   8844  fe38
   8845  fe38				   .
   8846  fe38							; 
   8847  fe38
   8848  fe38				   .
   8849  fe38							; 
   8850  fe38
   8851  fe38				   .
   8852  fe38							; 
   8853  fe38
   8854  fe38				   .
   8855  fe38							; 
   8856  fe38
   8857  fe38				   .
   8858  fe38							; 
   8859  fe38
   8860  fe38				   .
   8861  fe38							; 
   8862  fe38
   8863  fe38				   .
   8864  fe38							; 
   8865  fe38
   8866  fe38				   .
   8867  fe38							; 
   8868  fe38
   8869  fe38				   .
   8870  fe38							; 
   8871  fe38
   8872  fe38				   .
   8873  fe38							; 
   8874  fe38
   8875  fe38				   .
   8876  fe38							; 
   8877  fe38
   8878  fe38				   .
   8879  fe38							; 
   8880  fe38
   8881  fe38				   .
   8882  fe38							; 
   8883  fe38
   8884  fe38				   .
   8885  fe38							; 
   8886  fe38
   8887  fe38				   .
   8888  fe38							; 
   8889  fe38
   8890  fe38				   .
   8891  fe38							; 
   8892  fe38
   8893  fe38				   .
   8894  fe38							; 
   8895  fe38
   8896  fe38				   .
   8897  fe38							; 
   8898  fe38
   8899  fe38				   .
   8900  fe38							; 
   8901  fe38
   8902  fe38				   .L0309		;  data _Data_Fire_B_Sound
   8903  fe38
   8904  fe38		       4c 54 fe 	      JMP	.skipL0309
   8905  fe3b				   _Data_Fire_B_Sound
   8906  fe3b		       08 08 02 	      .byte.b	8,8,2
   8907  fe3e
   8908  fe3e		       01		      .byte.b	1
   8909  fe3f
   8910  fe3f		       08 08 08 	      .byte.b	8,8,8
   8911  fe42
   8912  fe42		       01		      .byte.b	1
   8913  fe43
   8914  fe43		       08 08 0c 	      .byte.b	8,8,12
   8915  fe46
   8916  fe46		       01		      .byte.b	1
   8917  fe47
   8918  fe47		       08 08 13 	      .byte.b	8,8,19
   8919  fe4a
   8920  fe4a		       01		      .byte.b	1
   8921  fe4b
   8922  fe4b		       08 08 17 	      .byte.b	8,8,23
   8923  fe4e
   8924  fe4e		       01		      .byte.b	1
   8925  fe4f
   8926  fe4f		       02 08 1b 	      .byte.b	2,8,27
   8927  fe52
   8928  fe52		       04		      .byte.b	4
   8929  fe53
   8930  fe53		       ff		      .byte.b	255
   8931  fe54
   8932  fe54				   .skipL0309
   8933  fe54				   .
   8934  fe54							; 
   8935  fe54
   8936  fe54				   .
   8937  fe54							; 
   8938  fe54
   8939  fe54				   .
   8940  fe54							; 
   8941  fe54
   8942  fe54				   .
   8943  fe54							; 
   8944  fe54
   8945  fe54				   .
   8946  fe54							; 
   8947  fe54
   8948  fe54				   .
   8949  fe54							; 
   8950  fe54
   8951  fe54				   .
   8952  fe54							; 
   8953  fe54
   8954  fe54				   .L0310		;  data _Data_Enemy_Destroyed
   8955  fe54
   8956  fe54		       4c 8c fe 	      JMP	.skipL0310
   8957  fe57				   _Data_Enemy_Destroyed
   8958  fe57		       0a 08 0f 	      .byte.b	10,8,15
   8959  fe5a
   8960  fe5a		       01		      .byte.b	1
   8961  fe5b
   8962  fe5b		       08 0f 0f 	      .byte.b	8,15,15
   8963  fe5e
   8964  fe5e		       01		      .byte.b	1
   8965  fe5f
   8966  fe5f		       08 04 11 	      .byte.b	8,4,17
   8967  fe62
   8968  fe62		       01		      .byte.b	1
   8969  fe63
   8970  fe63		       06 07 10 	      .byte.b	6,7,16
   8971  fe66
   8972  fe66		       01		      .byte.b	1
   8973  fe67
   8974  fe67		       04 08 13 	      .byte.b	4,8,19
   8975  fe6a
   8976  fe6a		       01		      .byte.b	1
   8977  fe6b
   8978  fe6b		       02 07 0a 	      .byte.b	2,7,10
   8979  fe6e
   8980  fe6e		       01		      .byte.b	1
   8981  fe6f
   8982  fe6f		       06 04 12 	      .byte.b	6,4,18
   8983  fe72
   8984  fe72		       01		      .byte.b	1
   8985  fe73
   8986  fe73		       06 08 05 	      .byte.b	6,8,5
   8987  fe76
   8988  fe76		       01		      .byte.b	1
   8989  fe77
   8990  fe77		       0a 07 0a 	      .byte.b	10,7,10
   8991  fe7a
   8992  fe7a		       01		      .byte.b	1
   8993  fe7b
   8994  fe7b		       0a 04 13 	      .byte.b	10,4,19
   8995  fe7e
   8996  fe7e		       01		      .byte.b	1
   8997  fe7f
   8998  fe7f		       0a 08 1d 	      .byte.b	10,8,29
   8999  fe82
   9000  fe82		       01		      .byte.b	1
   9001  fe83
   9002  fe83		       02 04 15 	      .byte.b	2,4,21
   9003  fe86
   9004  fe86		       01		      .byte.b	1
   9005  fe87
   9006  fe87		       02 0f 12 	      .byte.b	2,15,18
   9007  fe8a
   9008  fe8a		       08		      .byte.b	8
   9009  fe8b
   9010  fe8b		       ff		      .byte.b	255
   9011  fe8c
   9012  fe8c				   .skipL0310
   9013  fe8c				   .
   9014  fe8c							; 
   9015  fe8c
   9016  fe8c				   .
   9017  fe8c							; 
   9018  fe8c
   9019  fe8c				   .
   9020  fe8c							; 
   9021  fe8c
   9022  fe8c				   .
   9023  fe8c							; 
   9024  fe8c
   9025  fe8c				   .
   9026  fe8c							; 
   9027  fe8c
   9028  fe8c				   .
   9029  fe8c							; 
   9030  fe8c
   9031  fe8c				   .
   9032  fe8c							; 
   9033  fe8c
   9034  fe8c				   .L0311		;  data _Data_Player_Damaged
   9035  fe8c
   9036  fe8c		       4c d0 fe 	      JMP	.skipL0311
   9037  fe8f				   _Data_Player_Damaged
   9038  fe8f		       0c 08 03 	      .byte.b	12,8,3
   9039  fe92
   9040  fe92		       01		      .byte.b	1
   9041  fe93
   9042  fe93		       08 06 03 	      .byte.b	8,6,3
   9043  fe96
   9044  fe96		       01		      .byte.b	1
   9045  fe97
   9046  fe97		       06 08 06 	      .byte.b	6,8,6
   9047  fe9a
   9048  fe9a		       01		      .byte.b	1
   9049  fe9b
   9050  fe9b		       08 08 09 	      .byte.b	8,8,9
   9051  fe9e
   9052  fe9e		       01		      .byte.b	1
   9053  fe9f
   9054  fe9f		       0a 08 0c 	      .byte.b	10,8,12
   9055  fea2
   9056  fea2		       01		      .byte.b	1
   9057  fea3
   9058  fea3		       08 08 0f 	      .byte.b	8,8,15
   9059  fea6
   9060  fea6		       01		      .byte.b	1
   9061  fea7
   9062  fea7		       06 08 11 	      .byte.b	6,8,17
   9063  feaa
   9064  feaa		       01		      .byte.b	1
   9065  feab
   9066  feab		       04 08 13 	      .byte.b	4,8,19
   9067  feae
   9068  feae		       01		      .byte.b	1
   9069  feaf
   9070  feaf		       08 08 15 	      .byte.b	8,8,21
   9071  feb2
   9072  feb2		       01		      .byte.b	1
   9073  feb3
   9074  feb3		       0a 08 17 	      .byte.b	10,8,23
   9075  feb6
   9076  feb6		       01		      .byte.b	1
   9077  feb7
   9078  feb7		       0c 08 19 	      .byte.b	12,8,25
   9079  feba
   9080  feba		       01		      .byte.b	1
   9081  febb
   9082  febb		       0a 08 1b 	      .byte.b	10,8,27
   9083  febe
   9084  febe		       01		      .byte.b	1
   9085  febf
   9086  febf		       08 08 1b 	      .byte.b	8,8,27
   9087  fec2
   9088  fec2		       01		      .byte.b	1
   9089  fec3
   9090  fec3		       06 08 1d 	      .byte.b	6,8,29
   9091  fec6
   9092  fec6		       01		      .byte.b	1
   9093  fec7
   9094  fec7		       04 06 1d 	      .byte.b	4,6,29
   9095  feca
   9096  feca		       01		      .byte.b	1
   9097  fecb
   9098  fecb		       02 08 1f 	      .byte.b	2,8,31
   9099  fece
   9100  fece		       08		      .byte.b	8
   9101  fecf
   9102  fecf		       ff		      .byte.b	255
   9103  fed0
   9104  fed0				   .skipL0311
   9105  fed0				  -	      if	(<*) > (<(*+7))
   9106  fed0				  -	      repeat	($100-<*)
   9107  fed0				  -	      .byte	0
   9108  fed0				  -	      repend
   9109  fed0					      endif
   9110  fed0				   playerL066_0
   9111  fed0		       18		      .byte.b	%00011000
   9112  fed1		       3c		      .byte.b	%00111100
   9113  fed2		       3c		      .byte.b	%00111100
   9114  fed3		       7e		      .byte.b	%01111110
   9115  fed4		       7e		      .byte.b	%01111110
   9116  fed5		       ff		      .byte.b	%11111111
   9117  fed6		       7e		      .byte.b	%01111110
   9118  fed7		       18		      .byte.b	%00011000
   9119  fed8				  -	      if	(<*) > (<(*+3))
   9120  fed8				  -	      repeat	($100-<*)
   9121  fed8				  -	      .byte	0
   9122  fed8				  -	      repend
   9123  fed8					      endif
   9124  fed8				   playerL0190_1
   9125  fed8		       0a		      .byte.b	%00001010
   9126  fed9		       0e		      .byte.b	%00001110
   9127  feda		       33		      .byte.b	%00110011
   9128  fedb		       74		      .byte.b	%01110100
   9129  fedc				  -	      if	(<*) > (<(*+3))
   9130  fedc				  -	      repeat	($100-<*)
   9131  fedc				  -	      .byte	0
   9132  fedc				  -	      repend
   9133  fedc					      endif
   9134  fedc				   playerL0192_1
   9135  fedc		       09		      .byte.b	%00001001
   9136  fedd		       0e		      .byte.b	%00001110
   9137  fede		       33		      .byte.b	%00110011
   9138  fedf		       74		      .byte.b	%01110100
   9139  fee0				  -	      if	(<*) > (<(*+3))
   9140  fee0				  -	      repeat	($100-<*)
   9141  fee0				  -	      .byte	0
   9142  fee0				  -	      repend
   9143  fee0					      endif
   9144  fee0				   playerL0194_1
   9145  fee0		       11		      .byte.b	%00010001
   9146  fee1		       0e		      .byte.b	%00001110
   9147  fee2		       33		      .byte.b	%00110011
   9148  fee3		       74		      .byte.b	%01110100
   9149  fee4				  -	      if	(<*) > (<(*+3))
   9150  fee4				  -	      repeat	($100-<*)
   9151  fee4				  -	      .byte	0
   9152  fee4				  -	      repend
   9153  fee4					      endif
   9154  fee4				   playerL0196_1
   9155  fee4		       12		      .byte.b	%00010010
   9156  fee5		       0e		      .byte.b	%00001110
   9157  fee6		       33		      .byte.b	%00110011
   9158  fee7		       74		      .byte.b	%01110100
   9159  fee8					      if	ECHOFIRST
      180 bytes of ROM space left
   9160  fee8					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   9161  fee8					      endif
   9162  fee8		       00 01	   ECHOFIRST  =	1
   9163  fee8
   9164  fee8
   9165  fee8
   9166  fee8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9167  fee8
   9168  fee8							; feel free to modify the score graphics - just keep each digit 8 high
   9169  fee8							; and keep the conditional compilation stuff intact
   9170  fee8				  -	      ifconst	ROM2k
   9171  fee8				  -	      ORG	$F7AC-8
   9172  fee8					      else
   9173  fee8				  -	      ifconst	bankswitch
   9174  fee8				  -	      if	bankswitch == 8
   9175  fee8				  -	      ORG	$2F94-bscode_length
   9176  fee8				  -	      RORG	$FF94-bscode_length
   9177  fee8				  -	      endif
   9178  fee8				  -	      if	bankswitch == 16
   9179  fee8				  -	      ORG	$4F94-bscode_length
   9180  fee8				  -	      RORG	$FF94-bscode_length
   9181  fee8				  -	      endif
   9182  fee8				  -	      if	bankswitch == 32
   9183  fee8				  -	      ORG	$8F94-bscode_length
   9184  fee8				  -	      RORG	$FF94-bscode_length
   9185  fee8				  -	      endif
   9186  fee8				  -	      if	bankswitch == 64
   9187  fee8				  -	      ORG	$10F80-bscode_length
   9188  fee8				  -	      RORG	$1FF80-bscode_length
   9189  fee8				  -	      endif
   9190  fee8					      else
   9191  ff9c					      ORG	$FF9C
   9192  ff9c					      endif
   9193  ff9c					      endif
   9194  ff9c
   9195  ff9c							; font equates
   9196  ff9c		       00 01	   .21stcentury =	1
   9197  ff9c		       00 02	   alarmclock =	2
   9198  ff9c		       00 03	   handwritten =	3
   9199  ff9c		       00 04	   interrupted =	4
   9200  ff9c		       00 05	   retroputer =	5
   9201  ff9c		       00 06	   whimsey    =	6
   9202  ff9c		       00 07	   tiny       =	7
   9203  ff9c		       00 08	   hex	      =	8
   9204  ff9c
   9205  ff9c				  -	      ifconst	font
   9206  ff9c				  -	      if	font == hex
   9207  ff9c				  -	      ORG	. - 48
   9208  ff9c				  -	      endif
   9209  ff9c					      endif
   9210  ff9c
   9211  ff9c				   scoretable
   9212  ff9c
   9213  ff9c				  -	      ifconst	font
   9214  ff9c				  -	      if	font == .21stcentury
   9215  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   9216  ff9c				  -	      endif
   9217  ff9c				  -	      if	font == alarmclock
   9218  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   9219  ff9c				  -	      endif
   9220  ff9c				  -	      if	font == handwritten
   9221  ff9c				  -	      include	"score_graphics.asm.handwritten"
   9222  ff9c				  -	      endif
   9223  ff9c				  -	      if	font == interrupted
   9224  ff9c				  -	      include	"score_graphics.asm.interrupted"
   9225  ff9c				  -	      endif
   9226  ff9c				  -	      if	font == retroputer
   9227  ff9c				  -	      include	"score_graphics.asm.retroputer"
   9228  ff9c				  -	      endif
   9229  ff9c				  -	      if	font == whimsey
   9230  ff9c				  -	      include	"score_graphics.asm.whimsey"
   9231  ff9c				  -	      endif
   9232  ff9c				  -	      if	font == tiny
   9233  ff9c				  -	      include	"score_graphics.asm.tiny"
   9234  ff9c				  -	      endif
   9235  ff9c				  -	      if	font == hex
   9236  ff9c				  -	      include	"score_graphics.asm.hex"
   9237  ff9c				  -	      endif
   9238  ff9c					      else		; default font
   9239  ff9c
   9240  ff9c		       3c		      .byte.b	%00111100
   9241  ff9d		       66		      .byte.b	%01100110
   9242  ff9e		       66		      .byte.b	%01100110
   9243  ff9f		       66		      .byte.b	%01100110
   9244  ffa0		       66		      .byte.b	%01100110
   9245  ffa1		       66		      .byte.b	%01100110
   9246  ffa2		       66		      .byte.b	%01100110
   9247  ffa3		       3c		      .byte.b	%00111100
   9248  ffa4
   9249  ffa4		       7e		      .byte.b	%01111110
   9250  ffa5		       18		      .byte.b	%00011000
   9251  ffa6		       18		      .byte.b	%00011000
   9252  ffa7		       18		      .byte.b	%00011000
   9253  ffa8		       18		      .byte.b	%00011000
   9254  ffa9		       38		      .byte.b	%00111000
   9255  ffaa		       18		      .byte.b	%00011000
   9256  ffab		       08		      .byte.b	%00001000
   9257  ffac
   9258  ffac		       7e		      .byte.b	%01111110
   9259  ffad		       60		      .byte.b	%01100000
   9260  ffae		       60		      .byte.b	%01100000
   9261  ffaf		       3c		      .byte.b	%00111100
   9262  ffb0		       06		      .byte.b	%00000110
   9263  ffb1		       06		      .byte.b	%00000110
   9264  ffb2		       46		      .byte.b	%01000110
   9265  ffb3		       3c		      .byte.b	%00111100
   9266  ffb4
   9267  ffb4		       3c		      .byte.b	%00111100
   9268  ffb5		       46		      .byte.b	%01000110
   9269  ffb6		       06		      .byte.b	%00000110
   9270  ffb7		       06		      .byte.b	%00000110
   9271  ffb8		       1c		      .byte.b	%00011100
   9272  ffb9		       06		      .byte.b	%00000110
   9273  ffba		       46		      .byte.b	%01000110
   9274  ffbb		       3c		      .byte.b	%00111100
   9275  ffbc
   9276  ffbc		       0c		      .byte.b	%00001100
   9277  ffbd		       0c		      .byte.b	%00001100
   9278  ffbe		       7e		      .byte.b	%01111110
   9279  ffbf		       4c		      .byte.b	%01001100
   9280  ffc0		       4c		      .byte.b	%01001100
   9281  ffc1		       2c		      .byte.b	%00101100
   9282  ffc2		       1c		      .byte.b	%00011100
   9283  ffc3		       0c		      .byte.b	%00001100
   9284  ffc4
   9285  ffc4		       3c		      .byte.b	%00111100
   9286  ffc5		       46		      .byte.b	%01000110
   9287  ffc6		       06		      .byte.b	%00000110
   9288  ffc7		       06		      .byte.b	%00000110
   9289  ffc8		       3c		      .byte.b	%00111100
   9290  ffc9		       60		      .byte.b	%01100000
   9291  ffca		       60		      .byte.b	%01100000
   9292  ffcb		       7e		      .byte.b	%01111110
   9293  ffcc
   9294  ffcc		       3c		      .byte.b	%00111100
   9295  ffcd		       66		      .byte.b	%01100110
   9296  ffce		       66		      .byte.b	%01100110
   9297  ffcf		       66		      .byte.b	%01100110
   9298  ffd0		       7c		      .byte.b	%01111100
   9299  ffd1		       60		      .byte.b	%01100000
   9300  ffd2		       62		      .byte.b	%01100010
   9301  ffd3		       3c		      .byte.b	%00111100
   9302  ffd4
   9303  ffd4		       30		      .byte.b	%00110000
   9304  ffd5		       30		      .byte.b	%00110000
   9305  ffd6		       30		      .byte.b	%00110000
   9306  ffd7		       18		      .byte.b	%00011000
   9307  ffd8		       0c		      .byte.b	%00001100
   9308  ffd9		       06		      .byte.b	%00000110
   9309  ffda		       42		      .byte.b	%01000010
   9310  ffdb		       3e		      .byte.b	%00111110
   9311  ffdc
   9312  ffdc		       3c		      .byte.b	%00111100
   9313  ffdd		       66		      .byte.b	%01100110
   9314  ffde		       66		      .byte.b	%01100110
   9315  ffdf		       66		      .byte.b	%01100110
   9316  ffe0		       3c		      .byte.b	%00111100
   9317  ffe1		       66		      .byte.b	%01100110
   9318  ffe2		       66		      .byte.b	%01100110
   9319  ffe3		       3c		      .byte.b	%00111100
   9320  ffe4
   9321  ffe4		       3c		      .byte.b	%00111100
   9322  ffe5		       46		      .byte.b	%01000110
   9323  ffe6		       06		      .byte.b	%00000110
   9324  ffe7		       3e		      .byte.b	%00111110
   9325  ffe8		       66		      .byte.b	%01100110
   9326  ffe9		       66		      .byte.b	%01100110
   9327  ffea		       66		      .byte.b	%01100110
   9328  ffeb		       3c		      .byte.b	%00111100
   9329  ffec
   9330  ffec					      ifnconst	DPC_kernel_options
   9331  ffec
   9332  ffec		       00		      .byte.b	%00000000
   9333  ffed		       00		      .byte.b	%00000000
   9334  ffee		       00		      .byte.b	%00000000
   9335  ffef		       00		      .byte.b	%00000000
   9336  fff0		       00		      .byte.b	%00000000
   9337  fff1		       00		      .byte.b	%00000000
   9338  fff2		       00		      .byte.b	%00000000
   9339  fff3		       00		      .byte.b	%00000000
   9340  fff4
   9341  fff4					      endif
   9342  fff4
   9343  fff4					      endif
   9344  fff4
   9345  fff4				  -	      ifconst	ROM2k
   9346  fff4				  -	      ORG	$F7FC
   9347  fff4					      else
   9348  fff4				  -	      ifconst	bankswitch
   9349  fff4				  -	      if	bankswitch == 8
   9350  fff4				  -	      ORG	$2FF4-bscode_length
   9351  fff4				  -	      RORG	$FFF4-bscode_length
   9352  fff4				  -	      endif
   9353  fff4				  -	      if	bankswitch == 16
   9354  fff4				  -	      ORG	$4FF4-bscode_length
   9355  fff4				  -	      RORG	$FFF4-bscode_length
   9356  fff4				  -	      endif
   9357  fff4				  -	      if	bankswitch == 32
   9358  fff4				  -	      ORG	$8FF4-bscode_length
   9359  fff4				  -	      RORG	$FFF4-bscode_length
   9360  fff4				  -	      endif
   9361  fff4				  -	      if	bankswitch == 64
   9362  fff4				  -	      ORG	$10FE0-bscode_length
   9363  fff4				  -	      RORG	$1FFE0-bscode_length
   9364  fff4				  -	      endif
   9365  fff4					      else
   9366  fffc					      ORG	$FFFC
   9367  fffc					      endif
   9368  fffc					      endif
   9369  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   9370  fffc
   9371  fffc				  -	      ifconst	bankswitch
   9372  fffc				  -	      if	bankswitch == 8
   9373  fffc				  -	      ORG	$2FFC
   9374  fffc				  -	      RORG	$FFFC
   9375  fffc				  -	      endif
   9376  fffc				  -	      if	bankswitch == 16
   9377  fffc				  -	      ORG	$4FFC
   9378  fffc				  -	      RORG	$FFFC
   9379  fffc				  -	      endif
   9380  fffc				  -	      if	bankswitch == 32
   9381  fffc				  -	      ORG	$8FFC
   9382  fffc				  -	      RORG	$FFFC
   9383  fffc				  -	      endif
   9384  fffc				  -	      if	bankswitch == 64
   9385  fffc				  -	      ORG	$10FF0
   9386  fffc				  -	      RORG	$1FFF0
   9387  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   9388  fffc				  -	      ORG	$10FF8
   9389  fffc				  -	      RORG	$1FFF8
   9390  fffc				  -	      ifconst	superchip
   9391  fffc				  -	      .byte	"E","F","S","C"
   9392  fffc				  -	      else
   9393  fffc				  -	      .byte	"E","F","E","F"
   9394  fffc				  -	      endif
   9395  fffc				  -	      ORG	$10FFC
   9396  fffc				  -	      RORG	$1FFFC
   9397  fffc				  -	      endif
   9398  fffc					      else
   9399  fffc				  -	      ifconst	ROM2k
   9400  fffc				  -	      ORG	$F7FC
   9401  fffc					      else
   9402  fffc					      ORG	$FFFC
   9403  fffc					      endif
   9404  fffc					      endif
   9405  fffc		       00 f0		      .word.w	(start & $ffff)
   9406  fffe		       00 f0		      .word.w	(start & $ffff)
