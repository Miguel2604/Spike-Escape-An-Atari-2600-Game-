------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_lives_bar.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_lives_bar.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_lives_bar.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 99	    _P_Edge_Right =	153
      4  10000 ????
      5  10000 ????		00 01	    _P_Edge_Left =	1
      6  10000 ????
      7  10000 ????		00 53	    _P_Edge_Bottom =	83
      8  10000 ????
      9  10000 ????		00 0a	    _P_Edge_Top =	10
     10  10000 ????
     11  10000 ????		00 01	    pfscore    =	1
     12  10000 ????
     13  10000 ????		00 ed	    rand16     =	z
     14  10000 ????
     15  10000 ????		00 ec	    _Bit7_Last_Life =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     20  10000 ????
     21  10000 ????		00 ec	    _Bit2_Game_Control =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     26  10000 ????
     27  10000 ????		00 ec	    _BitOp_01  =	y
     28  10000 ????
     29  10000 ????		00 eb	    _High_Score3 =	x
     30  10000 ????
     31  10000 ????		00 ea	    _High_Score2 =	w
     32  10000 ????
     33  10000 ????		00 e9	    _High_Score1 =	v
     34  10000 ????
     35  10000 ????		00 e8	    _Score3_Mem =	u
     36  10000 ????
     37  10000 ????		00 e7	    _Score2_Mem =	t
     38  10000 ????
     39  10000 ????		00 e6	    _Score1_Mem =	s
     40  10000 ????
     41  10000 ????		00 95	    _sc3       =	score + 2
     42  10000 ????
     43  10000 ????		00 94	    _sc2       =	score + 1
     44  10000 ????
     45  10000 ????		00 93	    _sc1       =	score
     46  10000 ????
     47  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     48  10000 ????
     49  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     50  10000 ????
     51  10000 ????		00 e5	    _Bit1_BW_Check =	r
     52  10000 ????
     53  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     54  10000 ????
     55  10000 ????		00 e5	    _BitOp_02  =	r
     56  10000 ????
     57  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     58  10000 ????
     59  10000 ????		00 dd	    _AP_Dir_Counter =	j
     60  10000 ????
     61  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     62  10000 ????
     63  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     64  10000 ????
     65  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     66  10000 ????
     67  10000 ????		00 da	    _F0        =	g
     68  10000 ????
     69  10000 ????		00 d9	    _V0        =	f
     70  10000 ????
     71  10000 ????		00 d8	    _C0        =	e
     72  10000 ????
     73  10000 ????		00 d7	    _Ch0_Counter =	d
     74  10000 ????
     75  10000 ????		00 d6	    _Ch0_Sound =	c
     76  10000 ????
     77  10000 ????		00 d5	    _Frame_Counter =	b
     78  10000 ????
     79  10000 ????		00 d4	    _Master_Counter =	a
     80  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_lives_bar.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 99	    _P_Edge_Right =	153
      4  10000 ????
      5  10000 ????		00 01	    _P_Edge_Left =	1
      6  10000 ????
      7  10000 ????		00 53	    _P_Edge_Bottom =	83
      8  10000 ????
      9  10000 ????		00 0a	    _P_Edge_Top =	10
     10  10000 ????
     11  10000 ????		00 01	    pfscore    =	1
     12  10000 ????
     13  10000 ????		00 ed	    rand16     =	z
     14  10000 ????
     15  10000 ????		00 ec	    _Bit7_Last_Life =	y
     16  10000 ????
     17  10000 ????		00 ec	    _Bit6_Swap_Scores =	y
     18  10000 ????
     19  10000 ????		00 ec	    _Bit3_Auto_Play =	y
     20  10000 ????
     21  10000 ????		00 ec	    _Bit2_Game_Control =	y
     22  10000 ????
     23  10000 ????		00 ec	    _Bit1_FireB_Restrainer =	y
     24  10000 ????
     25  10000 ????		00 ec	    _Bit0_Reset_Restrainer =	y
     26  10000 ????
     27  10000 ????		00 ec	    _BitOp_01  =	y
     28  10000 ????
     29  10000 ????		00 eb	    _High_Score3 =	x
     30  10000 ????
     31  10000 ????		00 ea	    _High_Score2 =	w
     32  10000 ????
     33  10000 ????		00 e9	    _High_Score1 =	v
     34  10000 ????
     35  10000 ????		00 e8	    _Score3_Mem =	u
     36  10000 ????
     37  10000 ????		00 e7	    _Score2_Mem =	t
     38  10000 ????
     39  10000 ????		00 e6	    _Score1_Mem =	s
     40  10000 ????
     41  10000 ????		00 95	    _sc3       =	score + 2
     42  10000 ????
     43  10000 ????		00 94	    _sc2       =	score + 1
     44  10000 ????
     45  10000 ????		00 93	    _sc1       =	score
     46  10000 ????
     47  10000 ????		00 e5	    _Bit3_AP_P0_Dir =	r
     48  10000 ????
     49  10000 ????		00 e5	    _Bit2_Pause_Clr_Scheme =	r
     50  10000 ????
     51  10000 ????		00 e5	    _Bit1_BW_Check =	r
     52  10000 ????
     53  10000 ????		00 e5	    _Bit0_BW_Mem =	r
     54  10000 ????
     55  10000 ????		00 e5	    _BitOp_02  =	r
     56  10000 ????
     57  10000 ????		00 dd	    _Pause_Color_Tmp =	j
     58  10000 ????
     59  10000 ????		00 dd	    _AP_Dir_Counter =	j
     60  10000 ????
     61  10000 ????		00 dc	    _Pause_Mem_Color_Tmp =	i
     62  10000 ????
     63  10000 ????		00 dc	    _AP_2_Sec_Score_Flip =	i
     64  10000 ????
     65  10000 ????		00 db	    _Pause_Counter_Tmp =	h
     66  10000 ????
     67  10000 ????		00 da	    _F0        =	g
     68  10000 ????
     69  10000 ????		00 d9	    _V0        =	f
     70  10000 ????
     71  10000 ????		00 d8	    _C0        =	e
     72  10000 ????
     73  10000 ????		00 d7	    _Ch0_Counter =	d
     74  10000 ????
     75  10000 ????		00 d6	    _Ch0_Sound =	c
     76  10000 ????
     77  10000 ????		00 d5	    _Frame_Counter =	b
     78  10000 ????
     79  10000 ????		00 d4	    _Master_Counter =	a
     80  10000 ????
------- FILE c:\Users\Acer\Documents\Assembly Game Projectc\tinkernut_world_deluxe_lives_bar.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 67 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc					      ifconst	pfscore
    765  f1cc		       a5 f4		      lda	pfscorecolor
    766  f1ce		       85 08		      sta	COLUPF
    767  f1d0					      endif
    768  f1d0		       85 02		      sta	WSYNC
    769  f1d2		       a2 00		      ldx	#0
    770  f1d4		       86 1b		      STx	GRP0
    771  f1d6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d8
    773  f1d8		       a5 9b		      lda	scorepointers+5
    774  f1da							; ldy temp5
    775  f1da		       95 a0		      sta	temp5,x
    776  f1dc							; sty scorepointers+5
    777  f1dc		       a9 ff		      lda	#>scoretable
    778  f1de		       85 97		      sta	scorepointers+1
    779  f1e0		       85 99		      sta	scorepointers+3
    780  f1e2		       85 9b		      sta	scorepointers+5
    781  f1e4		       85 9d		      sta	temp2
    782  f1e6		       85 9f		      sta	temp4
    783  f1e8		       85 a1		      sta	temp6
    784  f1ea		       a0 07		      LDY	#7
    785  f1ec		       84 25		      STY	VDELP0
    786  f1ee		       85 10		      STA	RESP0
    787  f1f0		       85 11		      STA	RESP1
    788  f1f2
    789  f1f2
    790  f1f2		       a9 03		      LDA	#$03
    791  f1f4		       85 04		      STA	NUSIZ0
    792  f1f6		       85 05		      STA	NUSIZ1
    793  f1f8		       85 26		      STA	VDELP1
    794  f1fa		       a9 f0		      LDA	#$F0
    795  f1fc		       85 21		      STA	HMP1
    796  f1fe		       b1 96		      lda	(scorepointers),y
    797  f200		       85 1b		      sta	GRP0
    798  f202		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f204		       4c 10 f2 	      jmp	beginscore
    800  f207
    801  f207
    802  f207				  -	      if	((<*)>$d4)
    803  f207				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f207					      endif
    805  f207
    806  f207				   loop2
    807  f207		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f209		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20b					      ifconst	pfscore
    810  f20b		       ad f2 00 	      lda.w	pfscore1
    811  f20e		       85 0e		      sta	PF1
    812  f210				  -	      else
    813  f210				  -	      ifconst	scorefade
    814  f210				  -	      sleep	2
    815  f210				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f210				  -	      else
    817  f210				  -	      sleep	7
    818  f210				  -	      endif
    819  f210					      endif
    820  f210							; cycle 0
    821  f210				   beginscore
    822  f210		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f212		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f214		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f216		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f218		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21a		       9a		      txs
    828  f21b		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21d				  -	      ifconst	scorefade
    830  f21d				  -	      lda	stack2
    831  f21d					      else
      0  f21d					      sleep	3
      1  f21d				   .CYCLES    SET	3
      2  f21d
      3  f21d				  -	      IF	.CYCLES < 2
      4  f21d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21d				  -	      ERR
      6  f21d					      ENDIF
      7  f21d
      8  f21d					      IF	.CYCLES & 1
      9  f21d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21d		       04 00		      nop	0
     11  f21f				  -	      ELSE
     12  f21f				  -	      bit	VSYNC
     13  f21f					      ENDIF
     14  f21f				   .CYCLES    SET	.CYCLES - 3
     15  f21f					      ENDIF
     16  f21f
     17  f21f				  -	      REPEAT	.CYCLES / 2
     18  f21f				  -	      nop
     19  f21f					      REPEND
    833  f21f					      endif
    834  f21f
    835  f21f					      ifconst	pfscore
    836  f21f		       a5 f3		      lda	pfscore2
    837  f221		       85 0e		      sta	PF1
    838  f223				  -	      else
    839  f223				  -	      ifconst	scorefade
    840  f223				  -	      sta	COLUP0
    841  f223				  -	      sta	COLUP1
    842  f223				  -	      else
    843  f223				  -	      sleep	6
    844  f223				  -	      endif
    845  f223					      endif
    846  f223
    847  f223		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f225		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f227		       ba		      tsx
    850  f228		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22a		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f22c		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22e		       88		      dey
    854  f22f		       10 d6		      bpl	loop2	;+2 60 180
    855  f231
    856  f231		       a6 f6		      ldx	stack1
    857  f233		       9a		      txs
    858  f234							; lda scorepointers+1
    859  f234		       a4 9c		      ldy	temp1
    860  f236							; sta temp1
    861  f236		       84 97		      sty	scorepointers+1
    862  f238
    863  f238		       a9 00		      LDA	#0
    864  f23a		       85 0e		      sta	PF1
    865  f23c		       85 1b		      STA	GRP0
    866  f23e		       85 1c		      STA	GRP1
    867  f240		       85 25		      STA	VDELP0
    868  f242		       85 26		      STA	VDELP1	;do we need these
    869  f244		       85 04		      STA	NUSIZ0
    870  f246		       85 05		      STA	NUSIZ1
    871  f248
    872  f248							; lda scorepointers+3
    873  f248		       a4 9e		      ldy	temp3
    874  f24a							; sta temp3
    875  f24a		       84 99		      sty	scorepointers+3
    876  f24c
    877  f24c							; lda scorepointers+5
    878  f24c		       a4 a0		      ldy	temp5
    879  f24e							; sta temp5
    880  f24e		       84 9b		      sty	scorepointers+5
    881  f250					      endif		;noscore
    882  f250				  -	      ifconst	readpaddle
    883  f250				  -	      lda	#%11000010
    884  f250					      else
    885  f250				  -	      ifconst	qtcontroller
    886  f250				  -	      lda	qtcontroller
    887  f250				  -	      lsr		; bit 0 in carry
    888  f250				  -	      lda	#4
    889  f250				  -	      ror		; carry into top of A
    890  f250					      else
    891  f250		       a9 02		      lda	#2
    892  f252					      endif		; qtcontroller
    893  f252					      endif		; readpaddle
    894  f252		       85 02		      sta	WSYNC
    895  f254		       85 01		      sta	VBLANK
      0  f256					      RETURN
      1  f256					      ifnconst	bankswitch
      2  f256		       60		      rts
      3  f257				  -	      else
      4  f257				  -	      jmp	BS_return
      5  f257					      endif
    897  f257				  -	      ifconst	shakescreen
    898  f257				  -doshakescreen
    899  f257				  -	      bit	shakescreen
    900  f257				  -	      bmi	noshakescreen
    901  f257				  -	      sta	WSYNC
    902  f257				  -noshakescreen
    903  f257				  -	      ldx	missile0height
    904  f257				  -	      inx
    905  f257				  -	      rts
    906  f257					      endif
    907  f257
    908  f257							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f257
    910  f257							; playfield drawing routines
    911  f257							; you get a 32x12 bitmapped display in a single color :)
    912  f257							; 0-31 and 0-11
    913  f257
    914  f257				   pfclear		; clears playfield - or fill with pattern
    915  f257				  -	      ifconst	pfres
    916  f257				  -	      ldx	#pfres*pfwidth-1
    917  f257					      else
    918  f257		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f259					      endif
    920  f259				   pfclear_loop
    921  f259					      ifnconst	superchip
    922  f259		       95 a4		      sta	playfield,x
    923  f25b				  -	      else
    924  f25b				  -	      sta	playfield-128,x
    925  f25b					      endif
    926  f25b		       ca		      dex
    927  f25c		       10 fb		      bpl	pfclear_loop
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    929  f25f
    930  f25f				   setuppointers
    931  f25f		       86 9d		      stx	temp2	; store on.off.flip value
    932  f261		       aa		      tax		; put x-value in x 
    933  f262		       4a		      lsr
    934  f263		       4a		      lsr
    935  f264		       4a		      lsr		; divide x pos by 8 
    936  f265		       85 9c		      sta	temp1
    937  f267		       98		      tya
    938  f268		       0a		      asl
    939  f269					      if	pfwidth=4
    940  f269		       0a		      asl		; multiply y pos by 4
    941  f26a					      endif		; else multiply by 2
    942  f26a		       18		      clc
    943  f26b		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26d		       a8		      tay		; put the value in y
    945  f26e		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f270		       60		      rts
    947  f271
    948  f271				   pfread
    949  f271							;x=xvalue, y=yvalue
    950  f271		       20 5f f2 	      jsr	setuppointers
    951  f274		       bd d9 f2 	      lda	setbyte,x
    952  f277		       39 a4 00 	      and	playfield,y
    953  f27a		       5d d9 f2 	      eor	setbyte,x
    954  f27d							; beq readzero
    955  f27d							; lda #1
    956  f27d							; readzero
      0  f27d					      RETURN
      1  f27d					      ifnconst	bankswitch
      2  f27d		       60		      rts
      3  f27e				  -	      else
      4  f27e				  -	      jmp	BS_return
      5  f27e					      endif
    958  f27e
    959  f27e				   pfpixel
    960  f27e							;x=xvalue, y=yvalue, a=0,1,2
    961  f27e		       20 5f f2 	      jsr	setuppointers
    962  f281
    963  f281				  -	      ifconst	bankswitch
    964  f281				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f281				  -	      beq	pixelon_r	; if "on" go to on
    966  f281				  -	      lsr
    967  f281				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f281				  -	      lda	playfield,y	; if here, it's "flip"
    969  f281				  -	      eor	setbyte,x
    970  f281				  -	      ifconst	superchip
    971  f281				  -	      sta	playfield-128,y
    972  f281				  -	      else
    973  f281				  -	      sta	playfield,y
    974  f281				  -	      endif
    975  f281				  -	      RETURN
    976  f281				  -pixelon_r
    977  f281				  -	      lda	playfield,y
    978  f281				  -	      ora	setbyte,x
    979  f281				  -	      ifconst	superchip
    980  f281				  -	      sta	playfield-128,y
    981  f281				  -	      else
    982  f281				  -	      sta	playfield,y
    983  f281				  -	      endif
    984  f281				  -	      RETURN
    985  f281				  -pixeloff_r
    986  f281				  -	      lda	setbyte,x
    987  f281				  -	      eor	#$ff
    988  f281				  -	      and	playfield,y
    989  f281				  -	      ifconst	superchip
    990  f281				  -	      sta	playfield-128,y
    991  f281				  -	      else
    992  f281				  -	      sta	playfield,y
    993  f281				  -	      endif
    994  f281				  -	      RETURN
    995  f281				  -
    996  f281					      else
    997  f281		       4c b2 f2 	      jmp	plotpoint
    998  f284					      endif
    999  f284
   1000  f284				   pfhline
   1001  f284							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f284		       20 5f f2 	      jsr	setuppointers
   1003  f287		       4c 91 f2 	      jmp	noinc
   1004  f28a				   keepgoing
   1005  f28a		       e8		      inx
   1006  f28b		       8a		      txa
   1007  f28c		       29 07		      and	#7
   1008  f28e		       d0 01		      bne	noinc
   1009  f290		       c8		      iny
   1010  f291				   noinc
   1011  f291		       20 b2 f2 	      jsr	plotpoint
   1012  f294		       e4 9e		      cpx	temp3
   1013  f296		       30 f2		      bmi	keepgoing
      0  f298					      RETURN
      1  f298					      ifnconst	bankswitch
      2  f298		       60		      rts
      3  f299				  -	      else
      4  f299				  -	      jmp	BS_return
      5  f299					      endif
   1015  f299
   1016  f299				   pfvline
   1017  f299							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f299		       20 5f f2 	      jsr	setuppointers
   1019  f29c		       84 9c		      sty	temp1	; store memory location offset
   1020  f29e		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a0		       a5 9e		      lda	temp3
   1022  f2a2		       0a		      asl
   1023  f2a3					      if	pfwidth=4
   1024  f2a3		       0a		      asl		; multiply by 4
   1025  f2a4					      endif		; else multiply by 2
   1026  f2a4		       85 9e		      sta	temp3	; store it
   1027  f2a6							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a6							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a6							; x should equal original x value
   1030  f2a6				   keepgoingy
   1031  f2a6		       20 b2 f2 	      jsr	plotpoint
   1032  f2a9		       c8		      iny
   1033  f2aa		       c8		      iny
   1034  f2ab					      if	pfwidth=4
   1035  f2ab		       c8		      iny
   1036  f2ac		       c8		      iny
   1037  f2ad					      endif
   1038  f2ad		       c4 9e		      cpy	temp3
   1039  f2af		       30 f5		      bmi	keepgoingy
      0  f2b1					      RETURN
      1  f2b1					      ifnconst	bankswitch
      2  f2b1		       60		      rts
      3  f2b2				  -	      else
      4  f2b2				  -	      jmp	BS_return
      5  f2b2					      endif
   1041  f2b2
   1042  f2b2				   plotpoint
   1043  f2b2		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b4		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b6		       4a		      lsr
   1046  f2b7		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b9		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2bc		       5d d9 f2 	      eor	setbyte,x
   1049  f2bf				  -	      ifconst	superchip
   1050  f2bf				  -	      sta	playfield-128,y
   1051  f2bf					      else
   1052  f2bf		       99 a4 00 	      sta	playfield,y
   1053  f2c2					      endif
   1054  f2c2		       60		      rts
   1055  f2c3				   pixelon
   1056  f2c3		       b9 a4 00 	      lda	playfield,y
   1057  f2c6		       1d d9 f2 	      ora	setbyte,x
   1058  f2c9				  -	      ifconst	superchip
   1059  f2c9				  -	      sta	playfield-128,y
   1060  f2c9					      else
   1061  f2c9		       99 a4 00 	      sta	playfield,y
   1062  f2cc					      endif
   1063  f2cc		       60		      rts
   1064  f2cd				   pixeloff
   1065  f2cd		       bd d9 f2 	      lda	setbyte,x
   1066  f2d0		       49 ff		      eor	#$ff
   1067  f2d2		       39 a4 00 	      and	playfield,y
   1068  f2d5				  -	      ifconst	superchip
   1069  f2d5				  -	      sta	playfield-128,y
   1070  f2d5					      else
   1071  f2d5		       99 a4 00 	      sta	playfield,y
   1072  f2d8					      endif
   1073  f2d8		       60		      rts
   1074  f2d9
   1075  f2d9				   setbyte
   1076  f2d9					      ifnconst	pfcenter
   1077  f2d9		       80		      .byte.b	$80
   1078  f2da		       40		      .byte.b	$40
   1079  f2db		       20		      .byte.b	$20
   1080  f2dc		       10		      .byte.b	$10
   1081  f2dd		       08		      .byte.b	$08
   1082  f2de		       04		      .byte.b	$04
   1083  f2df		       02		      .byte.b	$02
   1084  f2e0		       01		      .byte.b	$01
   1085  f2e1					      endif
   1086  f2e1		       01		      .byte.b	$01
   1087  f2e2		       02		      .byte.b	$02
   1088  f2e3		       04		      .byte.b	$04
   1089  f2e4		       08		      .byte.b	$08
   1090  f2e5		       10		      .byte.b	$10
   1091  f2e6		       20		      .byte.b	$20
   1092  f2e7		       40		      .byte.b	$40
   1093  f2e8		       80		      .byte.b	$80
   1094  f2e9		       80		      .byte.b	$80
   1095  f2ea		       40		      .byte.b	$40
   1096  f2eb		       20		      .byte.b	$20
   1097  f2ec		       10		      .byte.b	$10
   1098  f2ed		       08		      .byte.b	$08
   1099  f2ee		       04		      .byte.b	$04
   1100  f2ef		       02		      .byte.b	$02
   1101  f2f0		       01		      .byte.b	$01
   1102  f2f1		       01		      .byte.b	$01
   1103  f2f2		       02		      .byte.b	$02
   1104  f2f3		       04		      .byte.b	$04
   1105  f2f4		       08		      .byte.b	$08
   1106  f2f5		       10		      .byte.b	$10
   1107  f2f6		       20		      .byte.b	$20
   1108  f2f7		       40		      .byte.b	$40
   1109  f2f8		       80		      .byte.b	$80
   1110  f2f9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f9
   1112  f2f9				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f9		       d0 13		      bne	notleft
   1114  f2fb							;left
   1115  f2fb				  -	      ifconst	pfres
   1116  f2fb				  -	      ldx	#pfres*4
   1117  f2fb					      else
   1118  f2fb		       a2 30		      ldx	#48
   1119  f2fd					      endif
   1120  f2fd				   leftloop
   1121  f2fd		       b5 a3		      lda	playfield-1,x
   1122  f2ff		       4a		      lsr
   1123  f300
   1124  f300				  -	      ifconst	superchip
   1125  f300				  -	      lda	playfield-2,x
   1126  f300				  -	      rol
   1127  f300				  -	      sta	playfield-130,x
   1128  f300				  -	      lda	playfield-3,x
   1129  f300				  -	      ror
   1130  f300				  -	      sta	playfield-131,x
   1131  f300				  -	      lda	playfield-4,x
   1132  f300				  -	      rol
   1133  f300				  -	      sta	playfield-132,x
   1134  f300				  -	      lda	playfield-1,x
   1135  f300				  -	      ror
   1136  f300				  -	      sta	playfield-129,x
   1137  f300					      else
   1138  f300		       36 a2		      rol	playfield-2,x
   1139  f302		       76 a1		      ror	playfield-3,x
   1140  f304		       36 a0		      rol	playfield-4,x
   1141  f306		       76 a3		      ror	playfield-1,x
   1142  f308					      endif
   1143  f308
   1144  f308		       8a		      txa
   1145  f309		       cb 04		      sbx	#4
   1146  f30b		       d0 f0		      bne	leftloop
      0  f30d					      RETURN
      1  f30d					      ifnconst	bankswitch
      2  f30d		       60		      rts
      3  f30e				  -	      else
      4  f30e				  -	      jmp	BS_return
      5  f30e					      endif
   1148  f30e
   1149  f30e				   notleft
   1150  f30e		       4a		      lsr
   1151  f30f		       90 13		      bcc	notright
   1152  f311							;right
   1153  f311
   1154  f311				  -	      ifconst	pfres
   1155  f311				  -	      ldx	#pfres*4
   1156  f311					      else
   1157  f311		       a2 30		      ldx	#48
   1158  f313					      endif
   1159  f313				   rightloop
   1160  f313		       b5 a0		      lda	playfield-4,x
   1161  f315		       4a		      lsr
   1162  f316				  -	      ifconst	superchip
   1163  f316				  -	      lda	playfield-3,x
   1164  f316				  -	      rol
   1165  f316				  -	      sta	playfield-131,x
   1166  f316				  -	      lda	playfield-2,x
   1167  f316				  -	      ror
   1168  f316				  -	      sta	playfield-130,x
   1169  f316				  -	      lda	playfield-1,x
   1170  f316				  -	      rol
   1171  f316				  -	      sta	playfield-129,x
   1172  f316				  -	      lda	playfield-4,x
   1173  f316				  -	      ror
   1174  f316				  -	      sta	playfield-132,x
   1175  f316					      else
   1176  f316		       36 a1		      rol	playfield-3,x
   1177  f318		       76 a2		      ror	playfield-2,x
   1178  f31a		       36 a3		      rol	playfield-1,x
   1179  f31c		       76 a0		      ror	playfield-4,x
   1180  f31e					      endif
   1181  f31e		       8a		      txa
   1182  f31f		       cb 04		      sbx	#4
   1183  f321		       d0 f0		      bne	rightloop
      0  f323					      RETURN
      1  f323					      ifnconst	bankswitch
      2  f323		       60		      rts
      3  f324				  -	      else
      4  f324				  -	      jmp	BS_return
      5  f324					      endif
   1185  f324
   1186  f324				   notright
   1187  f324		       4a		      lsr
   1188  f325		       90 49		      bcc	notup
   1189  f327							;up
   1190  f327		       4a		      lsr
   1191  f328		       90 02		      bcc	onedecup
   1192  f32a		       c6 ef		      dec	playfieldpos
   1193  f32c				   onedecup
   1194  f32c		       c6 ef		      dec	playfieldpos
   1195  f32e		       f0 02		      beq	shiftdown
   1196  f330		       10 3d		      bpl	noshiftdown2
   1197  f332				   shiftdown
   1198  f332				  -	      ifconst	pfrowheight
   1199  f332				  -	      lda	#pfrowheight
   1200  f332					      else
   1201  f332					      ifnconst	pfres
   1202  f332		       a9 08		      lda	#8
   1203  f334				  -	      else
   1204  f334				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f334					      endif
   1206  f334					      endif
   1207  f334
   1208  f334		       85 ef		      sta	playfieldpos
   1209  f336		       a5 a7		      lda	playfield+3
   1210  f338		       85 9f		      sta	temp4
   1211  f33a		       a5 a6		      lda	playfield+2
   1212  f33c		       85 9e		      sta	temp3
   1213  f33e		       a5 a5		      lda	playfield+1
   1214  f340		       85 9d		      sta	temp2
   1215  f342		       a5 a4		      lda	playfield
   1216  f344		       85 9c		      sta	temp1
   1217  f346		       a2 00		      ldx	#0
   1218  f348				   up2
   1219  f348		       b5 a8		      lda	playfield+4,x
   1220  f34a				  -	      ifconst	superchip
   1221  f34a				  -	      sta	playfield-128,x
   1222  f34a				  -	      lda	playfield+5,x
   1223  f34a				  -	      sta	playfield-127,x
   1224  f34a				  -	      lda	playfield+6,x
   1225  f34a				  -	      sta	playfield-126,x
   1226  f34a				  -	      lda	playfield+7,x
   1227  f34a				  -	      sta	playfield-125,x
   1228  f34a					      else
   1229  f34a		       95 a4		      sta	playfield,x
   1230  f34c		       b5 a9		      lda	playfield+5,x
   1231  f34e		       95 a5		      sta	playfield+1,x
   1232  f350		       b5 aa		      lda	playfield+6,x
   1233  f352		       95 a6		      sta	playfield+2,x
   1234  f354		       b5 ab		      lda	playfield+7,x
   1235  f356		       95 a7		      sta	playfield+3,x
   1236  f358					      endif
   1237  f358		       8a		      txa
   1238  f359		       cb fc		      sbx	#252
   1239  f35b				  -	      ifconst	pfres
   1240  f35b				  -	      cpx	#(pfres-1)*4
   1241  f35b					      else
   1242  f35b		       e0 2c		      cpx	#44
   1243  f35d					      endif
   1244  f35d		       d0 e9		      bne	up2
   1245  f35f
   1246  f35f		       a5 9f		      lda	temp4
   1247  f361
   1248  f361				  -	      ifconst	superchip
   1249  f361				  -	      ifconst	pfres
   1250  f361				  -	      sta	playfield+pfres*4-129
   1251  f361				  -	      lda	temp3
   1252  f361				  -	      sta	playfield+pfres*4-130
   1253  f361				  -	      lda	temp2
   1254  f361				  -	      sta	playfield+pfres*4-131
   1255  f361				  -	      lda	temp1
   1256  f361				  -	      sta	playfield+pfres*4-132
   1257  f361				  -	      else
   1258  f361				  -	      sta	playfield+47-128
   1259  f361				  -	      lda	temp3
   1260  f361				  -	      sta	playfield+46-128
   1261  f361				  -	      lda	temp2
   1262  f361				  -	      sta	playfield+45-128
   1263  f361				  -	      lda	temp1
   1264  f361				  -	      sta	playfield+44-128
   1265  f361				  -	      endif
   1266  f361					      else
   1267  f361				  -	      ifconst	pfres
   1268  f361				  -	      sta	playfield+pfres*4-1
   1269  f361				  -	      lda	temp3
   1270  f361				  -	      sta	playfield+pfres*4-2
   1271  f361				  -	      lda	temp2
   1272  f361				  -	      sta	playfield+pfres*4-3
   1273  f361				  -	      lda	temp1
   1274  f361				  -	      sta	playfield+pfres*4-4
   1275  f361					      else
   1276  f361		       85 d3		      sta	playfield+47
   1277  f363		       a5 9e		      lda	temp3
   1278  f365		       85 d2		      sta	playfield+46
   1279  f367		       a5 9d		      lda	temp2
   1280  f369		       85 d1		      sta	playfield+45
   1281  f36b		       a5 9c		      lda	temp1
   1282  f36d		       85 d0		      sta	playfield+44
   1283  f36f					      endif
   1284  f36f					      endif
   1285  f36f				   noshiftdown2
      0  f36f					      RETURN
      1  f36f					      ifnconst	bankswitch
      2  f36f		       60		      rts
      3  f370				  -	      else
      4  f370				  -	      jmp	BS_return
      5  f370					      endif
   1287  f370
   1288  f370
   1289  f370				   notup
   1290  f370							;down
   1291  f370		       4a		      lsr
   1292  f371		       b0 02		      bcs	oneincup
   1293  f373		       e6 ef		      inc	playfieldpos
   1294  f375				   oneincup
   1295  f375		       e6 ef		      inc	playfieldpos
   1296  f377		       a5 ef		      lda	playfieldpos
   1297  f379
   1298  f379				  -	      ifconst	pfrowheight
   1299  f379				  -	      cmp	#pfrowheight+1
   1300  f379					      else
   1301  f379					      ifnconst	pfres
   1302  f379		       c9 09		      cmp	#9
   1303  f37b				  -	      else
   1304  f37b				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37b					      endif
   1306  f37b					      endif
   1307  f37b
   1308  f37b		       90 3b		      bcc	noshiftdown
   1309  f37d		       a9 01		      lda	#1
   1310  f37f		       85 ef		      sta	playfieldpos
   1311  f381
   1312  f381				  -	      ifconst	pfres
   1313  f381				  -	      lda	playfield+pfres*4-1
   1314  f381				  -	      sta	temp4
   1315  f381				  -	      lda	playfield+pfres*4-2
   1316  f381				  -	      sta	temp3
   1317  f381				  -	      lda	playfield+pfres*4-3
   1318  f381				  -	      sta	temp2
   1319  f381				  -	      lda	playfield+pfres*4-4
   1320  f381					      else
   1321  f381		       a5 d3		      lda	playfield+47
   1322  f383		       85 9f		      sta	temp4
   1323  f385		       a5 d2		      lda	playfield+46
   1324  f387		       85 9e		      sta	temp3
   1325  f389		       a5 d1		      lda	playfield+45
   1326  f38b		       85 9d		      sta	temp2
   1327  f38d		       a5 d0		      lda	playfield+44
   1328  f38f					      endif
   1329  f38f
   1330  f38f		       85 9c		      sta	temp1
   1331  f391
   1332  f391				  -	      ifconst	pfres
   1333  f391				  -	      ldx	#(pfres-1)*4
   1334  f391					      else
   1335  f391		       a2 2c		      ldx	#44
   1336  f393					      endif
   1337  f393				   down2
   1338  f393		       b5 a3		      lda	playfield-1,x
   1339  f395				  -	      ifconst	superchip
   1340  f395				  -	      sta	playfield-125,x
   1341  f395				  -	      lda	playfield-2,x
   1342  f395				  -	      sta	playfield-126,x
   1343  f395				  -	      lda	playfield-3,x
   1344  f395				  -	      sta	playfield-127,x
   1345  f395				  -	      lda	playfield-4,x
   1346  f395				  -	      sta	playfield-128,x
   1347  f395					      else
   1348  f395		       95 a7		      sta	playfield+3,x
   1349  f397		       b5 a2		      lda	playfield-2,x
   1350  f399		       95 a6		      sta	playfield+2,x
   1351  f39b		       b5 a1		      lda	playfield-3,x
   1352  f39d		       95 a5		      sta	playfield+1,x
   1353  f39f		       b5 a0		      lda	playfield-4,x
   1354  f3a1		       95 a4		      sta	playfield,x
   1355  f3a3					      endif
   1356  f3a3		       8a		      txa
   1357  f3a4		       cb 04		      sbx	#4
   1358  f3a6		       d0 eb		      bne	down2
   1359  f3a8
   1360  f3a8		       a5 9f		      lda	temp4
   1361  f3aa				  -	      ifconst	superchip
   1362  f3aa				  -	      sta	playfield-125
   1363  f3aa				  -	      lda	temp3
   1364  f3aa				  -	      sta	playfield-126
   1365  f3aa				  -	      lda	temp2
   1366  f3aa				  -	      sta	playfield-127
   1367  f3aa				  -	      lda	temp1
   1368  f3aa				  -	      sta	playfield-128
   1369  f3aa					      else
   1370  f3aa		       85 a7		      sta	playfield+3
   1371  f3ac		       a5 9e		      lda	temp3
   1372  f3ae		       85 a6		      sta	playfield+2
   1373  f3b0		       a5 9d		      lda	temp2
   1374  f3b2		       85 a5		      sta	playfield+1
   1375  f3b4		       a5 9c		      lda	temp1
   1376  f3b6		       85 a4		      sta	playfield
   1377  f3b8					      endif
   1378  f3b8				   noshiftdown
      0  f3b8					      RETURN
      1  f3b8					      ifnconst	bankswitch
      2  f3b8		       60		      rts
      3  f3b9				  -	      else
      4  f3b9				  -	      jmp	BS_return
      5  f3b9					      endif
   1380  f3b9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b9
   1382  f3b9							;standard routines needed for pretty much all games
   1383  f3b9							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b9							; repositioning code and score pointer setup moved to overscan
   1385  f3b9							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b9
   1387  f3b9				   randomize
   1388  f3b9		       a5 a2		      lda	rand
   1389  f3bb		       4a		      lsr
   1390  f3bc					      ifconst	rand16
   1391  f3bc		       26 ed		      rol	rand16
   1392  f3be					      endif
   1393  f3be		       90 02		      bcc	noeor
   1394  f3c0		       49 b4		      eor	#$B4
   1395  f3c2				   noeor
   1396  f3c2		       85 a2		      sta	rand
   1397  f3c4					      ifconst	rand16
   1398  f3c4		       45 ed		      eor	rand16
   1399  f3c6					      endif
      0  f3c6					      RETURN
      1  f3c6					      ifnconst	bankswitch
      2  f3c6		       60		      rts
      3  f3c7				  -	      else
      4  f3c7				  -	      jmp	BS_return
      5  f3c7					      endif
   1401  f3c7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c7
   1403  f3c7				   drawscreen
   1404  f3c7				  -	      ifconst	debugscore
   1405  f3c7				  -	      ldx	#14
   1406  f3c7				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c7				  -
   1408  f3c7				  -	      ifconst	mincycles
   1409  f3c7				  -	      lda	mincycles
   1410  f3c7				  -	      cmp	INTIM
   1411  f3c7				  -	      lda	mincycles
   1412  f3c7				  -	      bcc	nochange
   1413  f3c7				  -	      lda	INTIM
   1414  f3c7				  -	      sta	mincycles
   1415  f3c7				  -nochange
   1416  f3c7				  -	      endif
   1417  f3c7				  -
   1418  f3c7				  -			; cmp #$2B
   1419  f3c7				  -			; bcs no_cycles_left
   1420  f3c7				  -	      bmi	cycles_left
   1421  f3c7				  -	      ldx	#64
   1422  f3c7				  -	      eor	#$ff	;make negative
   1423  f3c7				  -cycles_left
   1424  f3c7				  -	      stx	scorecolor
   1425  f3c7				  -	      and	#$7f	; clear sign bit
   1426  f3c7				  -	      tax
   1427  f3c7				  -	      lda	scorebcd,x
   1428  f3c7				  -	      sta	score+2
   1429  f3c7				  -	      lda	scorebcd1,x
   1430  f3c7				  -	      sta	score+1
   1431  f3c7				  -	      jmp	done_debugscore
   1432  f3c7				  -scorebcd
   1433  f3c7				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c7				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c7				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c7				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c7				  -scorebcd1
   1438  f3c7				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c7				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c7				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c7				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c7				  -done_debugscore
   1443  f3c7					      endif
   1444  f3c7
   1445  f3c7				  -	      ifconst	debugcycles
   1446  f3c7				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c7				  -			; cmp #$2B
   1448  f3c7				  -			; BCC overscan
   1449  f3c7				  -	      bmi	overscan
   1450  f3c7				  -	      sta	COLUBK
   1451  f3c7				  -	      bcs	doneoverscan
   1452  f3c7					      endif
   1453  f3c7
   1454  f3c7				   overscan
   1455  f3c7				  -	      ifconst	interlaced
   1456  f3c7				  -	      PHP
   1457  f3c7				  -	      PLA
   1458  f3c7				  -	      EOR	#4	; flip interrupt bit
   1459  f3c7				  -	      PHA
   1460  f3c7				  -	      PLP
   1461  f3c7				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c7				  -	      TAX		; save it for later
   1463  f3c7					      endif
   1464  f3c7
   1465  f3c7				   overscanloop
   1466  f3c7		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ca		       30 fb		      bmi	overscanloop
   1468  f3cc				   doneoverscan
   1469  f3cc
   1470  f3cc							;do VSYNC
   1471  f3cc
   1472  f3cc				  -	      ifconst	interlaced
   1473  f3cc				  -	      CPX	#4
   1474  f3cc				  -	      BNE	oddframevsync
   1475  f3cc					      endif
   1476  f3cc
   1477  f3cc		       a9 02		      lda	#2
   1478  f3ce		       85 02		      sta	WSYNC
   1479  f3d0		       85 00		      sta	VSYNC
   1480  f3d2		       85 02		      STA	WSYNC
   1481  f3d4		       85 02		      STA	WSYNC
   1482  f3d6		       4a		      lsr
   1483  f3d7		       85 02		      STA	WSYNC
   1484  f3d9		       85 00		      STA	VSYNC
   1485  f3db		       85 01		      sta	VBLANK
   1486  f3dd					      ifnconst	overscan_time
   1487  f3dd		       a9 a5		      lda	#37+128
   1488  f3df				  -	      else
   1489  f3df				  -	      lda	#overscan_time+128
   1490  f3df					      endif
   1491  f3df		       8d 96 02 	      sta	TIM64T
   1492  f3e2
   1493  f3e2				  -	      ifconst	interlaced
   1494  f3e2				  -	      jmp	postsync
   1495  f3e2				  -
   1496  f3e2				  -oddframevsync
   1497  f3e2				  -	      sta	WSYNC
   1498  f3e2				  -
   1499  f3e2				  -	      LDA	($80,X)	; 11 waste
   1500  f3e2				  -	      LDA	($80,X)	; 11 waste
   1501  f3e2				  -	      LDA	($80,X)	; 11 waste
   1502  f3e2				  -
   1503  f3e2				  -	      lda	#2
   1504  f3e2				  -	      sta	VSYNC
   1505  f3e2				  -	      sta	WSYNC
   1506  f3e2				  -	      sta	WSYNC
   1507  f3e2				  -	      sta	WSYNC
   1508  f3e2				  -
   1509  f3e2				  -	      LDA	($80,X)	; 11 waste
   1510  f3e2				  -	      LDA	($80,X)	; 11 waste
   1511  f3e2				  -	      LDA	($80,X)	; 11 waste
   1512  f3e2				  -
   1513  f3e2				  -	      lda	#0
   1514  f3e2				  -	      sta	VSYNC
   1515  f3e2				  -	      sta	VBLANK
   1516  f3e2				  -	      ifnconst	overscan_time
   1517  f3e2				  -	      lda	#37+128
   1518  f3e2				  -	      else
   1519  f3e2				  -	      lda	#overscan_time+128
   1520  f3e2				  -	      endif
   1521  f3e2				  -	      sta	TIM64T
   1522  f3e2				  -
   1523  f3e2				  -postsync
   1524  f3e2					      endif
   1525  f3e2
   1526  f3e2				  -	      ifconst	legacy
   1527  f3e2				  -	      if	legacy < 100
   1528  f3e2				  -	      ldx	#4
   1529  f3e2				  -adjustloop
   1530  f3e2				  -	      lda	player0x,x
   1531  f3e2				  -	      sec
   1532  f3e2				  -	      sbc	#14	;?
   1533  f3e2				  -	      sta	player0x,x
   1534  f3e2				  -	      dex
   1535  f3e2				  -	      bpl	adjustloop
   1536  f3e2				  -	      endif
   1537  f3e2					      endif
   1538  f3e2				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e2				  -	      repeat	($fa-(<*))
   1540  f3e2				  -	      nop
   1541  f3e2				  -	      repend
   1542  f3e2					      endif
   1543  f3e2		       85 02		      sta	WSYNC
   1544  f3e4		       a2 04		      ldx	#4
      0  f3e6					      SLEEP	3
      1  f3e6				   .CYCLES    SET	3
      2  f3e6
      3  f3e6				  -	      IF	.CYCLES < 2
      4  f3e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e6				  -	      ERR
      6  f3e6					      ENDIF
      7  f3e6
      8  f3e6					      IF	.CYCLES & 1
      9  f3e6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e6		       04 00		      nop	0
     11  f3e8				  -	      ELSE
     12  f3e8				  -	      bit	VSYNC
     13  f3e8					      ENDIF
     14  f3e8				   .CYCLES    SET	.CYCLES - 3
     15  f3e8					      ENDIF
     16  f3e8
     17  f3e8				  -	      REPEAT	.CYCLES / 2
     18  f3e8				  -	      nop
     19  f3e8					      REPEND
   1546  f3e8				   HorPosLoop		; 5
   1547  f3e8		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ea		       38		      sec		;+2 11
   1549  f3eb				   DivideLoop
   1550  f3eb		       e9 0f		      sbc	#15
   1551  f3ed		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3ef		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f1		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f3		       85 02		      sta	WSYNC
   1555  f3f5		       ca		      dex
   1556  f3f6		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f8							; 4
   1558  f3f8
   1559  f3f8		       a2 04		      ldx	#4
   1560  f3fa		       b4 9c		      ldy	temp1,X
   1561  f3fc		       b9 58 f3 	      lda	repostable-256,Y
   1562  f3ff		       95 20		      sta	HMP0,X	;+14 18
   1563  f401
   1564  f401		       ca		      dex
   1565  f402		       b4 9c		      ldy	temp1,X
   1566  f404		       b9 58 f3 	      lda	repostable-256,Y
   1567  f407		       95 20		      sta	HMP0,X	;+14 32
   1568  f409
   1569  f409		       ca		      dex
   1570  f40a		       b4 9c		      ldy	temp1,X
   1571  f40c		       b9 58 f3 	      lda	repostable-256,Y
   1572  f40f		       95 20		      sta	HMP0,X	;+14 46
   1573  f411
   1574  f411		       ca		      dex
   1575  f412		       b4 9c		      ldy	temp1,X
   1576  f414		       b9 58 f3 	      lda	repostable-256,Y
   1577  f417		       95 20		      sta	HMP0,X	;+14 60
   1578  f419
   1579  f419		       ca		      dex
   1580  f41a		       b4 9c		      ldy	temp1,X
   1581  f41c		       b9 58 f3 	      lda	repostable-256,Y
   1582  f41f		       95 20		      sta	HMP0,X	;+14 74
   1583  f421
   1584  f421		       85 02		      sta	WSYNC
   1585  f423
   1586  f423		       85 2a		      sta	HMOVE	;+3 3
   1587  f425
   1588  f425
   1589  f425				  -	      ifconst	legacy
   1590  f425				  -	      if	legacy < 100
   1591  f425				  -	      ldx	#4
   1592  f425				  -adjustloop2
   1593  f425				  -	      lda	player0x,x
   1594  f425				  -	      clc
   1595  f425				  -	      adc	#14	;?
   1596  f425				  -	      sta	player0x,x
   1597  f425				  -	      dex
   1598  f425				  -	      bpl	adjustloop2
   1599  f425				  -	      endif
   1600  f425					      endif
   1601  f425
   1602  f425
   1603  f425
   1604  f425
   1605  f425							;set score pointers
   1606  f425		       a7 95		      lax	score+2
   1607  f427		       20 58 f4 	      jsr	scorepointerset
   1608  f42a		       84 9b		      sty	scorepointers+5
   1609  f42c		       86 98		      stx	scorepointers+2
   1610  f42e		       a7 94		      lax	score+1
   1611  f430		       20 58 f4 	      jsr	scorepointerset
   1612  f433		       84 9a		      sty	scorepointers+4
   1613  f435		       86 97		      stx	scorepointers+1
   1614  f437		       a7 93		      lax	score
   1615  f439		       20 58 f4 	      jsr	scorepointerset
   1616  f43c		       84 99		      sty	scorepointers+3
   1617  f43e		       86 96		      stx	scorepointers
   1618  f440
   1619  f440				   vblk
   1620  f440							; run possible vblank bB code
   1621  f440				  -	      ifconst	vblank_bB_code
   1622  f440				  -	      jsr	vblank_bB_code
   1623  f440					      endif
   1624  f440				   vblk2
   1625  f440		       ad 84 02 	      LDA	INTIM
   1626  f443		       30 fb		      bmi	vblk2
   1627  f445		       4c 34 f0 	      jmp	kernel
   1628  f448
   1629  f448
   1630  f448		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f451		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f458				   repostable
   1633  f458
   1634  f458				   scorepointerset
   1635  f458		       29 0f		      and	#$0F
   1636  f45a		       0a		      asl
   1637  f45b		       0a		      asl
   1638  f45c		       0a		      asl
   1639  f45d		       69 9c		      adc	#<scoretable
   1640  f45f		       a8		      tay
   1641  f460		       8a		      txa
   1642  f461							; and #$F0
   1643  f461							; lsr
   1644  f461		       4b f0		      asr	#$F0
   1645  f463		       69 9c		      adc	#<scoretable
   1646  f465		       aa		      tax
   1647  f466		       60		      rts
   1648  f467				   game
   1649  f467				   .
   1650  f467							; 
   1651  f467
   1652  f467				   .
   1653  f467							; 
   1654  f467
   1655  f467				   .
   1656  f467							; 
   1657  f467
   1658  f467				   .
   1659  f467							; 
   1660  f467
   1661  f467				   .
   1662  f467							; 
   1663  f467
   1664  f467				   .
   1665  f467							; 
   1666  f467
   1667  f467				   .
   1668  f467							; 
   1669  f467
   1670  f467				   .
   1671  f467							; 
   1672  f467
   1673  f467				   .
   1674  f467							; 
   1675  f467
   1676  f467				   .
   1677  f467							; 
   1678  f467
   1679  f467				   .
   1680  f467							; 
   1681  f467
   1682  f467				   .
   1683  f467							; 
   1684  f467
   1685  f467				   .
   1686  f467							; 
   1687  f467
   1688  f467				   .
   1689  f467							; 
   1690  f467
   1691  f467				   .
   1692  f467							; 
   1693  f467
   1694  f467				   .
   1695  f467							; 
   1696  f467
   1697  f467				   .
   1698  f467							; 
   1699  f467
   1700  f467				   .
   1701  f467							; 
   1702  f467
   1703  f467				   .
   1704  f467							; 
   1705  f467
   1706  f467				   .
   1707  f467							; 
   1708  f467
   1709  f467				   .
   1710  f467							; 
   1711  f467
   1712  f467				   .
   1713  f467							; 
   1714  f467
   1715  f467				   .
   1716  f467							; 
   1717  f467
   1718  f467				   .
   1719  f467							; 
   1720  f467
   1721  f467				   .
   1722  f467							; 
   1723  f467
   1724  f467				   .
   1725  f467							; 
   1726  f467
   1727  f467				   .
   1728  f467							; 
   1729  f467
   1730  f467				   .
   1731  f467							; 
   1732  f467
   1733  f467				   .
   1734  f467							; 
   1735  f467
   1736  f467				   .
   1737  f467							; 
   1738  f467
   1739  f467				   .
   1740  f467							; 
   1741  f467
   1742  f467				   .
   1743  f467							; 
   1744  f467
   1745  f467				   .
   1746  f467							; 
   1747  f467
   1748  f467				   .
   1749  f467							; 
   1750  f467
   1751  f467				   .
   1752  f467							; 
   1753  f467
   1754  f467				   .
   1755  f467							; 
   1756  f467
   1757  f467				   .
   1758  f467							; 
   1759  f467
   1760  f467				   .
   1761  f467							; 
   1762  f467
   1763  f467				   .
   1764  f467							; 
   1765  f467
   1766  f467				   .
   1767  f467							; 
   1768  f467
   1769  f467				   .
   1770  f467							; 
   1771  f467
   1772  f467				   .
   1773  f467							; 
   1774  f467
   1775  f467				   .
   1776  f467							; 
   1777  f467
   1778  f467				   .
   1779  f467							; 
   1780  f467
   1781  f467				   .
   1782  f467							; 
   1783  f467
   1784  f467				   .
   1785  f467							; 
   1786  f467
   1787  f467				   .
   1788  f467							; 
   1789  f467
   1790  f467				   .
   1791  f467							; 
   1792  f467
   1793  f467				   .
   1794  f467							; 
   1795  f467
   1796  f467				   .
   1797  f467							; 
   1798  f467
   1799  f467				   .
   1800  f467							; 
   1801  f467
   1802  f467				   .
   1803  f467							; 
   1804  f467
   1805  f467				   .
   1806  f467							; 
   1807  f467
   1808  f467				   .
   1809  f467							; 
   1810  f467
   1811  f467				   .
   1812  f467							; 
   1813  f467
   1814  f467				   .
   1815  f467							; 
   1816  f467
   1817  f467				   .
   1818  f467							; 
   1819  f467
   1820  f467				   .L00 		;  dim _Master_Counter  =  a
   1821  f467
   1822  f467				   .L01 		;  dim _Frame_Counter	=  b
   1823  f467
   1824  f467				   .
   1825  f467							; 
   1826  f467
   1827  f467				   .
   1828  f467							; 
   1829  f467
   1830  f467				   .
   1831  f467							; 
   1832  f467
   1833  f467				   .
   1834  f467							; 
   1835  f467
   1836  f467				   .L02 		;  dim _Ch0_Sound  =  c
   1837  f467
   1838  f467				   .L03 		;  dim _Ch0_Counter  =  d
   1839  f467
   1840  f467				   .L04 		;  dim _C0  =	e
   1841  f467
   1842  f467				   .L05 		;  dim _V0  =	f
   1843  f467
   1844  f467				   .L06 		;  dim _F0  =	g
   1845  f467
   1846  f467				   .
   1847  f467							; 
   1848  f467
   1849  f467				   .
   1850  f467							; 
   1851  f467
   1852  f467				   .
   1853  f467							; 
   1854  f467
   1855  f467				   .
   1856  f467							; 
   1857  f467
   1858  f467				   .
   1859  f467							; 
   1860  f467
   1861  f467				   .
   1862  f467							; 
   1863  f467
   1864  f467				   .L07 		;  dim _Pause_Counter_Tmp  =  h
   1865  f467
   1866  f467				   .
   1867  f467							; 
   1868  f467
   1869  f467				   .
   1870  f467							; 
   1871  f467
   1872  f467				   .
   1873  f467							; 
   1874  f467
   1875  f467				   .
   1876  f467							; 
   1877  f467
   1878  f467				   .
   1879  f467							; 
   1880  f467
   1881  f467				   .
   1882  f467							; 
   1883  f467
   1884  f467				   .L08 		;  dim _AP_2_Sec_Score_Flip  =  i
   1885  f467
   1886  f467				   .
   1887  f467							; 
   1888  f467
   1889  f467				   .
   1890  f467							; 
   1891  f467
   1892  f467				   .
   1893  f467							; 
   1894  f467
   1895  f467				   .
   1896  f467							; 
   1897  f467
   1898  f467				   .
   1899  f467							; 
   1900  f467
   1901  f467				   .
   1902  f467							; 
   1903  f467
   1904  f467				   .L09 		;  dim _Pause_Mem_Color_Tmp  =  i
   1905  f467
   1906  f467				   .
   1907  f467							; 
   1908  f467
   1909  f467				   .
   1910  f467							; 
   1911  f467
   1912  f467				   .
   1913  f467							; 
   1914  f467
   1915  f467				   .
   1916  f467							; 
   1917  f467
   1918  f467				   .
   1919  f467							; 
   1920  f467
   1921  f467				   .
   1922  f467							; 
   1923  f467
   1924  f467				   .L010		;  dim _AP_Dir_Counter  =  j
   1925  f467
   1926  f467				   .
   1927  f467							; 
   1928  f467
   1929  f467				   .
   1930  f467							; 
   1931  f467
   1932  f467				   .
   1933  f467							; 
   1934  f467
   1935  f467				   .
   1936  f467							; 
   1937  f467
   1938  f467				   .
   1939  f467							; 
   1940  f467
   1941  f467				   .
   1942  f467							; 
   1943  f467
   1944  f467				   .L011		;  dim _Pause_Color_Tmp  =  j
   1945  f467
   1946  f467				   .
   1947  f467							; 
   1948  f467
   1949  f467				   .
   1950  f467							; 
   1951  f467
   1952  f467				   .
   1953  f467							; 
   1954  f467
   1955  f467				   .
   1956  f467							; 
   1957  f467
   1958  f467				   .
   1959  f467							; 
   1960  f467
   1961  f467				   .L012		;  dim _BitOp_02  =  r
   1962  f467
   1963  f467				   .
   1964  f467							; 
   1965  f467
   1966  f467				   .
   1967  f467							; 
   1968  f467
   1969  f467				   .
   1970  f467							; 
   1971  f467
   1972  f467				   .
   1973  f467							; 
   1974  f467
   1975  f467				   .L013		;  dim _Bit0_BW_Mem  =  r
   1976  f467
   1977  f467				   .
   1978  f467							; 
   1979  f467
   1980  f467				   .
   1981  f467							; 
   1982  f467
   1983  f467				   .
   1984  f467							; 
   1985  f467
   1986  f467				   .
   1987  f467							; 
   1988  f467
   1989  f467				   .L014		;  dim _Bit1_BW_Check	=  r
   1990  f467
   1991  f467				   .
   1992  f467							; 
   1993  f467
   1994  f467				   .
   1995  f467							; 
   1996  f467
   1997  f467				   .
   1998  f467							; 
   1999  f467
   2000  f467				   .
   2001  f467							; 
   2002  f467
   2003  f467				   .L015		;  dim _Bit2_Pause_Clr_Scheme	=  r
   2004  f467
   2005  f467				   .
   2006  f467							; 
   2007  f467
   2008  f467				   .
   2009  f467							; 
   2010  f467
   2011  f467				   .
   2012  f467							; 
   2013  f467
   2014  f467				   .
   2015  f467							; 
   2016  f467
   2017  f467				   .L016		;  dim _Bit3_AP_P0_Dir  =  r
   2018  f467
   2019  f467				   .
   2020  f467							; 
   2021  f467
   2022  f467				   .
   2023  f467							; 
   2024  f467
   2025  f467				   .
   2026  f467							; 
   2027  f467
   2028  f467				   .
   2029  f467							; 
   2030  f467
   2031  f467				   .
   2032  f467							; 
   2033  f467
   2034  f467				   .
   2035  f467							; 
   2036  f467
   2037  f467				   .
   2038  f467							; 
   2039  f467
   2040  f467				   .
   2041  f467							; 
   2042  f467
   2043  f467				   .L017		;  dim _sc1  =  score
   2044  f467
   2045  f467				   .L018		;  dim _sc2  =  score + 1
   2046  f467
   2047  f467				   .L019		;  dim _sc3  =  score + 2
   2048  f467
   2049  f467				   .
   2050  f467							; 
   2051  f467
   2052  f467				   .
   2053  f467							; 
   2054  f467
   2055  f467				   .
   2056  f467							; 
   2057  f467
   2058  f467				   .
   2059  f467							; 
   2060  f467
   2061  f467				   .
   2062  f467							; 
   2063  f467
   2064  f467				   .
   2065  f467							; 
   2066  f467
   2067  f467				   .
   2068  f467							; 
   2069  f467
   2070  f467				   .L020		;  dim _Score1_Mem  =	s
   2071  f467
   2072  f467				   .L021		;  dim _Score2_Mem  =	t
   2073  f467
   2074  f467				   .L022		;  dim _Score3_Mem  =	u
   2075  f467
   2076  f467				   .
   2077  f467							; 
   2078  f467
   2079  f467				   .
   2080  f467							; 
   2081  f467
   2082  f467				   .
   2083  f467							; 
   2084  f467
   2085  f467				   .
   2086  f467							; 
   2087  f467
   2088  f467				   .L023		;  dim _High_Score1  =  v
   2089  f467
   2090  f467				   .L024		;  dim _High_Score2  =  w
   2091  f467
   2092  f467				   .L025		;  dim _High_Score3  =  x
   2093  f467
   2094  f467				   .
   2095  f467							; 
   2096  f467
   2097  f467				   .
   2098  f467							; 
   2099  f467
   2100  f467				   .
   2101  f467							; 
   2102  f467
   2103  f467				   .
   2104  f467							; 
   2105  f467
   2106  f467				   .L026		;  dim _BitOp_01  =  y
   2107  f467
   2108  f467				   .L027		;  dim _Bit0_Reset_Restrainer	=  y
   2109  f467
   2110  f467				   .L028		;  dim _Bit1_FireB_Restrainer	=  y
   2111  f467
   2112  f467				   .L029		;  dim _Bit2_Game_Control  =  y
   2113  f467
   2114  f467				   .L030		;  dim _Bit3_Auto_Play  =  y
   2115  f467
   2116  f467				   .L031		;  dim _Bit6_Swap_Scores  =  y
   2117  f467
   2118  f467				   .L032		;  dim _Bit7_Last_Life  =  y
   2119  f467
   2120  f467				   .
   2121  f467							; 
   2122  f467
   2123  f467				   .
   2124  f467							; 
   2125  f467
   2126  f467				   .
   2127  f467							; 
   2128  f467
   2129  f467				   .
   2130  f467							; 
   2131  f467
   2132  f467				   .L033		;  dim rand16	=  z
   2133  f467
   2134  f467				   .
   2135  f467							; 
   2136  f467
   2137  f467				   .
   2138  f467							; 
   2139  f467
   2140  f467				   .
   2141  f467							; 
   2142  f467
   2143  f467				   .
   2144  f467							; 
   2145  f467
   2146  f467				   .
   2147  f467							; 
   2148  f467
   2149  f467				   .
   2150  f467							; 
   2151  f467
   2152  f467				   .
   2153  f467							; 
   2154  f467
   2155  f467				   .L034		;  const pfscore  =  1
   2156  f467
   2157  f467				   .
   2158  f467							; 
   2159  f467
   2160  f467				   .
   2161  f467							; 
   2162  f467
   2163  f467				   .
   2164  f467							; 
   2165  f467
   2166  f467				   .
   2167  f467							; 
   2168  f467
   2169  f467				   .
   2170  f467							; 
   2171  f467
   2172  f467				   .
   2173  f467							; 
   2174  f467
   2175  f467				   .
   2176  f467							; 
   2177  f467
   2178  f467				   .
   2179  f467							; 
   2180  f467
   2181  f467				   .
   2182  f467							; 
   2183  f467
   2184  f467				   .L035		;  const _P_Edge_Top  =  10
   2185  f467
   2186  f467				   .L036		;  const _P_Edge_Bottom  =  83
   2187  f467
   2188  f467				   .L037		;  const _P_Edge_Left	=  1
   2189  f467
   2190  f467				   .L038		;  const _P_Edge_Right  =  153
   2191  f467
   2192  f467				   .
   2193  f467							; 
   2194  f467
   2195  f467				   .
   2196  f467							; 
   2197  f467
   2198  f467				   .
   2199  f467							; 
   2200  f467
   2201  f467				   .
   2202  f467							; 
   2203  f467
   2204  f467				   .
   2205  f467							; 
   2206  f467
   2207  f467				   .
   2208  f467							; 
   2209  f467
   2210  f467				   .
   2211  f467							; 
   2212  f467
   2213  f467				   .
   2214  f467							; 
   2215  f467
   2216  f467				   .
   2217  f467							; 
   2218  f467
   2219  f467				   .
   2220  f467							; 
   2221  f467
   2222  f467				   .
   2223  f467							; 
   2224  f467
   2225  f467				   .__Start_Restart
   2226  f467							; __Start_Restart
   2227  f467
   2228  f467				   .
   2229  f467							; 
   2230  f467
   2231  f467				   .
   2232  f467							; 
   2233  f467
   2234  f467				   .
   2235  f467							; 
   2236  f467
   2237  f467				   .
   2238  f467							; 
   2239  f467
   2240  f467				   .
   2241  f467							; 
   2242  f467
   2243  f467				   .
   2244  f467							; 
   2245  f467
   2246  f467				   .L039		;  AUDV0  =  0  :  AUDV1  =  0
   2247  f467
   2248  f467		       a9 00		      LDA	#0
   2249  f469		       85 19		      STA	AUDV0
   2250  f46b		       85 1a		      STA	AUDV1
   2251  f46d				   .
   2252  f46d							; 
   2253  f46d
   2254  f46d				   .
   2255  f46d							; 
   2256  f46d
   2257  f46d				   .
   2258  f46d							; 
   2259  f46d
   2260  f46d				   .
   2261  f46d							; 
   2262  f46d
   2263  f46d				   .
   2264  f46d							; 
   2265  f46d
   2266  f46d				   .
   2267  f46d							; 
   2268  f46d
   2269  f46d				   .
   2270  f46d							; 
   2271  f46d
   2272  f46d				   .
   2273  f46d							; 
   2274  f46d
   2275  f46d				   .
   2276  f46d							; 
   2277  f46d
   2278  f46d				   .
   2279  f46d							; 
   2280  f46d
   2281  f46d				   .
   2282  f46d							; 
   2283  f46d
   2284  f46d				   .L040		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   2285  f46d
   2286  f46d		       a9 00		      LDA	#0
   2287  f46f		       85 d4		      STA	a
   2288  f471		       85 d5		      STA	b
   2289  f473		       85 d6		      STA	c
   2290  f475		       85 d7		      STA	d
   2291  f477		       85 d8		      STA	e
   2292  f479		       85 d9		      STA	f
   2293  f47b		       85 da		      STA	g
   2294  f47d		       85 db		      STA	h
   2295  f47f		       85 dc		      STA	i
   2296  f481				   .L041		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2297  f481
   2298  f481		       a9 00		      LDA	#0
   2299  f483		       85 dd		      STA	j
   2300  f485		       85 de		      STA	k
   2301  f487		       85 df		      STA	l
   2302  f489		       85 e0		      STA	m
   2303  f48b		       85 e1		      STA	n
   2304  f48d		       85 e2		      STA	o
   2305  f48f		       85 e3		      STA	p
   2306  f491		       85 e4		      STA	q
   2307  f493		       85 e5		      STA	r
   2308  f495				   .L042		;  s  =  0  :	t  =  0  :  u  =  0
   2309  f495
   2310  f495		       a9 00		      LDA	#0
   2311  f497		       85 e6		      STA	s
   2312  f499		       85 e7		      STA	t
   2313  f49b		       85 e8		      STA	u
   2314  f49d				   .
   2315  f49d							; 
   2316  f49d
   2317  f49d				   .
   2318  f49d							; 
   2319  f49d
   2320  f49d				   .
   2321  f49d							; 
   2322  f49d
   2323  f49d				   .
   2324  f49d							; 
   2325  f49d
   2326  f49d				   .
   2327  f49d							; 
   2328  f49d
   2329  f49d				   .
   2330  f49d							; 
   2331  f49d
   2332  f49d				   .
   2333  f49d							; 
   2334  f49d
   2335  f49d				   .
   2336  f49d							; 
   2337  f49d
   2338  f49d				   .
   2339  f49d							; 
   2340  f49d
   2341  f49d				   .L043		;  _BitOp_01  =  _BitOp_01  &	%00000100
   2342  f49d
   2343  f49d		       a5 ec		      LDA	_BitOp_01
   2344  f49f		       29 04		      AND	#%00000100
   2345  f4a1		       85 ec		      STA	_BitOp_01
   2346  f4a3				   .
   2347  f4a3							; 
   2348  f4a3
   2349  f4a3				   .
   2350  f4a3							; 
   2351  f4a3
   2352  f4a3				   .
   2353  f4a3							; 
   2354  f4a3
   2355  f4a3				   .
   2356  f4a3							; 
   2357  f4a3
   2358  f4a3				   .
   2359  f4a3							; 
   2360  f4a3
   2361  f4a3				   .
   2362  f4a3							; 
   2363  f4a3
   2364  f4a3				   .L044		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200
   2365  f4a3
   2366  f4a3		       a9 c8		      LDA	#200
   2367  f4a5		       85 85		      STA	player0y
   2368  f4a7		       85 86		      STA	player1y
   2369  f4a9		       85 91		      STA	missile0y
   2370  f4ab				   .
   2371  f4ab							; 
   2372  f4ab
   2373  f4ab				   .
   2374  f4ab							; 
   2375  f4ab
   2376  f4ab				   .
   2377  f4ab							; 
   2378  f4ab
   2379  f4ab				   .
   2380  f4ab							; 
   2381  f4ab
   2382  f4ab				   .
   2383  f4ab							; 
   2384  f4ab
   2385  f4ab				   .
   2386  f4ab							; 
   2387  f4ab
   2388  f4ab				   .
   2389  f4ab							; 
   2390  f4ab
   2391  f4ab				   .
   2392  f4ab							; 
   2393  f4ab
   2394  f4ab				   .
   2395  f4ab							; 
   2396  f4ab
   2397  f4ab				   .
   2398  f4ab							; 
   2399  f4ab
   2400  f4ab				   .L045		;  if _Bit2_Game_Control{2} then goto __Main_Loop_Setup
   2401  f4ab
   2402  f4ab		       a5 ec		      LDA	_Bit2_Game_Control
   2403  f4ad		       29 04		      AND	#4
   2404  f4af		       f0 03		      BEQ	.skipL045
   2405  f4b1				   .condpart0
   2406  f4b1		       4c 4b f5 	      jmp	.__Main_Loop_Setup
   2407  f4b4
   2408  f4b4				   .skipL045
   2409  f4b4				   .
   2410  f4b4							; 
   2411  f4b4
   2412  f4b4				   .
   2413  f4b4							; 
   2414  f4b4
   2415  f4b4				   .
   2416  f4b4							; 
   2417  f4b4
   2418  f4b4				   .
   2419  f4b4							; 
   2420  f4b4
   2421  f4b4				   .
   2422  f4b4							; 
   2423  f4b4
   2424  f4b4				   .
   2425  f4b4							; 
   2426  f4b4
   2427  f4b4				   .
   2428  f4b4							; 
   2429  f4b4
   2430  f4b4				   .
   2431  f4b4							; 
   2432  f4b4
   2433  f4b4				   .
   2434  f4b4							; 
   2435  f4b4
   2436  f4b4				   .
   2437  f4b4							; 
   2438  f4b4
   2439  f4b4				   .
   2440  f4b4							; 
   2441  f4b4
   2442  f4b4				   .__Setup_Title_Screen
   2443  f4b4							; __Setup_Title_Screen
   2444  f4b4
   2445  f4b4				   .
   2446  f4b4							; 
   2447  f4b4
   2448  f4b4				   .
   2449  f4b4							; 
   2450  f4b4
   2451  f4b4				   .
   2452  f4b4							; 
   2453  f4b4
   2454  f4b4				   .
   2455  f4b4							; 
   2456  f4b4
   2457  f4b4				   .
   2458  f4b4							; 
   2459  f4b4
   2460  f4b4				   .
   2461  f4b4							; 
   2462  f4b4
   2463  f4b4				   .L046		;  pfscore1  =  0  :  scorecolor  =  $20
   2464  f4b4
   2465  f4b4		       a9 00		      LDA	#0
   2466  f4b6		       85 f2		      STA	pfscore1
   2467  f4b8		       a9 20		      LDA	#$20
   2468  f4ba		       85 a3		      STA	scorecolor
   2469  f4bc				   .
   2470  f4bc							; 
   2471  f4bc
   2472  f4bc				   .
   2473  f4bc							; 
   2474  f4bc
   2475  f4bc				   .
   2476  f4bc							; 
   2477  f4bc
   2478  f4bc				   .
   2479  f4bc							; 
   2480  f4bc
   2481  f4bc				   .
   2482  f4bc							; 
   2483  f4bc
   2484  f4bc				   .
   2485  f4bc							; 
   2486  f4bc
   2487  f4bc				   .L047		;  COLUBK  =  $20
   2488  f4bc
   2489  f4bc		       a9 20		      LDA	#$20
   2490  f4be		       85 09		      STA	COLUBK
   2491  f4c0				   .
   2492  f4c0							; 
   2493  f4c0
   2494  f4c0				   .
   2495  f4c0							; 
   2496  f4c0
   2497  f4c0				   .
   2498  f4c0							; 
   2499  f4c0
   2500  f4c0				   .
   2501  f4c0							; 
   2502  f4c0
   2503  f4c0				   .
   2504  f4c0							; 
   2505  f4c0
   2506  f4c0				   .
   2507  f4c0							; 
   2508  f4c0
   2509  f4c0				   .
   2510  f4c0							; 
   2511  f4c0
   2512  f4c0				   .
   2513  f4c0							; 
   2514  f4c0
   2515  f4c0				   .
   2516  f4c0							; 
   2517  f4c0
   2518  f4c0				   .
   2519  f4c0							; 
   2520  f4c0
   2521  f4c0				   .
   2522  f4c0							; 
   2523  f4c0
   2524  f4c0				   .L048		;  _Bit0_Reset_Restrainer{0}  =  1
   2525  f4c0
   2526  f4c0		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2527  f4c2		       09 01		      ORA	#1
   2528  f4c4		       85 ec		      STA	_Bit0_Reset_Restrainer
   2529  f4c6				   .
   2530  f4c6							; 
   2531  f4c6
   2532  f4c6				   .
   2533  f4c6							; 
   2534  f4c6
   2535  f4c6				   .
   2536  f4c6							; 
   2537  f4c6
   2538  f4c6				   .
   2539  f4c6							; 
   2540  f4c6
   2541  f4c6				   .
   2542  f4c6							; 
   2543  f4c6
   2544  f4c6				   .
   2545  f4c6							; 
   2546  f4c6
   2547  f4c6				   .L049		;  playfield:
   2548  f4c6
   2549  f4c6				  -	      ifconst	pfres
   2550  f4c6				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2551  f4c6					      else
   2552  f4c6		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2553  f4c8					      endif
   2554  f4c8		       4c f7 f4 	      jmp	pflabel0
   2555  f4cb				   PF_data0
   2556  f4cb		       e9 6a		      .byte.b	%11101001, %01101010
   2557  f4cd					      if	(pfwidth>2)
   2558  f4cd		       c9 ea		      .byte.b	%11001001, %11101010
   2559  f4cf					      endif
   2560  f4cf		       49 2a		      .byte.b	%01001001, %00101010
   2561  f4d1					      if	(pfwidth>2)
   2562  f4d1		       a9 4a		      .byte.b	%10101001, %01001010
   2563  f4d3					      endif
   2564  f4d3		       4d 66		      .byte.b	%01001101, %01100110
   2565  f4d5					      if	(pfwidth>2)
   2566  f4d5		       cd 4a		      .byte.b	%11001101, %01001010
   2567  f4d7					      endif
   2568  f4d7		       4b 2a		      .byte.b	%01001011, %00101010
   2569  f4d9					      if	(pfwidth>2)
   2570  f4d9		       ab 4a		      .byte.b	%10101011, %01001010
   2571  f4db					      endif
   2572  f4db		       49 6a		      .byte.b	%01001001, %01101010
   2573  f4dd					      if	(pfwidth>2)
   2574  f4dd		       a9 4e		      .byte.b	%10101001, %01001110
   2575  f4df					      endif
   2576  f4df		       00 00		      .byte.b	%00000000, %00000000
   2577  f4e1					      if	(pfwidth>2)
   2578  f4e1		       00 00		      .byte.b	%00000000, %00000000
   2579  f4e3					      endif
   2580  f4e3		       08 bd		      .byte.b	%00001000, %10111101
   2581  f4e5					      if	(pfwidth>2)
   2582  f4e5		       c8 07		      .byte.b	%11001000, %00000111
   2583  f4e7					      endif
   2584  f4e7		       08 a5		      .byte.b	%00001000, %10100101
   2585  f4e9					      if	(pfwidth>2)
   2586  f4e9		       28 09		      .byte.b	%00101000, %00001001
   2587  f4eb					      endif
   2588  f4eb		       08 a5		      .byte.b	%00001000, %10100101
   2589  f4ed					      if	(pfwidth>2)
   2590  f4ed		       88 09		      .byte.b	%10001000, %00001001
   2591  f4ef					      endif
   2592  f4ef		       0a a5		      .byte.b	%00001010, %10100101
   2593  f4f1					      if	(pfwidth>2)
   2594  f4f1		       48 09		      .byte.b	%01001000, %00001001
   2595  f4f3					      endif
   2596  f4f3		       0d bd		      .byte.b	%00001101, %10111101
   2597  f4f5					      if	(pfwidth>2)
   2598  f4f5		       2e 07		      .byte.b	%00101110, %00000111
   2599  f4f7					      endif
   2600  f4f7				   pflabel0
   2601  f4f7		       bd cb f4 	      lda	PF_data0,x
   2602  f4fa		       95 a4		      sta	playfield,x
   2603  f4fc		       ca		      dex
   2604  f4fd		       10 f8		      bpl	pflabel0
   2605  f4ff				   .
   2606  f4ff							; 
   2607  f4ff
   2608  f4ff				   .
   2609  f4ff							; 
   2610  f4ff
   2611  f4ff				   .
   2612  f4ff							; 
   2613  f4ff
   2614  f4ff				   .
   2615  f4ff							; 
   2616  f4ff
   2617  f4ff				   .
   2618  f4ff							; 
   2619  f4ff
   2620  f4ff				   .
   2621  f4ff							; 
   2622  f4ff
   2623  f4ff				   .
   2624  f4ff							; 
   2625  f4ff
   2626  f4ff				   .
   2627  f4ff							; 
   2628  f4ff
   2629  f4ff				   .
   2630  f4ff							; 
   2631  f4ff
   2632  f4ff				   .
   2633  f4ff							; 
   2634  f4ff
   2635  f4ff				   .
   2636  f4ff							; 
   2637  f4ff
   2638  f4ff				   .__Title_Screen_Loop
   2639  f4ff							; __Title_Screen_Loop
   2640  f4ff
   2641  f4ff				   .
   2642  f4ff							; 
   2643  f4ff
   2644  f4ff				   .
   2645  f4ff							; 
   2646  f4ff
   2647  f4ff				   .
   2648  f4ff							; 
   2649  f4ff
   2650  f4ff				   .
   2651  f4ff							; 
   2652  f4ff
   2653  f4ff				   .
   2654  f4ff							; 
   2655  f4ff
   2656  f4ff				   .
   2657  f4ff							; 
   2658  f4ff
   2659  f4ff				   .
   2660  f4ff							; 
   2661  f4ff
   2662  f4ff				   .L050		;  COLUPF  =  $D8
   2663  f4ff
   2664  f4ff		       a9 d8		      LDA	#$D8
   2665  f501		       85 08		      STA	COLUPF
   2666  f503				   .
   2667  f503							; 
   2668  f503
   2669  f503				   .
   2670  f503							; 
   2671  f503
   2672  f503				   .
   2673  f503							; 
   2674  f503
   2675  f503				   .
   2676  f503							; 
   2677  f503
   2678  f503				   .
   2679  f503							; 
   2680  f503
   2681  f503				   .
   2682  f503							; 
   2683  f503
   2684  f503				   .
   2685  f503							; 
   2686  f503
   2687  f503				   .
   2688  f503							; 
   2689  f503
   2690  f503				   .
   2691  f503							; 
   2692  f503
   2693  f503				   .
   2694  f503							; 
   2695  f503
   2696  f503				   .
   2697  f503							; 
   2698  f503
   2699  f503				   .
   2700  f503							; 
   2701  f503
   2702  f503				   .
   2703  f503							; 
   2704  f503
   2705  f503				   .L051		;  _Master_Counter  =	_Master_Counter  +  1
   2706  f503
   2707  f503		       e6 d4		      INC	_Master_Counter
   2708  f505				   .
   2709  f505							; 
   2710  f505
   2711  f505				   .
   2712  f505							; 
   2713  f505
   2714  f505				   .
   2715  f505							; 
   2716  f505
   2717  f505				   .
   2718  f505							; 
   2719  f505
   2720  f505				   .L052		;  if _Master_Counter	<  60 then goto __TS_AP_Skip
   2721  f505
   2722  f505		       a5 d4		      LDA	_Master_Counter
   2723  f507		       c9 3c		      CMP	#60
   2724  f509		       b0 03		      BCS	.skipL052
   2725  f50b				   .condpart1
   2726  f50b		       4c 23 f5 	      jmp	.__TS_AP_Skip
   2727  f50e
   2728  f50e				   .skipL052
   2729  f50e				   .
   2730  f50e							; 
   2731  f50e
   2732  f50e				   .
   2733  f50e							; 
   2734  f50e
   2735  f50e				   .
   2736  f50e							; 
   2737  f50e
   2738  f50e				   .
   2739  f50e							; 
   2740  f50e
   2741  f50e				   .L053		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   2742  f50e
   2743  f50e		       e6 d5		      INC	_Frame_Counter
   2744  f510		       a9 00		      LDA	#0
   2745  f512		       85 d4		      STA	_Master_Counter
   2746  f514				   .
   2747  f514							; 
   2748  f514
   2749  f514				   .
   2750  f514							; 
   2751  f514
   2752  f514				   .
   2753  f514							; 
   2754  f514
   2755  f514				   .
   2756  f514							; 
   2757  f514
   2758  f514				   .
   2759  f514							; 
   2760  f514
   2761  f514				   .
   2762  f514							; 
   2763  f514
   2764  f514				   .
   2765  f514							; 
   2766  f514
   2767  f514				   .L054		;  if _Frame_Counter  >  9 then _Bit3_Auto_Play{3}  =	1  :  goto __Main_Loop_Setup
   2768  f514
   2769  f514		       a9 09		      LDA	#9
   2770  f516		       c5 d5		      CMP	_Frame_Counter
   2771  f518		       b0 09		      BCS	.skipL054
   2772  f51a				   .condpart2
   2773  f51a		       a5 ec		      LDA	_Bit3_Auto_Play
   2774  f51c		       09 08		      ORA	#8
   2775  f51e		       85 ec		      STA	_Bit3_Auto_Play
   2776  f520		       4c 4b f5 	      jmp	.__Main_Loop_Setup
   2777  f523
   2778  f523				   .skipL054
   2779  f523				   .
   2780  f523							; 
   2781  f523
   2782  f523				   .__TS_AP_Skip
   2783  f523							; __TS_AP_Skip
   2784  f523
   2785  f523				   .
   2786  f523							; 
   2787  f523
   2788  f523				   .
   2789  f523							; 
   2790  f523
   2791  f523				   .
   2792  f523							; 
   2793  f523
   2794  f523				   .
   2795  f523							; 
   2796  f523
   2797  f523				   .
   2798  f523							; 
   2799  f523
   2800  f523				   .
   2801  f523							; 
   2802  f523
   2803  f523				   .
   2804  f523							; 
   2805  f523
   2806  f523				   .L055		;  drawscreen
   2807  f523
   2808  f523		       20 c7 f3 	      jsr	drawscreen
   2809  f526				   .
   2810  f526							; 
   2811  f526
   2812  f526				   .
   2813  f526							; 
   2814  f526
   2815  f526				   .
   2816  f526							; 
   2817  f526
   2818  f526				   .
   2819  f526							; 
   2820  f526
   2821  f526				   .
   2822  f526							; 
   2823  f526
   2824  f526				   .
   2825  f526							; 
   2826  f526
   2827  f526				   .
   2828  f526							; 
   2829  f526
   2830  f526				   .
   2831  f526							; 
   2832  f526
   2833  f526				   .
   2834  f526							; 
   2835  f526
   2836  f526				   .
   2837  f526							; 
   2838  f526
   2839  f526				   .
   2840  f526							; 
   2841  f526
   2842  f526				   .
   2843  f526							; 
   2844  f526
   2845  f526				   .
   2846  f526							; 
   2847  f526
   2848  f526				   .
   2849  f526							; 
   2850  f526
   2851  f526				   .L056		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Title_Screen_Loop
   2852  f526
   2853  f526		       a9 01		      lda	#1
   2854  f528		       2c 82 02 	      bit	SWCHB
   2855  f52b		       f0 0d		      BEQ	.skipL056
   2856  f52d				   .condpart3
   2857  f52d		       24 0c		      bit	INPT4
   2858  f52f		       10 09		      BPL	.skip3then
   2859  f531				   .condpart4
   2860  f531		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2861  f533		       29 fe		      AND	#254
   2862  f535		       85 ec		      STA	_Bit0_Reset_Restrainer
   2863  f537		       4c ff f4 	      jmp	.__Title_Screen_Loop
   2864  f53a
   2865  f53a				   .skip3then
   2866  f53a				   .skipL056
   2867  f53a				   .
   2868  f53a							; 
   2869  f53a
   2870  f53a				   .
   2871  f53a							; 
   2872  f53a
   2873  f53a				   .
   2874  f53a							; 
   2875  f53a
   2876  f53a				   .
   2877  f53a							; 
   2878  f53a
   2879  f53a				   .
   2880  f53a							; 
   2881  f53a
   2882  f53a				   .L057		;  if _Bit0_Reset_Restrainer{0} then goto __Title_Screen_Loop
   2883  f53a
   2884  f53a		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   2885  f53c		       4a		      LSR
   2886  f53d		       90 03		      BCC	.skipL057
   2887  f53f				   .condpart5
   2888  f53f		       4c ff f4 	      jmp	.__Title_Screen_Loop
   2889  f542
   2890  f542				   .skipL057
   2891  f542				   .
   2892  f542							; 
   2893  f542
   2894  f542				   .
   2895  f542							; 
   2896  f542
   2897  f542				   .
   2898  f542							; 
   2899  f542
   2900  f542				   .
   2901  f542							; 
   2902  f542
   2903  f542				   .L058		;  _Bit2_Game_Control{2}  =  1
   2904  f542
   2905  f542		       a5 ec		      LDA	_Bit2_Game_Control
   2906  f544		       09 04		      ORA	#4
   2907  f546		       85 ec		      STA	_Bit2_Game_Control
   2908  f548				   .
   2909  f548							; 
   2910  f548
   2911  f548				   .
   2912  f548							; 
   2913  f548
   2914  f548				   .
   2915  f548							; 
   2916  f548
   2917  f548				   .
   2918  f548							; 
   2919  f548
   2920  f548				   .L059		;  goto __Start_Restart
   2921  f548
   2922  f548		       4c 67 f4 	      jmp	.__Start_Restart
   2923  f54b
   2924  f54b				   .
   2925  f54b							; 
   2926  f54b
   2927  f54b				   .
   2928  f54b							; 
   2929  f54b
   2930  f54b				   .
   2931  f54b							; 
   2932  f54b
   2933  f54b				   .
   2934  f54b							; 
   2935  f54b
   2936  f54b				   .
   2937  f54b							; 
   2938  f54b
   2939  f54b				   .
   2940  f54b							; 
   2941  f54b
   2942  f54b				   .
   2943  f54b							; 
   2944  f54b
   2945  f54b				   .
   2946  f54b							; 
   2947  f54b
   2948  f54b				   .
   2949  f54b							; 
   2950  f54b
   2951  f54b				   .
   2952  f54b							; 
   2953  f54b
   2954  f54b				   .
   2955  f54b							; 
   2956  f54b
   2957  f54b				   .__Main_Loop_Setup
   2958  f54b							; __Main_Loop_Setup
   2959  f54b
   2960  f54b				   .
   2961  f54b							; 
   2962  f54b
   2963  f54b				   .
   2964  f54b							; 
   2965  f54b
   2966  f54b				   .
   2967  f54b							; 
   2968  f54b
   2969  f54b				   .
   2970  f54b							; 
   2971  f54b
   2972  f54b				   .
   2973  f54b							; 
   2974  f54b
   2975  f54b				   .
   2976  f54b							; 
   2977  f54b
   2978  f54b				   .
   2979  f54b							; 
   2980  f54b
   2981  f54b				   .
   2982  f54b							; 
   2983  f54b
   2984  f54b				   .
   2985  f54b							; 
   2986  f54b
   2987  f54b				   .
   2988  f54b							; 
   2989  f54b
   2990  f54b				   .L060		;  _Bit2_Game_Control{2}  =  0
   2991  f54b
   2992  f54b		       a5 ec		      LDA	_Bit2_Game_Control
   2993  f54d		       29 fb		      AND	#251
   2994  f54f		       85 ec		      STA	_Bit2_Game_Control
   2995  f551				   .
   2996  f551							; 
   2997  f551
   2998  f551				   .
   2999  f551							; 
   3000  f551
   3001  f551				   .
   3002  f551							; 
   3003  f551
   3004  f551				   .
   3005  f551							; 
   3006  f551
   3007  f551				   .
   3008  f551							; 
   3009  f551
   3010  f551				   .
   3011  f551							; 
   3012  f551
   3013  f551				   .
   3014  f551							; 
   3015  f551
   3016  f551				   .
   3017  f551							; 
   3018  f551
   3019  f551				   .
   3020  f551							; 
   3021  f551
   3022  f551				   .
   3023  f551							; 
   3024  f551
   3025  f551				   .
   3026  f551							; 
   3027  f551
   3028  f551				   .
   3029  f551							; 
   3030  f551
   3031  f551				   .L061		;  _Bit0_Reset_Restrainer{0}  =  1
   3032  f551
   3033  f551		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   3034  f553		       09 01		      ORA	#1
   3035  f555		       85 ec		      STA	_Bit0_Reset_Restrainer
   3036  f557				   .
   3037  f557							; 
   3038  f557
   3039  f557				   .
   3040  f557							; 
   3041  f557
   3042  f557				   .
   3043  f557							; 
   3044  f557
   3045  f557				   .
   3046  f557							; 
   3047  f557
   3048  f557				   .
   3049  f557							; 
   3050  f557
   3051  f557				   .
   3052  f557							; 
   3053  f557
   3054  f557				   .
   3055  f557							; 
   3056  f557
   3057  f557				   .
   3058  f557							; 
   3059  f557
   3060  f557				   .
   3061  f557							; 
   3062  f557
   3063  f557				   .
   3064  f557							; 
   3065  f557
   3066  f557				   .
   3067  f557							; 
   3068  f557
   3069  f557				   .
   3070  f557							; 
   3071  f557
   3072  f557				   .L062		;  _Bit1_FireB_Restrainer{1}  =  1
   3073  f557
   3074  f557		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3075  f559		       09 02		      ORA	#2
   3076  f55b		       85 ec		      STA	_Bit1_FireB_Restrainer
   3077  f55d				   .
   3078  f55d							; 
   3079  f55d
   3080  f55d				   .
   3081  f55d							; 
   3082  f55d
   3083  f55d				   .
   3084  f55d							; 
   3085  f55d
   3086  f55d				   .
   3087  f55d							; 
   3088  f55d
   3089  f55d				   .
   3090  f55d							; 
   3091  f55d
   3092  f55d				   .
   3093  f55d							; 
   3094  f55d
   3095  f55d				   .L063		;  player0x  =  74  :	player0y  =  78
   3096  f55d
   3097  f55d		       a9 4a		      LDA	#74
   3098  f55f		       85 80		      STA	player0x
   3099  f561		       a9 4e		      LDA	#78
   3100  f563		       85 85		      STA	player0y
   3101  f565				   .
   3102  f565							; 
   3103  f565
   3104  f565				   .
   3105  f565							; 
   3106  f565
   3107  f565				   .
   3108  f565							; 
   3109  f565
   3110  f565				   .
   3111  f565							; 
   3112  f565
   3113  f565				   .
   3114  f565							; 
   3115  f565
   3116  f565				   .
   3117  f565							; 
   3118  f565
   3119  f565				   .L064		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0
   3120  f565
   3121  f565							; complex statement detected
   3122  f565		       20 b9 f3 	      jsr	randomize
   3123  f568		       4a		      lsr
   3124  f569		       48		      PHA
   3125  f56a		       20 b9 f3 	      jsr	randomize
   3126  f56d		       29 0f		      AND	#15
   3127  f56f		       ba		      TSX
   3128  f570		       e8		      INX
   3129  f571		       9a		      TXS
   3130  f572		       18		      CLC
   3131  f573		       75 00		      ADC	$00,x
   3132  f575		       85 81		      STA	player1x
   3133  f577		       a9 00		      LDA	#0
   3134  f579		       85 86		      STA	player1y
   3135  f57b				   .
   3136  f57b							; 
   3137  f57b
   3138  f57b				   .
   3139  f57b							; 
   3140  f57b
   3141  f57b				   .
   3142  f57b							; 
   3143  f57b
   3144  f57b				   .
   3145  f57b							; 
   3146  f57b
   3147  f57b				   .
   3148  f57b							; 
   3149  f57b
   3150  f57b				   .
   3151  f57b							; 
   3152  f57b
   3153  f57b				   .L065		;  missile0height  =  4  :  missile0y	=  250
   3154  f57b
   3155  f57b		       a9 04		      LDA	#4
   3156  f57d		       85 90		      STA	missile0height
   3157  f57f		       a9 fa		      LDA	#250
   3158  f581		       85 91		      STA	missile0y
   3159  f583				   .
   3160  f583							; 
   3161  f583
   3162  f583				   .
   3163  f583							; 
   3164  f583
   3165  f583				   .
   3166  f583							; 
   3167  f583
   3168  f583				   .
   3169  f583							; 
   3170  f583
   3171  f583				   .
   3172  f583							; 
   3173  f583
   3174  f583				   .
   3175  f583							; 
   3176  f583
   3177  f583				   .L066		;  scorecolor	=  $1C
   3178  f583
   3179  f583		       a9 1c		      LDA	#$1C
   3180  f585		       85 a3		      STA	scorecolor
   3181  f587				   .
   3182  f587							; 
   3183  f587
   3184  f587				   .
   3185  f587							; 
   3186  f587
   3187  f587				   .
   3188  f587							; 
   3189  f587
   3190  f587				   .
   3191  f587							; 
   3192  f587
   3193  f587				   .
   3194  f587							; 
   3195  f587
   3196  f587				   .
   3197  f587							; 
   3198  f587
   3199  f587				   .L067		;  pfscore1  =  %01010101  :  pfscorecolor  =	$D2
   3200  f587
   3201  f587		       a9 55		      LDA	#%01010101
   3202  f589		       85 f2		      STA	pfscore1
   3203  f58b		       a9 d2		      LDA	#$D2
   3204  f58d		       85 f4		      STA	pfscorecolor
   3205  f58f				   .
   3206  f58f							; 
   3207  f58f
   3208  f58f				   .
   3209  f58f							; 
   3210  f58f
   3211  f58f				   .
   3212  f58f							; 
   3213  f58f
   3214  f58f				   .
   3215  f58f							; 
   3216  f58f
   3217  f58f				   .
   3218  f58f							; 
   3219  f58f
   3220  f58f				   .
   3221  f58f							; 
   3222  f58f
   3223  f58f				   .L068		;  player0:
   3224  f58f
   3225  f58f		       a2 b9		      LDX	#<playerL068_0
   3226  f591		       86 8a		      STX	player0pointerlo
   3227  f593		       a9 fd		      LDA	#>playerL068_0
   3228  f595		       85 8b		      STA	player0pointerhi
   3229  f597		       a9 07		      LDA	#7
   3230  f599		       85 8e		      STA	player0height
   3231  f59b				   .
   3232  f59b							; 
   3233  f59b
   3234  f59b				   .
   3235  f59b							; 
   3236  f59b
   3237  f59b				   .
   3238  f59b							; 
   3239  f59b
   3240  f59b				   .
   3241  f59b							; 
   3242  f59b
   3243  f59b				   .
   3244  f59b							; 
   3245  f59b
   3246  f59b				   .
   3247  f59b							; 
   3248  f59b
   3249  f59b				   .L069		;  playfield:
   3250  f59b
   3251  f59b				  -	      ifconst	pfres
   3252  f59b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3253  f59b					      else
   3254  f59b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3255  f59d					      endif
   3256  f59d		       4c cc f5 	      jmp	pflabel1
   3257  f5a0				   PF_data1
   3258  f5a0		       ff ff		      .byte.b	%11111111, %11111111
   3259  f5a2					      if	(pfwidth>2)
   3260  f5a2		       ff 7f		      .byte.b	%11111111, %01111111
   3261  f5a4					      endif
   3262  f5a4		       00 00		      .byte.b	%00000000, %00000000
   3263  f5a6					      if	(pfwidth>2)
   3264  f5a6		       00 00		      .byte.b	%00000000, %00000000
   3265  f5a8					      endif
   3266  f5a8		       00 00		      .byte.b	%00000000, %00000000
   3267  f5aa					      if	(pfwidth>2)
   3268  f5aa		       00 00		      .byte.b	%00000000, %00000000
   3269  f5ac					      endif
   3270  f5ac		       00 00		      .byte.b	%00000000, %00000000
   3271  f5ae					      if	(pfwidth>2)
   3272  f5ae		       00 00		      .byte.b	%00000000, %00000000
   3273  f5b0					      endif
   3274  f5b0		       00 00		      .byte.b	%00000000, %00000000
   3275  f5b2					      if	(pfwidth>2)
   3276  f5b2		       00 00		      .byte.b	%00000000, %00000000
   3277  f5b4					      endif
   3278  f5b4		       00 00		      .byte.b	%00000000, %00000000
   3279  f5b6					      if	(pfwidth>2)
   3280  f5b6		       00 00		      .byte.b	%00000000, %00000000
   3281  f5b8					      endif
   3282  f5b8		       00 00		      .byte.b	%00000000, %00000000
   3283  f5ba					      if	(pfwidth>2)
   3284  f5ba		       00 00		      .byte.b	%00000000, %00000000
   3285  f5bc					      endif
   3286  f5bc		       00 00		      .byte.b	%00000000, %00000000
   3287  f5be					      if	(pfwidth>2)
   3288  f5be		       00 00		      .byte.b	%00000000, %00000000
   3289  f5c0					      endif
   3290  f5c0		       00 00		      .byte.b	%00000000, %00000000
   3291  f5c2					      if	(pfwidth>2)
   3292  f5c2		       00 00		      .byte.b	%00000000, %00000000
   3293  f5c4					      endif
   3294  f5c4		       00 00		      .byte.b	%00000000, %00000000
   3295  f5c6					      if	(pfwidth>2)
   3296  f5c6		       00 00		      .byte.b	%00000000, %00000000
   3297  f5c8					      endif
   3298  f5c8		       ff ff		      .byte.b	%11111111, %11111111
   3299  f5ca					      if	(pfwidth>2)
   3300  f5ca		       ff 7f		      .byte.b	%11111111, %01111111
   3301  f5cc					      endif
   3302  f5cc				   pflabel1
   3303  f5cc		       bd a0 f5 	      lda	PF_data1,x
   3304  f5cf		       95 a4		      sta	playfield,x
   3305  f5d1		       ca		      dex
   3306  f5d2		       10 f8		      bpl	pflabel1
   3307  f5d4				   .
   3308  f5d4							; 
   3309  f5d4
   3310  f5d4				   .
   3311  f5d4							; 
   3312  f5d4
   3313  f5d4				   .
   3314  f5d4							; 
   3315  f5d4
   3316  f5d4				   .
   3317  f5d4							; 
   3318  f5d4
   3319  f5d4				   .
   3320  f5d4							; 
   3321  f5d4
   3322  f5d4				   .
   3323  f5d4							; 
   3324  f5d4
   3325  f5d4				   .L070		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   3326  f5d4
   3327  f5d4		       a5 e5		      LDA	_Bit0_BW_Mem
   3328  f5d6		       29 fe		      AND	#254
   3329  f5d8		       85 e5		      STA	_Bit0_BW_Mem
   3330  f5da		       a9 08		      lda	#8
   3331  f5dc		       2c 82 02 	      bit	SWCHB
   3332  f5df		       d0 06		      BNE	.skipL070
   3333  f5e1				   .condpart6
   3334  f5e1		       a5 e5		      LDA	_Bit0_BW_Mem
   3335  f5e3		       09 01		      ORA	#1
   3336  f5e5		       85 e5		      STA	_Bit0_BW_Mem
   3337  f5e7				   .skipL070
   3338  f5e7				   .
   3339  f5e7							; 
   3340  f5e7
   3341  f5e7				   .
   3342  f5e7							; 
   3343  f5e7
   3344  f5e7				   .
   3345  f5e7							; 
   3346  f5e7
   3347  f5e7				   .
   3348  f5e7							; 
   3349  f5e7
   3350  f5e7				   .
   3351  f5e7							; 
   3352  f5e7
   3353  f5e7				   .
   3354  f5e7							; 
   3355  f5e7
   3356  f5e7				   .
   3357  f5e7							; 
   3358  f5e7
   3359  f5e7				   .
   3360  f5e7							; 
   3361  f5e7
   3362  f5e7				   .
   3363  f5e7							; 
   3364  f5e7
   3365  f5e7				   .L071		;  if !_Bit3_Auto_Play{3} then score  =  0  :	goto __AP_Skip_AP_Setup
   3366  f5e7
   3367  f5e7		       a5 ec		      LDA	_Bit3_Auto_Play
   3368  f5e9		       29 08		      AND	#8
   3369  f5eb		       d0 0f		      BNE	.skipL071
   3370  f5ed				   .condpart7
   3371  f5ed		       a9 00		      LDA	#$00
   3372  f5ef		       85 95		      STA	score+2
   3373  f5f1		       a9 00		      LDA	#$00
   3374  f5f3		       85 94		      STA	score+1
   3375  f5f5		       a9 00		      LDA	#$00
   3376  f5f7		       85 93		      STA	score
   3377  f5f9		       4c 14 f6 	      jmp	.__AP_Skip_AP_Setup
   3378  f5fc
   3379  f5fc				   .skipL071
   3380  f5fc				   .
   3381  f5fc							; 
   3382  f5fc
   3383  f5fc				   .
   3384  f5fc							; 
   3385  f5fc
   3386  f5fc				   .
   3387  f5fc							; 
   3388  f5fc
   3389  f5fc				   .
   3390  f5fc							; 
   3391  f5fc
   3392  f5fc				   .L072		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   3393  f5fc
   3394  f5fc		       a9 00		      LDA	#0
   3395  f5fe		       85 d4		      STA	_Master_Counter
   3396  f600		       85 d5		      STA	_Frame_Counter
   3397  f602				   .
   3398  f602							; 
   3399  f602
   3400  f602				   .
   3401  f602							; 
   3402  f602
   3403  f602				   .
   3404  f602							; 
   3405  f602
   3406  f602				   .
   3407  f602							; 
   3408  f602
   3409  f602				   .L073		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   3410  f602
   3411  f602		       a5 93		      LDA	_sc1
   3412  f604		       85 e6		      STA	_Score1_Mem
   3413  f606		       a5 94		      LDA	_sc2
   3414  f608		       85 e7		      STA	_Score2_Mem
   3415  f60a		       a5 95		      LDA	_sc3
   3416  f60c		       85 e8		      STA	_Score3_Mem
   3417  f60e				   .
   3418  f60e							; 
   3419  f60e
   3420  f60e				   .L074		;  _Bit6_Swap_Scores{6}  =  0
   3421  f60e
   3422  f60e		       a5 ec		      LDA	_Bit6_Swap_Scores
   3423  f610		       29 bf		      AND	#191
   3424  f612		       85 ec		      STA	_Bit6_Swap_Scores
   3425  f614				   .
   3426  f614							; 
   3427  f614
   3428  f614				   .__AP_Skip_AP_Setup
   3429  f614							; __AP_Skip_AP_Setup
   3430  f614
   3431  f614				   .
   3432  f614							; 
   3433  f614
   3434  f614				   .
   3435  f614							; 
   3436  f614
   3437  f614				   .
   3438  f614							; 
   3439  f614
   3440  f614				   .
   3441  f614							; 
   3442  f614
   3443  f614				   .
   3444  f614							; 
   3445  f614
   3446  f614				   .
   3447  f614							; 
   3448  f614
   3449  f614				   .
   3450  f614							; 
   3451  f614
   3452  f614				   .
   3453  f614							; 
   3454  f614
   3455  f614				   .
   3456  f614							; 
   3457  f614
   3458  f614				   .
   3459  f614							; 
   3460  f614
   3461  f614				   .
   3462  f614							; 
   3463  f614
   3464  f614				   .__Main_Loop
   3465  f614							; __Main_Loop
   3466  f614
   3467  f614				   .
   3468  f614							; 
   3469  f614
   3470  f614				   .
   3471  f614							; 
   3472  f614
   3473  f614				   .
   3474  f614							; 
   3475  f614
   3476  f614				   .
   3477  f614							; 
   3478  f614
   3479  f614				   .
   3480  f614							; 
   3481  f614
   3482  f614				   .
   3483  f614							; 
   3484  f614
   3485  f614				   .
   3486  f614							; 
   3487  f614
   3488  f614				   .L075		;  COLUBK  =  $D6
   3489  f614
   3490  f614		       a9 d6		      LDA	#$D6
   3491  f616		       85 09		      STA	COLUBK
   3492  f618				   .
   3493  f618							; 
   3494  f618
   3495  f618				   .
   3496  f618							; 
   3497  f618
   3498  f618				   .
   3499  f618							; 
   3500  f618
   3501  f618				   .
   3502  f618							; 
   3503  f618
   3504  f618				   .
   3505  f618							; 
   3506  f618
   3507  f618				   .
   3508  f618							; 
   3509  f618
   3510  f618				   .
   3511  f618							; 
   3512  f618
   3513  f618				   .L076		;  COLUPF  =  0
   3514  f618
   3515  f618		       a9 00		      LDA	#0
   3516  f61a		       85 08		      STA	COLUPF
   3517  f61c				   .
   3518  f61c							; 
   3519  f61c
   3520  f61c				   .
   3521  f61c							; 
   3522  f61c
   3523  f61c				   .
   3524  f61c							; 
   3525  f61c
   3526  f61c				   .
   3527  f61c							; 
   3528  f61c
   3529  f61c				   .
   3530  f61c							; 
   3531  f61c
   3532  f61c				   .
   3533  f61c							; 
   3534  f61c
   3535  f61c				   .
   3536  f61c							; 
   3537  f61c
   3538  f61c				   .L077		;  COLUP0  =  $22  :  COLUP1  =  $20
   3539  f61c
   3540  f61c		       a9 22		      LDA	#$22
   3541  f61e		       85 06		      STA	COLUP0
   3542  f620		       a9 20		      LDA	#$20
   3543  f622		       85 07		      STA	COLUP1
   3544  f624				   .
   3545  f624							; 
   3546  f624
   3547  f624				   .
   3548  f624							; 
   3549  f624
   3550  f624				   .
   3551  f624							; 
   3552  f624
   3553  f624				   .
   3554  f624							; 
   3555  f624
   3556  f624				   .
   3557  f624							; 
   3558  f624
   3559  f624				   .
   3560  f624							; 
   3561  f624
   3562  f624				   .
   3563  f624							; 
   3564  f624
   3565  f624				   .L078		;  NUSIZ0  =  $10
   3566  f624
   3567  f624		       a9 10		      LDA	#$10
   3568  f626		       85 04		      STA	NUSIZ0
   3569  f628				   .
   3570  f628							; 
   3571  f628
   3572  f628				   .
   3573  f628							; 
   3574  f628
   3575  f628				   .
   3576  f628							; 
   3577  f628
   3578  f628				   .
   3579  f628							; 
   3580  f628
   3581  f628				   .
   3582  f628							; 
   3583  f628
   3584  f628				   .
   3585  f628							; 
   3586  f628
   3587  f628				   .
   3588  f628							; 
   3589  f628
   3590  f628				   .L079		;  NUSIZ1  =  $05
   3591  f628
   3592  f628		       a9 05		      LDA	#$05
   3593  f62a		       85 05		      STA	NUSIZ1
   3594  f62c				   .
   3595  f62c							; 
   3596  f62c
   3597  f62c				   .
   3598  f62c							; 
   3599  f62c
   3600  f62c				   .
   3601  f62c							; 
   3602  f62c
   3603  f62c				   .
   3604  f62c							; 
   3605  f62c
   3606  f62c				   .
   3607  f62c							; 
   3608  f62c
   3609  f62c				   .
   3610  f62c							; 
   3611  f62c
   3612  f62c				   .
   3613  f62c							; 
   3614  f62c
   3615  f62c				   .
   3616  f62c							; 
   3617  f62c
   3618  f62c				   .
   3619  f62c							; 
   3620  f62c
   3621  f62c				   .
   3622  f62c							; 
   3623  f62c
   3624  f62c				   .L080		;  _Master_Counter  =	_Master_Counter  +  1
   3625  f62c
   3626  f62c		       e6 d4		      INC	_Master_Counter
   3627  f62e				   .
   3628  f62e							; 
   3629  f62e
   3630  f62e				   .
   3631  f62e							; 
   3632  f62e
   3633  f62e				   .
   3634  f62e							; 
   3635  f62e
   3636  f62e				   .
   3637  f62e							; 
   3638  f62e
   3639  f62e				   .L081		;  if _Master_Counter	<  7 then goto __Skip_Counters
   3640  f62e
   3641  f62e		       a5 d4		      LDA	_Master_Counter
   3642  f630		       c9 07		      CMP	#7
   3643  f632		       b0 03		      BCS	.skipL081
   3644  f634				   .condpart8
   3645  f634		       4c 47 f6 	      jmp	.__Skip_Counters
   3646  f637
   3647  f637				   .skipL081
   3648  f637				   .
   3649  f637							; 
   3650  f637
   3651  f637				   .
   3652  f637							; 
   3653  f637
   3654  f637				   .
   3655  f637							; 
   3656  f637
   3657  f637				   .
   3658  f637							; 
   3659  f637
   3660  f637				   .L082		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   3661  f637
   3662  f637		       e6 d5		      INC	_Frame_Counter
   3663  f639		       a9 00		      LDA	#0
   3664  f63b		       85 d4		      STA	_Master_Counter
   3665  f63d				   .
   3666  f63d							; 
   3667  f63d
   3668  f63d				   .
   3669  f63d							; 
   3670  f63d
   3671  f63d				   .
   3672  f63d							; 
   3673  f63d
   3674  f63d				   .
   3675  f63d							; 
   3676  f63d
   3677  f63d				   .L083		;  if _Frame_Counter  >  3 then _Frame_Counter  =  0
   3678  f63d
   3679  f63d		       a9 03		      LDA	#3
   3680  f63f		       c5 d5		      CMP	_Frame_Counter
   3681  f641		       b0 04		      BCS	.skipL083
   3682  f643				   .condpart9
   3683  f643		       a9 00		      LDA	#0
   3684  f645		       85 d5		      STA	_Frame_Counter
   3685  f647				   .skipL083
   3686  f647				   .
   3687  f647							; 
   3688  f647
   3689  f647				   .__Skip_Counters
   3690  f647							; __Skip_Counters
   3691  f647
   3692  f647				   .
   3693  f647							; 
   3694  f647
   3695  f647				   .
   3696  f647							; 
   3697  f647
   3698  f647				   .
   3699  f647							; 
   3700  f647
   3701  f647				   .
   3702  f647							; 
   3703  f647
   3704  f647				   .
   3705  f647							; 
   3706  f647
   3707  f647				   .
   3708  f647							; 
   3709  f647
   3710  f647				   .
   3711  f647							; 
   3712  f647
   3713  f647				   .L084		;  on _Frame_Counter goto __Sq00 __Sq01 __Sq02 __Sq03
   3714  f647
   3715  f647		       a6 d5		      LDX	_Frame_Counter
   3716  f649		       bd 52 f6 	      LDA	.L084jumptablehi,x
   3717  f64c		       48		      PHA
   3718  f64d		       bd 56 f6 	      LDA	.L084jumptablelo,x
   3719  f650		       48		      PHA
   3720  f651		       60		      RTS
   3721  f652				   .L084jumptablehi
   3722  f652		       f9		      .byte.b	>(.__Sq00-1)
   3723  f653		       f9		      .byte.b	>(.__Sq01-1)
   3724  f654		       fa		      .byte.b	>(.__Sq02-1)
   3725  f655		       fa		      .byte.b	>(.__Sq03-1)
   3726  f656				   .L084jumptablelo
   3727  f656		       e4		      .byte.b	<(.__Sq00-1)
   3728  f657		       f3		      .byte.b	<(.__Sq01-1)
   3729  f658		       02		      .byte.b	<(.__Sq02-1)
   3730  f659		       11		      .byte.b	<(.__Sq03-1)
   3731  f65a				   .
   3732  f65a							; 
   3733  f65a
   3734  f65a				   .__Squirrel_Frame_Done
   3735  f65a							; __Squirrel_Frame_Done
   3736  f65a
   3737  f65a				   .
   3738  f65a							; 
   3739  f65a
   3740  f65a				   .
   3741  f65a							; 
   3742  f65a
   3743  f65a				   .
   3744  f65a							; 
   3745  f65a
   3746  f65a				   .
   3747  f65a							; 
   3748  f65a
   3749  f65a				   .
   3750  f65a							; 
   3751  f65a
   3752  f65a				   .
   3753  f65a							; 
   3754  f65a
   3755  f65a				   .
   3756  f65a							; 
   3757  f65a
   3758  f65a				   .
   3759  f65a							; 
   3760  f65a
   3761  f65a				   .
   3762  f65a							; 
   3763  f65a
   3764  f65a				   .
   3765  f65a							; 
   3766  f65a
   3767  f65a				   .L085		;  if missile0y  >  240 then goto __FireB_Check
   3768  f65a
   3769  f65a		       a9 f0		      LDA	#240
   3770  f65c		       c5 91		      CMP	missile0y
   3771  f65e		       b0 03		      BCS	.skipL085
   3772  f660				   .condpart10
   3773  f660		       4c 6d f6 	      jmp	.__FireB_Check
   3774  f663
   3775  f663				   .skipL085
   3776  f663				   .
   3777  f663							; 
   3778  f663
   3779  f663				   .
   3780  f663							; 
   3781  f663
   3782  f663				   .
   3783  f663							; 
   3784  f663
   3785  f663				   .
   3786  f663							; 
   3787  f663
   3788  f663				   .L086		;  missile0y  =  missile0y  -	2  :  goto __Skip_FireB
   3789  f663
   3790  f663		       a5 91		      LDA	missile0y
   3791  f665		       38		      SEC
   3792  f666		       e9 02		      SBC	#2
   3793  f668		       85 91		      STA	missile0y
   3794  f66a		       4c ab f6 	      jmp	.__Skip_FireB
   3795  f66d
   3796  f66d				   .
   3797  f66d							; 
   3798  f66d
   3799  f66d				   .__FireB_Check
   3800  f66d							; __FireB_Check
   3801  f66d
   3802  f66d				   .
   3803  f66d							; 
   3804  f66d
   3805  f66d				   .
   3806  f66d							; 
   3807  f66d
   3808  f66d				   .
   3809  f66d							; 
   3810  f66d
   3811  f66d				   .
   3812  f66d							; 
   3813  f66d
   3814  f66d				   .L087		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Fire_Missile
   3815  f66d
   3816  f66d		       a5 ec		      LDA	_Bit3_Auto_Play
   3817  f66f		       29 08		      AND	#8
   3818  f671		       d0 03		      BNE	.skipL087
   3819  f673				   .condpart11
   3820  f673		       4c 87 f6 	      jmp	.__AP_Skip_Fire_Missile
   3821  f676
   3822  f676				   .skipL087
   3823  f676				   .
   3824  f676							; 
   3825  f676
   3826  f676				   .
   3827  f676							; 
   3828  f676
   3829  f676				   .
   3830  f676							; 
   3831  f676
   3832  f676				   .
   3833  f676							; 
   3834  f676
   3835  f676				   .
   3836  f676							; 
   3837  f676
   3838  f676				   .L088		;  temp5  =  rand  :  if temp5  <  230 then goto __Skip_FireB
   3839  f676
   3840  f676		       20 b9 f3 	      jsr	randomize
   3841  f679		       85 a0		      STA	temp5
   3842  f67b		       a5 a0		      LDA	temp5
   3843  f67d		       c9 e6		      CMP	#230
   3844  f67f		       b0 03		      BCS	.skipL088
   3845  f681				   .condpart12
   3846  f681		       4c ab f6 	      jmp	.__Skip_FireB
   3847  f684
   3848  f684				   .skipL088
   3849  f684				   .
   3850  f684							; 
   3851  f684
   3852  f684				   .L089		;  goto __AP_Fire
   3853  f684
   3854  f684		       4c 9d f6 	      jmp	.__AP_Fire
   3855  f687
   3856  f687				   .
   3857  f687							; 
   3858  f687
   3859  f687				   .__AP_Skip_Fire_Missile
   3860  f687							; __AP_Skip_Fire_Missile
   3861  f687
   3862  f687				   .
   3863  f687							; 
   3864  f687
   3865  f687				   .
   3866  f687							; 
   3867  f687
   3868  f687				   .
   3869  f687							; 
   3870  f687
   3871  f687				   .
   3872  f687							; 
   3873  f687
   3874  f687				   .
   3875  f687							; 
   3876  f687
   3877  f687				   .L090		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Skip_FireB
   3878  f687
   3879  f687		       24 0c		      bit	INPT4
   3880  f689		       10 09		      BPL	.skipL090
   3881  f68b				   .condpart13
   3882  f68b		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3883  f68d		       29 fd		      AND	#253
   3884  f68f		       85 ec		      STA	_Bit1_FireB_Restrainer
   3885  f691		       4c ab f6 	      jmp	.__Skip_FireB
   3886  f694
   3887  f694				   .skipL090
   3888  f694				   .
   3889  f694							; 
   3890  f694
   3891  f694				   .
   3892  f694							; 
   3893  f694
   3894  f694				   .
   3895  f694							; 
   3896  f694
   3897  f694				   .
   3898  f694							; 
   3899  f694
   3900  f694				   .
   3901  f694							; 
   3902  f694
   3903  f694				   .L091		;  if _Bit1_FireB_Restrainer{1} then goto __Skip_FireB
   3904  f694
   3905  f694		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   3906  f696		       29 02		      AND	#2
   3907  f698		       f0 03		      BEQ	.skipL091
   3908  f69a				   .condpart14
   3909  f69a		       4c ab f6 	      jmp	.__Skip_FireB
   3910  f69d
   3911  f69d				   .skipL091
   3912  f69d				   .
   3913  f69d							; 
   3914  f69d
   3915  f69d				   .__AP_Fire
   3916  f69d							; __AP_Fire
   3917  f69d
   3918  f69d				   .
   3919  f69d							; 
   3920  f69d
   3921  f69d				   .
   3922  f69d							; 
   3923  f69d
   3924  f69d				   .
   3925  f69d							; 
   3926  f69d
   3927  f69d				   .
   3928  f69d							; 
   3929  f69d
   3930  f69d				   .L092		;  missile0y  =  player0y  -  2  :  missile0x	=  player0x  +	4
   3931  f69d
   3932  f69d		       a5 85		      LDA	player0y
   3933  f69f		       38		      SEC
   3934  f6a0		       e9 02		      SBC	#2
   3935  f6a2		       85 91		      STA	missile0y
   3936  f6a4		       a5 80		      LDA	player0x
   3937  f6a6		       18		      CLC
   3938  f6a7		       69 04		      ADC	#4
   3939  f6a9		       85 82		      STA	missile0x
   3940  f6ab				   .
   3941  f6ab							; 
   3942  f6ab
   3943  f6ab				   .__Skip_FireB
   3944  f6ab							; __Skip_FireB
   3945  f6ab
   3946  f6ab				   .
   3947  f6ab							; 
   3948  f6ab
   3949  f6ab				   .
   3950  f6ab							; 
   3951  f6ab
   3952  f6ab				   .
   3953  f6ab							; 
   3954  f6ab
   3955  f6ab				   .
   3956  f6ab							; 
   3957  f6ab
   3958  f6ab				   .
   3959  f6ab							; 
   3960  f6ab
   3961  f6ab				   .
   3962  f6ab							; 
   3963  f6ab
   3964  f6ab				   .
   3965  f6ab							; 
   3966  f6ab
   3967  f6ab				   .
   3968  f6ab							; 
   3969  f6ab
   3970  f6ab				   .
   3971  f6ab							; 
   3972  f6ab
   3973  f6ab				   .
   3974  f6ab							; 
   3975  f6ab
   3976  f6ab				   .L093		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_New_Dir
   3977  f6ab
   3978  f6ab		       a5 ec		      LDA	_Bit3_Auto_Play
   3979  f6ad		       29 08		      AND	#8
   3980  f6af		       d0 03		      BNE	.skipL093
   3981  f6b1				   .condpart15
   3982  f6b1		       4c 0a f7 	      jmp	.__AP_Skip_New_Dir
   3983  f6b4
   3984  f6b4				   .skipL093
   3985  f6b4				   .
   3986  f6b4							; 
   3987  f6b4
   3988  f6b4				   .
   3989  f6b4							; 
   3990  f6b4
   3991  f6b4				   .
   3992  f6b4							; 
   3993  f6b4
   3994  f6b4				   .
   3995  f6b4							; 
   3996  f6b4
   3997  f6b4				   .L094		;  _AP_Dir_Counter  =	_AP_Dir_Counter  +  1
   3998  f6b4
   3999  f6b4		       e6 dd		      INC	_AP_Dir_Counter
   4000  f6b6				   .
   4001  f6b6							; 
   4002  f6b6
   4003  f6b6				   .
   4004  f6b6							; 
   4005  f6b6
   4006  f6b6				   .
   4007  f6b6							; 
   4008  f6b6
   4009  f6b6				   .
   4010  f6b6							; 
   4011  f6b6
   4012  f6b6				   .
   4013  f6b6							; 
   4014  f6b6
   4015  f6b6				   .
   4016  f6b6							; 
   4017  f6b6
   4018  f6b6				   .L095		;  temp6  =   ( rand & 63 )   +  50
   4019  f6b6
   4020  f6b6							; complex statement detected
   4021  f6b6		       20 b9 f3 	      jsr	randomize
   4022  f6b9		       29 3f		      AND	#63
   4023  f6bb		       18		      CLC
   4024  f6bc		       69 32		      ADC	#50
   4025  f6be		       85 a1		      STA	temp6
   4026  f6c0				   .
   4027  f6c0							; 
   4028  f6c0
   4029  f6c0				   .
   4030  f6c0							; 
   4031  f6c0
   4032  f6c0				   .
   4033  f6c0							; 
   4034  f6c0
   4035  f6c0				   .
   4036  f6c0							; 
   4037  f6c0
   4038  f6c0				   .L096		;  if _AP_Dir_Counter	<  temp6 then goto __AP_Move_Acorn
   4039  f6c0
   4040  f6c0		       a5 dd		      LDA	_AP_Dir_Counter
   4041  f6c2		       c5 a1		      CMP	temp6
   4042  f6c4		       b0 03		      BCS	.skipL096
   4043  f6c6				   .condpart16
   4044  f6c6		       4c eb f6 	      jmp	.__AP_Move_Acorn
   4045  f6c9
   4046  f6c9				   .skipL096
   4047  f6c9				   .
   4048  f6c9							; 
   4049  f6c9
   4050  f6c9				   .
   4051  f6c9							; 
   4052  f6c9
   4053  f6c9				   .
   4054  f6c9							; 
   4055  f6c9
   4056  f6c9				   .
   4057  f6c9							; 
   4058  f6c9
   4059  f6c9				   .L097		;  temp5  =  rand
   4060  f6c9
   4061  f6c9		       20 b9 f3 	      jsr	randomize
   4062  f6cc		       85 a0		      STA	temp5
   4063  f6ce				   .
   4064  f6ce							; 
   4065  f6ce
   4066  f6ce				   .
   4067  f6ce							; 
   4068  f6ce
   4069  f6ce				   .
   4070  f6ce							; 
   4071  f6ce
   4072  f6ce				   .
   4073  f6ce							; 
   4074  f6ce
   4075  f6ce				   .L098		;  if temp5  <  230 then goto __AP_Move_Acorn
   4076  f6ce
   4077  f6ce		       a5 a0		      LDA	temp5
   4078  f6d0		       c9 e6		      CMP	#230
   4079  f6d2		       b0 03		      BCS	.skipL098
   4080  f6d4				   .condpart17
   4081  f6d4		       4c eb f6 	      jmp	.__AP_Move_Acorn
   4082  f6d7
   4083  f6d7				   .skipL098
   4084  f6d7				   .
   4085  f6d7							; 
   4086  f6d7
   4087  f6d7				   .
   4088  f6d7							; 
   4089  f6d7
   4090  f6d7				   .
   4091  f6d7							; 
   4092  f6d7
   4093  f6d7				   .
   4094  f6d7							; 
   4095  f6d7
   4096  f6d7				   .L099		;  _Bit3_AP_P0_Dir{3}	=  !_Bit3_AP_P0_Dir{3}
   4097  f6d7
   4098  f6d7		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4099  f6d9		       29 08		      AND	#8
   4100  f6db		       08		      PHP
   4101  f6dc		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4102  f6de		       29 f7		      AND	#247
   4103  f6e0		       28		      PLP
   4104  f6e1		       d0 02		      .byte.b	$D0, $02
   4105  f6e3		       09 08		      ORA	#8
   4106  f6e5		       85 e5		      STA	_Bit3_AP_P0_Dir
   4107  f6e7				   .
   4108  f6e7							; 
   4109  f6e7
   4110  f6e7				   .
   4111  f6e7							; 
   4112  f6e7
   4113  f6e7				   .
   4114  f6e7							; 
   4115  f6e7
   4116  f6e7				   .
   4117  f6e7							; 
   4118  f6e7
   4119  f6e7				   .L0100		;  _AP_Dir_Counter  =	0
   4120  f6e7
   4121  f6e7		       a9 00		      LDA	#0
   4122  f6e9		       85 dd		      STA	_AP_Dir_Counter
   4123  f6eb				   .
   4124  f6eb							; 
   4125  f6eb
   4126  f6eb				   .__AP_Move_Acorn
   4127  f6eb							; __AP_Move_Acorn
   4128  f6eb
   4129  f6eb				   .
   4130  f6eb							; 
   4131  f6eb
   4132  f6eb				   .
   4133  f6eb							; 
   4134  f6eb
   4135  f6eb				   .
   4136  f6eb							; 
   4137  f6eb
   4138  f6eb				   .
   4139  f6eb							; 
   4140  f6eb
   4141  f6eb				   .L0101		;  if !_Bit3_AP_P0_Dir{3} then if player0x  >	_P_Edge_Left then player0x  =  player0x  -  1
   4142  f6eb
   4143  f6eb		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4144  f6ed		       29 08		      AND	#8
   4145  f6ef		       d0 08		      BNE	.skipL0101
   4146  f6f1				   .condpart18
   4147  f6f1		       a9 01		      LDA	#_P_Edge_Left
   4148  f6f3		       c5 80		      CMP	player0x
   4149  f6f5		       b0 02		      BCS	.skip18then
   4150  f6f7				   .condpart19
   4151  f6f7		       c6 80		      DEC	player0x
   4152  f6f9				   .skip18then
   4153  f6f9				   .skipL0101
   4154  f6f9				   .L0102		;  if _Bit3_AP_P0_Dir{3} then if player0x  <  _P_Edge_Right then player0x  =  player0x  +  1
   4155  f6f9
   4156  f6f9		       a5 e5		      LDA	_Bit3_AP_P0_Dir
   4157  f6fb		       29 08		      AND	#8
   4158  f6fd		       f0 08		      BEQ	.skipL0102
   4159  f6ff				   .condpart20
   4160  f6ff		       a5 80		      LDA	player0x
   4161  f701		       c9 99		      CMP	#_P_Edge_Right
   4162  f703		       b0 02		      BCS	.skip20then
   4163  f705				   .condpart21
   4164  f705		       e6 80		      INC	player0x
   4165  f707				   .skip20then
   4166  f707				   .skipL0102
   4167  f707				   .
   4168  f707							; 
   4169  f707
   4170  f707				   .L0103		;  goto __Skip_Joy_Movement
   4171  f707
   4172  f707		       4c 42 f7 	      jmp	.__Skip_Joy_Movement
   4173  f70a
   4174  f70a				   .
   4175  f70a							; 
   4176  f70a
   4177  f70a				   .__AP_Skip_New_Dir
   4178  f70a							; __AP_Skip_New_Dir
   4179  f70a
   4180  f70a				   .
   4181  f70a							; 
   4182  f70a
   4183  f70a				   .
   4184  f70a							; 
   4185  f70a
   4186  f70a				   .
   4187  f70a							; 
   4188  f70a
   4189  f70a				   .
   4190  f70a							; 
   4191  f70a
   4192  f70a				   .
   4193  f70a							; 
   4194  f70a
   4195  f70a				   .
   4196  f70a							; 
   4197  f70a
   4198  f70a				   .
   4199  f70a							; 
   4200  f70a
   4201  f70a				   .
   4202  f70a							; 
   4203  f70a
   4204  f70a				   .L0104		;  if joy0up then if player0y	>  _P_Edge_Top then player0y  =  player0y  -  1
   4205  f70a
   4206  f70a		       a9 10		      lda	#$10
   4207  f70c		       2c 80 02 	      bit	SWCHA
   4208  f70f		       d0 08		      BNE	.skipL0104
   4209  f711				   .condpart22
   4210  f711		       a9 0a		      LDA	#_P_Edge_Top
   4211  f713		       c5 85		      CMP	player0y
   4212  f715		       b0 02		      BCS	.skip22then
   4213  f717				   .condpart23
   4214  f717		       c6 85		      DEC	player0y
   4215  f719				   .skip22then
   4216  f719				   .skipL0104
   4217  f719				   .L0105		;  if joy0down then if player0y  <  _P_Edge_Bottom then player0y  =  player0y	+  1
   4218  f719
   4219  f719		       a9 20		      lda	#$20
   4220  f71b		       2c 80 02 	      bit	SWCHA
   4221  f71e		       d0 08		      BNE	.skipL0105
   4222  f720				   .condpart24
   4223  f720		       a5 85		      LDA	player0y
   4224  f722		       c9 53		      CMP	#_P_Edge_Bottom
   4225  f724		       b0 02		      BCS	.skip24then
   4226  f726				   .condpart25
   4227  f726		       e6 85		      INC	player0y
   4228  f728				   .skip24then
   4229  f728				   .skipL0105
   4230  f728				   .L0106		;  if joy0left then if player0x  >  _P_Edge_Left then player0x  =  player0x  -  1
   4231  f728
   4232  f728		       2c 80 02 	      bit	SWCHA
   4233  f72b		       70 08		      BVS	.skipL0106
   4234  f72d				   .condpart26
   4235  f72d		       a9 01		      LDA	#_P_Edge_Left
   4236  f72f		       c5 80		      CMP	player0x
   4237  f731		       b0 02		      BCS	.skip26then
   4238  f733				   .condpart27
   4239  f733		       c6 80		      DEC	player0x
   4240  f735				   .skip26then
   4241  f735				   .skipL0106
   4242  f735				   .L0107		;  if joy0right then if player0x  <  _P_Edge_Right then player0x  =  player0x	+  1
   4243  f735
   4244  f735		       2c 80 02 	      bit	SWCHA
   4245  f738		       30 08		      BMI	.skipL0107
   4246  f73a				   .condpart28
   4247  f73a		       a5 80		      LDA	player0x
   4248  f73c		       c9 99		      CMP	#_P_Edge_Right
   4249  f73e		       b0 02		      BCS	.skip28then
   4250  f740				   .condpart29
   4251  f740		       e6 80		      INC	player0x
   4252  f742				   .skip28then
   4253  f742				   .skipL0107
   4254  f742				   .
   4255  f742							; 
   4256  f742
   4257  f742				   .__Skip_Joy_Movement
   4258  f742							; __Skip_Joy_Movement
   4259  f742
   4260  f742				   .
   4261  f742							; 
   4262  f742
   4263  f742				   .
   4264  f742							; 
   4265  f742
   4266  f742				   .
   4267  f742							; 
   4268  f742
   4269  f742				   .
   4270  f742							; 
   4271  f742
   4272  f742				   .
   4273  f742							; 
   4274  f742
   4275  f742				   .
   4276  f742							; 
   4277  f742
   4278  f742				   .
   4279  f742							; 
   4280  f742
   4281  f742				   .L0108		;  if player1y  <  player0y then player1y  =  player1y  +  1
   4282  f742
   4283  f742		       a5 86		      LDA	player1y
   4284  f744		       c5 85		      CMP	player0y
   4285  f746		       b0 02		      BCS	.skipL0108
   4286  f748				   .condpart30
   4287  f748		       e6 86		      INC	player1y
   4288  f74a				   .skipL0108
   4289  f74a				   .L0109		;  if player1y  >  player0y then player1y  =  player1y  -  1
   4290  f74a
   4291  f74a		       a5 85		      LDA	player0y
   4292  f74c		       c5 86		      CMP	player1y
   4293  f74e		       b0 02		      BCS	.skipL0109
   4294  f750				   .condpart31
   4295  f750		       c6 86		      DEC	player1y
   4296  f752				   .skipL0109
   4297  f752				   .L0110		;  temp5  =  player1x	+  8  :  if temp5  <  player0x then if player1x  <  144 then player1x  =  player1x  +  1
   4298  f752
   4299  f752		       a5 81		      LDA	player1x
   4300  f754		       18		      CLC
   4301  f755		       69 08		      ADC	#8
   4302  f757		       85 a0		      STA	temp5
   4303  f759		       a5 a0		      LDA	temp5
   4304  f75b		       c5 80		      CMP	player0x
   4305  f75d		       b0 08		      BCS	.skipL0110
   4306  f75f				   .condpart32
   4307  f75f		       a5 81		      LDA	player1x
   4308  f761		       c9 90		      CMP	#144
   4309  f763		       b0 02		      BCS	.skip32then
   4310  f765				   .condpart33
   4311  f765		       e6 81		      INC	player1x
   4312  f767				   .skip32then
   4313  f767				   .skipL0110
   4314  f767				   .L0111		;  temp5  =  player1x	+  8  :  if temp5  >  player0x then if player1x  >  0 then player1x  =	player1x  -  1
   4315  f767
   4316  f767		       a5 81		      LDA	player1x
   4317  f769		       18		      CLC
   4318  f76a		       69 08		      ADC	#8
   4319  f76c		       85 a0		      STA	temp5
   4320  f76e		       a5 80		      LDA	player0x
   4321  f770		       c5 a0		      CMP	temp5
   4322  f772		       b0 08		      BCS	.skipL0111
   4323  f774				   .condpart34
   4324  f774		       a9 00		      LDA	#0
   4325  f776		       c5 81		      CMP	player1x
   4326  f778		       b0 02		      BCS	.skip34then
   4327  f77a				   .condpart35
   4328  f77a		       c6 81		      DEC	player1x
   4329  f77c				   .skip34then
   4330  f77c				   .skipL0111
   4331  f77c				   .
   4332  f77c							; 
   4333  f77c
   4334  f77c				   .
   4335  f77c							; 
   4336  f77c
   4337  f77c				   .
   4338  f77c							; 
   4339  f77c
   4340  f77c				   .
   4341  f77c							; 
   4342  f77c
   4343  f77c				   .
   4344  f77c							; 
   4345  f77c
   4346  f77c				   .
   4347  f77c							; 
   4348  f77c
   4349  f77c				   .
   4350  f77c							; 
   4351  f77c
   4352  f77c				   .
   4353  f77c							; 
   4354  f77c
   4355  f77c				   .
   4356  f77c							; 
   4357  f77c
   4358  f77c				   .
   4359  f77c							; 
   4360  f77c
   4361  f77c				   .L0112		;  if !collision(missile0,player1) then goto __Skip_Squirrel_Kill
   4362  f77c
   4363  f77c		       24 00		      bit	CXM0P
   4364  f77e		       30 03		      BMI	.skipL0112
   4365  f780				   .condpart36
   4366  f780		       4c f5 f7 	      jmp	.__Skip_Squirrel_Kill
   4367  f783
   4368  f783				   .skipL0112
   4369  f783				   .
   4370  f783							; 
   4371  f783
   4372  f783				   .
   4373  f783							; 
   4374  f783
   4375  f783				   .
   4376  f783							; 
   4377  f783
   4378  f783				   .
   4379  f783							; 
   4380  f783
   4381  f783				   .L0113		;  temp6  =  player1y
   4382  f783
   4383  f783		       a5 86		      LDA	player1y
   4384  f785		       85 a1		      STA	temp6
   4385  f787				   .
   4386  f787							; 
   4387  f787
   4388  f787				   .
   4389  f787							; 
   4390  f787
   4391  f787				   .
   4392  f787							; 
   4393  f787
   4394  f787				   .
   4395  f787							; 
   4396  f787
   4397  f787				   .L0114		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  missile0y  =  250
   4398  f787
   4399  f787							; complex statement detected
   4400  f787		       20 b9 f3 	      jsr	randomize
   4401  f78a		       4a		      lsr
   4402  f78b		       48		      PHA
   4403  f78c		       20 b9 f3 	      jsr	randomize
   4404  f78f		       29 0f		      AND	#15
   4405  f791		       ba		      TSX
   4406  f792		       e8		      INX
   4407  f793		       9a		      TXS
   4408  f794		       18		      CLC
   4409  f795		       75 00		      ADC	$00,x
   4410  f797		       85 81		      STA	player1x
   4411  f799		       a9 00		      LDA	#0
   4412  f79b		       85 86		      STA	player1y
   4413  f79d		       a9 fa		      LDA	#250
   4414  f79f		       85 91		      STA	missile0y
   4415  f7a1				   .
   4416  f7a1							; 
   4417  f7a1
   4418  f7a1				   .
   4419  f7a1							; 
   4420  f7a1
   4421  f7a1				   .
   4422  f7a1							; 
   4423  f7a1
   4424  f7a1				   .
   4425  f7a1							; 
   4426  f7a1
   4427  f7a1				   .L0115		;  if _Bit3_Auto_Play{3} then goto __Skip_Squirrel_Kill
   4428  f7a1
   4429  f7a1		       a5 ec		      LDA	_Bit3_Auto_Play
   4430  f7a3		       29 08		      AND	#8
   4431  f7a5		       f0 03		      BEQ	.skipL0115
   4432  f7a7				   .condpart37
   4433  f7a7		       4c f5 f7 	      jmp	.__Skip_Squirrel_Kill
   4434  f7aa
   4435  f7aa				   .skipL0115
   4436  f7aa				   .
   4437  f7aa							; 
   4438  f7aa
   4439  f7aa				   .
   4440  f7aa							; 
   4441  f7aa
   4442  f7aa				   .
   4443  f7aa							; 
   4444  f7aa
   4445  f7aa				   .
   4446  f7aa							; 
   4447  f7aa
   4448  f7aa				   .L0116		;  score  =  score  +	1
   4449  f7aa
   4450  f7aa		       f8		      SED
   4451  f7ab		       18		      CLC
   4452  f7ac		       a5 95		      LDA	score+2
   4453  f7ae		       69 01		      ADC	#$01
   4454  f7b0		       85 95		      STA	score+2
   4455  f7b2		       a5 94		      LDA	score+1
   4456  f7b4		       69 00		      ADC	#$00
   4457  f7b6		       85 94		      STA	score+1
   4458  f7b8		       a5 93		      LDA	score
   4459  f7ba		       69 00		      ADC	#$00
   4460  f7bc		       85 93		      STA	score
   4461  f7be		       d8		      CLD
   4462  f7bf				   .
   4463  f7bf							; 
   4464  f7bf
   4465  f7bf				   .
   4466  f7bf							; 
   4467  f7bf
   4468  f7bf				   .
   4469  f7bf							; 
   4470  f7bf
   4471  f7bf				   .
   4472  f7bf							; 
   4473  f7bf
   4474  f7bf				   .L0117		;  if _Ch0_Sound then goto __Skip_Squirrel_Kill
   4475  f7bf
   4476  f7bf		       a5 d6		      LDA	_Ch0_Sound
   4477  f7c1		       f0 03		      BEQ	.skipL0117
   4478  f7c3				   .condpart38
   4479  f7c3		       4c f5 f7 	      jmp	.__Skip_Squirrel_Kill
   4480  f7c6
   4481  f7c6				   .skipL0117
   4482  f7c6				   .
   4483  f7c6							; 
   4484  f7c6
   4485  f7c6				   .L0118		;  _Ch0_Sound	=  1  :  _Ch0_Counter  =  10
   4486  f7c6
   4487  f7c6		       a9 01		      LDA	#1
   4488  f7c8		       85 d6		      STA	_Ch0_Sound
   4489  f7ca		       a9 0a		      LDA	#10
   4490  f7cc		       85 d7		      STA	_Ch0_Counter
   4491  f7ce				   .
   4492  f7ce							; 
   4493  f7ce
   4494  f7ce				   .L0119		;  _C0  =  4  :  _V0  =  12  :  _F0  =  14
   4495  f7ce
   4496  f7ce		       a9 04		      LDA	#4
   4497  f7d0		       85 d8		      STA	_C0
   4498  f7d2		       a9 0c		      LDA	#12
   4499  f7d4		       85 d9		      STA	_V0
   4500  f7d6		       a9 0e		      LDA	#14
   4501  f7d8		       85 da		      STA	_F0
   4502  f7da				   .
   4503  f7da							; 
   4504  f7da
   4505  f7da				   .
   4506  f7da							; 
   4507  f7da
   4508  f7da				   .
   4509  f7da							; 
   4510  f7da
   4511  f7da				   .
   4512  f7da							; 
   4513  f7da
   4514  f7da				   .L0120		;  temp5  =  255  :  if player0y  >  temp6 then temp5	=  player0y  -	temp6
   4515  f7da
   4516  f7da		       a9 ff		      LDA	#255
   4517  f7dc		       85 a0		      STA	temp5
   4518  f7de		       a5 a1		      LDA	temp6
   4519  f7e0		       c5 85		      CMP	player0y
   4520  f7e2		       b0 07		      BCS	.skipL0120
   4521  f7e4				   .condpart39
   4522  f7e4		       a5 85		      LDA	player0y
   4523  f7e6		       38		      SEC
   4524  f7e7		       e5 a1		      SBC	temp6
   4525  f7e9		       85 a0		      STA	temp5
   4526  f7eb				   .skipL0120
   4527  f7eb				   .
   4528  f7eb							; 
   4529  f7eb
   4530  f7eb				   .L0121		;  if temp5  <  30 then _C0  =  12
   4531  f7eb
   4532  f7eb		       a5 a0		      LDA	temp5
   4533  f7ed		       c9 1e		      CMP	#30
   4534  f7ef		       b0 04		      BCS	.skipL0121
   4535  f7f1				   .condpart40
   4536  f7f1		       a9 0c		      LDA	#12
   4537  f7f3		       85 d8		      STA	_C0
   4538  f7f5				   .skipL0121
   4539  f7f5				   .
   4540  f7f5							; 
   4541  f7f5
   4542  f7f5				   .__Skip_Squirrel_Kill
   4543  f7f5							; __Skip_Squirrel_Kill
   4544  f7f5
   4545  f7f5				   .
   4546  f7f5							; 
   4547  f7f5
   4548  f7f5				   .
   4549  f7f5							; 
   4550  f7f5
   4551  f7f5				   .
   4552  f7f5							; 
   4553  f7f5
   4554  f7f5				   .
   4555  f7f5							; 
   4556  f7f5
   4557  f7f5				   .
   4558  f7f5							; 
   4559  f7f5
   4560  f7f5				   .
   4561  f7f5							; 
   4562  f7f5
   4563  f7f5				   .
   4564  f7f5							; 
   4565  f7f5
   4566  f7f5				   .
   4567  f7f5							; 
   4568  f7f5
   4569  f7f5				   .
   4570  f7f5							; 
   4571  f7f5
   4572  f7f5				   .
   4573  f7f5							; 
   4574  f7f5
   4575  f7f5				   .L0122		;  if !collision(player0,player1) then goto __Skip_Acorn_Eaten
   4576  f7f5
   4577  f7f5		       24 07		      bit	CXPPMM
   4578  f7f7		       30 03		      BMI	.skipL0122
   4579  f7f9				   .condpart41
   4580  f7f9		       4c 73 f8 	      jmp	.__Skip_Acorn_Eaten
   4581  f7fc
   4582  f7fc				   .skipL0122
   4583  f7fc				   .
   4584  f7fc							; 
   4585  f7fc
   4586  f7fc				   .
   4587  f7fc							; 
   4588  f7fc
   4589  f7fc				   .
   4590  f7fc							; 
   4591  f7fc
   4592  f7fc				   .
   4593  f7fc							; 
   4594  f7fc
   4595  f7fc				   .
   4596  f7fc							; 
   4597  f7fc
   4598  f7fc				   .L0123		;  if !pfscore1 then _Bit7_Last_Life{7}  =  1	:  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =	1
   4599  f7fc
   4600  f7fc		       a5 f2		      LDA	pfscore1
   4601  f7fe		       d0 12		      BNE	.skipL0123
   4602  f800				   .condpart42
   4603  f800		       a5 ec		      LDA	_Bit7_Last_Life
   4604  f802		       09 80		      ORA	#128
   4605  f804		       85 ec		      STA	_Bit7_Last_Life
   4606  f806		       a5 ec		      LDA	_Bit3_Auto_Play
   4607  f808		       29 08		      AND	#8
   4608  f80a		       f0 06		      BEQ	.skip42then
   4609  f80c				   .condpart43
   4610  f80c		       a5 ec		      LDA	_Bit2_Game_Control
   4611  f80e		       09 04		      ORA	#4
   4612  f810		       85 ec		      STA	_Bit2_Game_Control
   4613  f812				   .skip42then
   4614  f812				   .skipL0123
   4615  f812				   .
   4616  f812							; 
   4617  f812
   4618  f812				   .
   4619  f812							; 
   4620  f812
   4621  f812				   .
   4622  f812							; 
   4623  f812
   4624  f812				   .
   4625  f812							; 
   4626  f812
   4627  f812				   .L0124		;  if pfscore1 then pfscore1  =  pfscore1 / 4
   4628  f812
   4629  f812		       a5 f2		      LDA	pfscore1
   4630  f814		       f0 06		      BEQ	.skipL0124
   4631  f816				   .condpart44
   4632  f816		       a5 f2		      LDA	pfscore1
   4633  f818		       4a		      lsr
   4634  f819		       4a		      lsr
   4635  f81a		       85 f2		      STA	pfscore1
   4636  f81c				   .skipL0124
   4637  f81c				   .
   4638  f81c							; 
   4639  f81c
   4640  f81c				   .
   4641  f81c							; 
   4642  f81c
   4643  f81c				   .
   4644  f81c							; 
   4645  f81c
   4646  f81c				   .
   4647  f81c							; 
   4648  f81c
   4649  f81c				   .L0125		;  player1x  =   ( rand / 2 )	 +   ( rand & 15 )   :	player1y  =  0	:  missile0y  =  250
   4650  f81c
   4651  f81c							; complex statement detected
   4652  f81c		       20 b9 f3 	      jsr	randomize
   4653  f81f		       4a		      lsr
   4654  f820		       48		      PHA
   4655  f821		       20 b9 f3 	      jsr	randomize
   4656  f824		       29 0f		      AND	#15
   4657  f826		       ba		      TSX
   4658  f827		       e8		      INX
   4659  f828		       9a		      TXS
   4660  f829		       18		      CLC
   4661  f82a		       75 00		      ADC	$00,x
   4662  f82c		       85 81		      STA	player1x
   4663  f82e		       a9 00		      LDA	#0
   4664  f830		       85 86		      STA	player1y
   4665  f832		       a9 fa		      LDA	#250
   4666  f834		       85 91		      STA	missile0y
   4667  f836				   .
   4668  f836							; 
   4669  f836
   4670  f836				   .
   4671  f836							; 
   4672  f836
   4673  f836				   .
   4674  f836							; 
   4675  f836
   4676  f836				   .
   4677  f836							; 
   4678  f836
   4679  f836				   .L0126		;  if _Bit3_Auto_Play{3} then goto __Skip_Acorn_Eaten
   4680  f836
   4681  f836		       a5 ec		      LDA	_Bit3_Auto_Play
   4682  f838		       29 08		      AND	#8
   4683  f83a		       f0 03		      BEQ	.skipL0126
   4684  f83c				   .condpart45
   4685  f83c		       4c 73 f8 	      jmp	.__Skip_Acorn_Eaten
   4686  f83f
   4687  f83f				   .skipL0126
   4688  f83f				   .
   4689  f83f							; 
   4690  f83f
   4691  f83f				   .
   4692  f83f							; 
   4693  f83f
   4694  f83f				   .
   4695  f83f							; 
   4696  f83f
   4697  f83f				   .
   4698  f83f							; 
   4699  f83f
   4700  f83f				   .L0127		;  if _sc3  >	0 then score  =  score	-  1
   4701  f83f
   4702  f83f		       a9 00		      LDA	#0
   4703  f841		       c5 95		      CMP	_sc3
   4704  f843		       b0 15		      BCS	.skipL0127
   4705  f845				   .condpart46
   4706  f845		       f8		      SED
   4707  f846		       38		      SEC
   4708  f847		       a5 95		      LDA	score+2
   4709  f849		       e9 01		      SBC	#$01
   4710  f84b		       85 95		      STA	score+2
   4711  f84d		       a5 94		      LDA	score+1
   4712  f84f		       e9 00		      SBC	#$00
   4713  f851		       85 94		      STA	score+1
   4714  f853		       a5 93		      LDA	score
   4715  f855		       e9 00		      SBC	#$00
   4716  f857		       85 93		      STA	score
   4717  f859		       d8		      CLD
   4718  f85a				   .skipL0127
   4719  f85a				   .
   4720  f85a							; 
   4721  f85a
   4722  f85a				   .
   4723  f85a							; 
   4724  f85a
   4725  f85a				   .
   4726  f85a							; 
   4727  f85a
   4728  f85a				   .
   4729  f85a							; 
   4730  f85a
   4731  f85a				   .L0128		;  if _Ch0_Sound then goto __Skip_Acorn_Eaten
   4732  f85a
   4733  f85a		       a5 d6		      LDA	_Ch0_Sound
   4734  f85c		       f0 03		      BEQ	.skipL0128
   4735  f85e				   .condpart47
   4736  f85e		       4c 73 f8 	      jmp	.__Skip_Acorn_Eaten
   4737  f861
   4738  f861				   .skipL0128
   4739  f861				   .
   4740  f861							; 
   4741  f861
   4742  f861				   .L0129		;  _Ch0_Sound	=  2  :  _Ch0_Counter  =  10
   4743  f861
   4744  f861		       a9 02		      LDA	#2
   4745  f863		       85 d6		      STA	_Ch0_Sound
   4746  f865		       a9 0a		      LDA	#10
   4747  f867		       85 d7		      STA	_Ch0_Counter
   4748  f869				   .
   4749  f869							; 
   4750  f869
   4751  f869				   .L0130		;  _C0  =  7  :  _V0  =  12  :  _F0  =  12
   4752  f869
   4753  f869		       a9 07		      LDA	#7
   4754  f86b		       85 d8		      STA	_C0
   4755  f86d		       a9 0c		      LDA	#12
   4756  f86f		       85 d9		      STA	_V0
   4757  f871		       85 da		      STA	_F0
   4758  f873				   .
   4759  f873							; 
   4760  f873
   4761  f873				   .__Skip_Acorn_Eaten
   4762  f873							; __Skip_Acorn_Eaten
   4763  f873
   4764  f873				   .
   4765  f873							; 
   4766  f873
   4767  f873				   .
   4768  f873							; 
   4769  f873
   4770  f873				   .
   4771  f873							; 
   4772  f873
   4773  f873				   .
   4774  f873							; 
   4775  f873
   4776  f873				   .
   4777  f873							; 
   4778  f873
   4779  f873				   .
   4780  f873							; 
   4781  f873
   4782  f873				   .
   4783  f873							; 
   4784  f873
   4785  f873				   .
   4786  f873							; 
   4787  f873
   4788  f873				   .
   4789  f873							; 
   4790  f873
   4791  f873				   .
   4792  f873							; 
   4793  f873
   4794  f873				   .L0131		;  if _Ch0_Sound  <>  1 then goto __Skip_Sound1
   4795  f873
   4796  f873		       a5 d6		      LDA	_Ch0_Sound
   4797  f875		       c9 01		      CMP	#1
   4798  f877		       f0 03		      BEQ	.skipL0131
   4799  f879				   .condpart48
   4800  f879		       4c a6 f8 	      jmp	.__Skip_Sound1
   4801  f87c
   4802  f87c				   .skipL0131
   4803  f87c				   .
   4804  f87c							; 
   4805  f87c
   4806  f87c				   .
   4807  f87c							; 
   4808  f87c
   4809  f87c				   .
   4810  f87c							; 
   4811  f87c
   4812  f87c				   .
   4813  f87c							; 
   4814  f87c
   4815  f87c				   .L0132		;  _F0  =  _F0  ^  5
   4816  f87c
   4817  f87c		       a5 da		      LDA	_F0
   4818  f87e		       49 05		      EOR	#5
   4819  f880		       85 da		      STA	_F0
   4820  f882				   .
   4821  f882							; 
   4822  f882
   4823  f882				   .
   4824  f882							; 
   4825  f882
   4826  f882				   .
   4827  f882							; 
   4828  f882
   4829  f882				   .
   4830  f882							; 
   4831  f882
   4832  f882				   .L0133		;  AUDC0  =  _C0  :  AUDV0  =	_V0  :	AUDF0  =  _F0
   4833  f882
   4834  f882		       a5 d8		      LDA	_C0
   4835  f884		       85 15		      STA	AUDC0
   4836  f886		       a5 d9		      LDA	_V0
   4837  f888		       85 19		      STA	AUDV0
   4838  f88a		       a5 da		      LDA	_F0
   4839  f88c		       85 17		      STA	AUDF0
   4840  f88e				   .
   4841  f88e							; 
   4842  f88e
   4843  f88e				   .
   4844  f88e							; 
   4845  f88e
   4846  f88e				   .
   4847  f88e							; 
   4848  f88e
   4849  f88e				   .
   4850  f88e							; 
   4851  f88e
   4852  f88e				   .L0134		;  _V0  =  _V0  -  1  :  if _V0  <  2 then _V0  =  2
   4853  f88e
   4854  f88e		       c6 d9		      DEC	_V0
   4855  f890		       a5 d9		      LDA	_V0
   4856  f892		       c9 02		      CMP	#2
   4857  f894		       b0 04		      BCS	.skipL0134
   4858  f896				   .condpart49
   4859  f896		       a9 02		      LDA	#2
   4860  f898		       85 d9		      STA	_V0
   4861  f89a				   .skipL0134
   4862  f89a				   .
   4863  f89a							; 
   4864  f89a
   4865  f89a				   .
   4866  f89a							; 
   4867  f89a
   4868  f89a				   .
   4869  f89a							; 
   4870  f89a
   4871  f89a				   .
   4872  f89a							; 
   4873  f89a
   4874  f89a				   .L0135		;  _Ch0_Counter  =  _Ch0_Counter  -  1
   4875  f89a
   4876  f89a		       c6 d7		      DEC	_Ch0_Counter
   4877  f89c				   .
   4878  f89c							; 
   4879  f89c
   4880  f89c				   .
   4881  f89c							; 
   4882  f89c
   4883  f89c				   .
   4884  f89c							; 
   4885  f89c
   4886  f89c				   .
   4887  f89c							; 
   4888  f89c
   4889  f89c				   .L0136		;  if !_Ch0_Counter then _Ch0_Sound  =  0  :  AUDV0  =  0
   4890  f89c
   4891  f89c		       a5 d7		      LDA	_Ch0_Counter
   4892  f89e		       d0 06		      BNE	.skipL0136
   4893  f8a0				   .condpart50
   4894  f8a0		       a9 00		      LDA	#0
   4895  f8a2		       85 d6		      STA	_Ch0_Sound
   4896  f8a4		       85 19		      STA	AUDV0
   4897  f8a6				   .skipL0136
   4898  f8a6				   .
   4899  f8a6							; 
   4900  f8a6
   4901  f8a6				   .__Skip_Sound1
   4902  f8a6							; __Skip_Sound1
   4903  f8a6
   4904  f8a6				   .
   4905  f8a6							; 
   4906  f8a6
   4907  f8a6				   .
   4908  f8a6							; 
   4909  f8a6
   4910  f8a6				   .
   4911  f8a6							; 
   4912  f8a6
   4913  f8a6				   .
   4914  f8a6							; 
   4915  f8a6
   4916  f8a6				   .
   4917  f8a6							; 
   4918  f8a6
   4919  f8a6				   .
   4920  f8a6							; 
   4921  f8a6
   4922  f8a6				   .
   4923  f8a6							; 
   4924  f8a6
   4925  f8a6				   .
   4926  f8a6							; 
   4927  f8a6
   4928  f8a6				   .
   4929  f8a6							; 
   4930  f8a6
   4931  f8a6				   .
   4932  f8a6							; 
   4933  f8a6
   4934  f8a6				   .L0137		;  if _Ch0_Sound  <>  2 then goto __Skip_Sound2
   4935  f8a6
   4936  f8a6		       a5 d6		      LDA	_Ch0_Sound
   4937  f8a8		       c9 02		      CMP	#2
   4938  f8aa		       f0 03		      BEQ	.skipL0137
   4939  f8ac				   .condpart51
   4940  f8ac		       4c dd f8 	      jmp	.__Skip_Sound2
   4941  f8af
   4942  f8af				   .skipL0137
   4943  f8af				   .
   4944  f8af							; 
   4945  f8af
   4946  f8af				   .
   4947  f8af							; 
   4948  f8af
   4949  f8af				   .
   4950  f8af							; 
   4951  f8af
   4952  f8af				   .
   4953  f8af							; 
   4954  f8af
   4955  f8af				   .L0138		;  AUDC0  =  _C0  :  AUDV0  =	_V0  :	AUDF0  =  _F0
   4956  f8af
   4957  f8af		       a5 d8		      LDA	_C0
   4958  f8b1		       85 15		      STA	AUDC0
   4959  f8b3		       a5 d9		      LDA	_V0
   4960  f8b5		       85 19		      STA	AUDV0
   4961  f8b7		       a5 da		      LDA	_F0
   4962  f8b9		       85 17		      STA	AUDF0
   4963  f8bb				   .
   4964  f8bb							; 
   4965  f8bb
   4966  f8bb				   .
   4967  f8bb							; 
   4968  f8bb
   4969  f8bb				   .
   4970  f8bb							; 
   4971  f8bb
   4972  f8bb				   .
   4973  f8bb							; 
   4974  f8bb
   4975  f8bb				   .L0139		;  _V0  =  _V0  -  1  :  if _V0  <  2 then _V0  =  2
   4976  f8bb
   4977  f8bb		       c6 d9		      DEC	_V0
   4978  f8bd		       a5 d9		      LDA	_V0
   4979  f8bf		       c9 02		      CMP	#2
   4980  f8c1		       b0 04		      BCS	.skipL0139
   4981  f8c3				   .condpart52
   4982  f8c3		       a9 02		      LDA	#2
   4983  f8c5		       85 d9		      STA	_V0
   4984  f8c7				   .skipL0139
   4985  f8c7				   .
   4986  f8c7							; 
   4987  f8c7
   4988  f8c7				   .
   4989  f8c7							; 
   4990  f8c7
   4991  f8c7				   .
   4992  f8c7							; 
   4993  f8c7
   4994  f8c7				   .
   4995  f8c7							; 
   4996  f8c7
   4997  f8c7				   .L0140		;  _Ch0_Counter  =  _Ch0_Counter  -  1
   4998  f8c7
   4999  f8c7		       c6 d7		      DEC	_Ch0_Counter
   5000  f8c9				   .
   5001  f8c9							; 
   5002  f8c9
   5003  f8c9				   .
   5004  f8c9							; 
   5005  f8c9
   5006  f8c9				   .
   5007  f8c9							; 
   5008  f8c9
   5009  f8c9				   .
   5010  f8c9							; 
   5011  f8c9
   5012  f8c9				   .
   5013  f8c9							; 
   5014  f8c9
   5015  f8c9				   .L0141		;  if !_Ch0_Counter then _Ch0_Sound  =  0  :  AUDV0  =  0  :  if _Bit7_Last_Life{7} then _Bit2_Game_Control{2}  =  1
   5016  f8c9
   5017  f8c9		       a5 d7		      LDA	_Ch0_Counter
   5018  f8cb		       d0 10		      BNE	.skipL0141
   5019  f8cd				   .condpart53
   5020  f8cd		       a9 00		      LDA	#0
   5021  f8cf		       85 d6		      STA	_Ch0_Sound
   5022  f8d1		       85 19		      STA	AUDV0
   5023  f8d3		       24 ec		      BIT	_Bit7_Last_Life
   5024  f8d5		       10 06		      BPL	.skip53then
   5025  f8d7				   .condpart54
   5026  f8d7		       a5 ec		      LDA	_Bit2_Game_Control
   5027  f8d9		       09 04		      ORA	#4
   5028  f8db		       85 ec		      STA	_Bit2_Game_Control
   5029  f8dd				   .skip53then
   5030  f8dd				   .skipL0141
   5031  f8dd				   .
   5032  f8dd							; 
   5033  f8dd
   5034  f8dd				   .__Skip_Sound2
   5035  f8dd							; __Skip_Sound2
   5036  f8dd
   5037  f8dd				   .
   5038  f8dd							; 
   5039  f8dd
   5040  f8dd				   .
   5041  f8dd							; 
   5042  f8dd
   5043  f8dd				   .
   5044  f8dd							; 
   5045  f8dd
   5046  f8dd				   .
   5047  f8dd							; 
   5048  f8dd
   5049  f8dd				   .
   5050  f8dd							; 
   5051  f8dd
   5052  f8dd				   .
   5053  f8dd							; 
   5054  f8dd
   5055  f8dd				   .
   5056  f8dd							; 
   5057  f8dd
   5058  f8dd				   .
   5059  f8dd							; 
   5060  f8dd
   5061  f8dd				   .
   5062  f8dd							; 
   5063  f8dd
   5064  f8dd				   .
   5065  f8dd							; 
   5066  f8dd
   5067  f8dd				   .
   5068  f8dd							; 
   5069  f8dd
   5070  f8dd				   .
   5071  f8dd							; 
   5072  f8dd
   5073  f8dd				   .L0142		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Flip
   5074  f8dd
   5075  f8dd		       a5 ec		      LDA	_Bit3_Auto_Play
   5076  f8df		       29 08		      AND	#8
   5077  f8e1		       d0 03		      BNE	.skipL0142
   5078  f8e3				   .condpart55
   5079  f8e3		       4c 2f f9 	      jmp	.__AP_Skip_Flip
   5080  f8e6
   5081  f8e6				   .skipL0142
   5082  f8e6				   .
   5083  f8e6							; 
   5084  f8e6
   5085  f8e6				   .
   5086  f8e6							; 
   5087  f8e6
   5088  f8e6				   .
   5089  f8e6							; 
   5090  f8e6
   5091  f8e6				   .
   5092  f8e6							; 
   5093  f8e6
   5094  f8e6				   .L0143		;  _AP_2_Sec_Score_Flip  =  _AP_2_Sec_Score_Flip  +  1
   5095  f8e6
   5096  f8e6		       e6 dc		      INC	_AP_2_Sec_Score_Flip
   5097  f8e8				   .
   5098  f8e8							; 
   5099  f8e8
   5100  f8e8				   .
   5101  f8e8							; 
   5102  f8e8
   5103  f8e8				   .
   5104  f8e8							; 
   5105  f8e8
   5106  f8e8				   .
   5107  f8e8							; 
   5108  f8e8
   5109  f8e8				   .
   5110  f8e8							; 
   5111  f8e8
   5112  f8e8				   .L0144		;  if _AP_2_Sec_Score_Flip  <	120 then goto __AP_Skip_Flip
   5113  f8e8
   5114  f8e8		       a5 dc		      LDA	_AP_2_Sec_Score_Flip
   5115  f8ea		       c9 78		      CMP	#120
   5116  f8ec		       b0 03		      BCS	.skipL0144
   5117  f8ee				   .condpart56
   5118  f8ee		       4c 2f f9 	      jmp	.__AP_Skip_Flip
   5119  f8f1
   5120  f8f1				   .skipL0144
   5121  f8f1				   .
   5122  f8f1							; 
   5123  f8f1
   5124  f8f1				   .
   5125  f8f1							; 
   5126  f8f1
   5127  f8f1				   .
   5128  f8f1							; 
   5129  f8f1
   5130  f8f1				   .
   5131  f8f1							; 
   5132  f8f1
   5133  f8f1				   .L0145		;  _AP_2_Sec_Score_Flip  =  0	:  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   5134  f8f1
   5135  f8f1		       a9 00		      LDA	#0
   5136  f8f3		       85 dc		      STA	_AP_2_Sec_Score_Flip
   5137  f8f5		       a5 ec		      LDA	_Bit6_Swap_Scores
   5138  f8f7		       29 40		      AND	#64
   5139  f8f9		       08		      PHP
   5140  f8fa		       a5 ec		      LDA	_Bit6_Swap_Scores
   5141  f8fc		       29 bf		      AND	#191
   5142  f8fe		       28		      PLP
   5143  f8ff		       d0 02		      .byte.b	$D0, $02
   5144  f901		       09 40		      ORA	#64
   5145  f903		       85 ec		      STA	_Bit6_Swap_Scores
   5146  f905				   .
   5147  f905							; 
   5148  f905
   5149  f905				   .
   5150  f905							; 
   5151  f905
   5152  f905				   .
   5153  f905							; 
   5154  f905
   5155  f905				   .
   5156  f905							; 
   5157  f905
   5158  f905				   .L0146		;  if !_Bit6_Swap_Scores{6} then goto __AP_Skip_HiScore_Swap
   5159  f905
   5160  f905		       24 ec		      BIT	_Bit6_Swap_Scores
   5161  f907		       70 03		      BVS	.skipL0146
   5162  f909				   .condpart57
   5163  f909		       4c 1f f9 	      jmp	.__AP_Skip_HiScore_Swap
   5164  f90c
   5165  f90c				   .skipL0146
   5166  f90c				   .
   5167  f90c							; 
   5168  f90c
   5169  f90c				   .
   5170  f90c							; 
   5171  f90c
   5172  f90c				   .
   5173  f90c							; 
   5174  f90c
   5175  f90c				   .
   5176  f90c							; 
   5177  f90c
   5178  f90c				   .L0147		;  scorecolor	=  $AE
   5179  f90c
   5180  f90c		       a9 ae		      LDA	#$AE
   5181  f90e		       85 a3		      STA	scorecolor
   5182  f910				   .
   5183  f910							; 
   5184  f910
   5185  f910				   .L0148		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   5186  f910
   5187  f910		       a5 e9		      LDA	_High_Score1
   5188  f912		       85 93		      STA	_sc1
   5189  f914		       a5 ea		      LDA	_High_Score2
   5190  f916		       85 94		      STA	_sc2
   5191  f918		       a5 eb		      LDA	_High_Score3
   5192  f91a		       85 95		      STA	_sc3
   5193  f91c				   .
   5194  f91c							; 
   5195  f91c
   5196  f91c				   .L0149		;  goto __AP_Skip_Flip
   5197  f91c
   5198  f91c		       4c 2f f9 	      jmp	.__AP_Skip_Flip
   5199  f91f
   5200  f91f				   .
   5201  f91f							; 
   5202  f91f
   5203  f91f				   .__AP_Skip_HiScore_Swap
   5204  f91f							; __AP_Skip_HiScore_Swap
   5205  f91f
   5206  f91f				   .
   5207  f91f							; 
   5208  f91f
   5209  f91f				   .
   5210  f91f							; 
   5211  f91f
   5212  f91f				   .
   5213  f91f							; 
   5214  f91f
   5215  f91f				   .
   5216  f91f							; 
   5217  f91f
   5218  f91f				   .L0150		;  scorecolor	=  $1C
   5219  f91f
   5220  f91f		       a9 1c		      LDA	#$1C
   5221  f921		       85 a3		      STA	scorecolor
   5222  f923				   .
   5223  f923							; 
   5224  f923
   5225  f923				   .L0151		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   5226  f923
   5227  f923		       a5 e6		      LDA	_Score1_Mem
   5228  f925		       85 93		      STA	_sc1
   5229  f927		       a5 e7		      LDA	_Score2_Mem
   5230  f929		       85 94		      STA	_sc2
   5231  f92b		       a5 e8		      LDA	_Score3_Mem
   5232  f92d		       85 95		      STA	_sc3
   5233  f92f				   .
   5234  f92f							; 
   5235  f92f
   5236  f92f				   .__AP_Skip_Flip
   5237  f92f							; __AP_Skip_Flip
   5238  f92f
   5239  f92f				   .
   5240  f92f							; 
   5241  f92f
   5242  f92f				   .
   5243  f92f							; 
   5244  f92f
   5245  f92f				   .
   5246  f92f							; 
   5247  f92f
   5248  f92f				   .
   5249  f92f							; 
   5250  f92f
   5251  f92f				   .
   5252  f92f							; 
   5253  f92f
   5254  f92f				   .
   5255  f92f							; 
   5256  f92f
   5257  f92f				   .
   5258  f92f							; 
   5259  f92f
   5260  f92f				   .
   5261  f92f							; 
   5262  f92f
   5263  f92f				   .
   5264  f92f							; 
   5265  f92f
   5266  f92f				   .
   5267  f92f							; 
   5268  f92f
   5269  f92f				   .L0152		;  if _Bit3_Auto_Play{3} then goto __AP_Skip_Pause
   5270  f92f
   5271  f92f		       a5 ec		      LDA	_Bit3_Auto_Play
   5272  f931		       29 08		      AND	#8
   5273  f933		       f0 03		      BEQ	.skipL0152
   5274  f935				   .condpart58
   5275  f935		       4c 74 f9 	      jmp	.__AP_Skip_Pause
   5276  f938
   5277  f938				   .skipL0152
   5278  f938				   .
   5279  f938							; 
   5280  f938
   5281  f938				   .
   5282  f938							; 
   5283  f938
   5284  f938				   .
   5285  f938							; 
   5286  f938
   5287  f938				   .
   5288  f938							; 
   5289  f938
   5290  f938				   .L0153		;  _Bit1_BW_Check{1}  =  0
   5291  f938
   5292  f938		       a5 e5		      LDA	_Bit1_BW_Check
   5293  f93a		       29 fd		      AND	#253
   5294  f93c		       85 e5		      STA	_Bit1_BW_Check
   5295  f93e				   .
   5296  f93e							; 
   5297  f93e
   5298  f93e				   .L0154		;  if switchbw then _Bit1_BW_Check{1}	=  1
   5299  f93e
   5300  f93e		       a9 08		      lda	#8
   5301  f940		       2c 82 02 	      bit	SWCHB
   5302  f943		       d0 06		      BNE	.skipL0154
   5303  f945				   .condpart59
   5304  f945		       a5 e5		      LDA	_Bit1_BW_Check
   5305  f947		       09 02		      ORA	#2
   5306  f949		       85 e5		      STA	_Bit1_BW_Check
   5307  f94b				   .skipL0154
   5308  f94b				   .
   5309  f94b							; 
   5310  f94b
   5311  f94b				   .
   5312  f94b							; 
   5313  f94b
   5314  f94b				   .
   5315  f94b							; 
   5316  f94b
   5317  f94b				   .
   5318  f94b							; 
   5319  f94b
   5320  f94b				   .
   5321  f94b							; 
   5322  f94b
   5323  f94b				   .L0155		;  if _Bit0_BW_Mem{0} then if !_Bit1_BW_Check{1} then goto __Pause_Setup
   5324  f94b
   5325  f94b		       a5 e5		      LDA	_Bit0_BW_Mem
   5326  f94d		       4a		      LSR
   5327  f94e		       90 09		      BCC	.skipL0155
   5328  f950				   .condpart60
   5329  f950		       a5 e5		      LDA	_Bit1_BW_Check
   5330  f952		       29 02		      AND	#2
   5331  f954		       d0 03		      BNE	.skip60then
   5332  f956				   .condpart61
   5333  f956		       4c 6f fb 	      jmp	.__Pause_Setup
   5334  f959
   5335  f959				   .skip60then
   5336  f959				   .skipL0155
   5337  f959				   .
   5338  f959							; 
   5339  f959
   5340  f959				   .L0156		;  if !_Bit0_BW_Mem{0} then if _Bit1_BW_Check{1} then goto __Pause_Setup
   5341  f959
   5342  f959		       a5 e5		      LDA	_Bit0_BW_Mem
   5343  f95b		       4a		      LSR
   5344  f95c		       b0 09		      BCS	.skipL0156
   5345  f95e				   .condpart62
   5346  f95e		       a5 e5		      LDA	_Bit1_BW_Check
   5347  f960		       29 02		      AND	#2
   5348  f962		       f0 03		      BEQ	.skip62then
   5349  f964				   .condpart63
   5350  f964		       4c 6f fb 	      jmp	.__Pause_Setup
   5351  f967
   5352  f967				   .skip62then
   5353  f967				   .skipL0156
   5354  f967				   .
   5355  f967							; 
   5356  f967
   5357  f967				   .
   5358  f967							; 
   5359  f967
   5360  f967				   .
   5361  f967							; 
   5362  f967
   5363  f967				   .
   5364  f967							; 
   5365  f967
   5366  f967				   .L0157		;  if joy1fire  &&  !_Bit1_FireB_Restrainer{1} then goto __Pause_Setup
   5367  f967
   5368  f967		       24 0d		      bit	INPT5
   5369  f969		       30 09		      BMI	.skipL0157
   5370  f96b				   .condpart64
   5371  f96b		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   5372  f96d		       29 02		      AND	#2
   5373  f96f		       d0 03		      BNE	.skip64then
   5374  f971				   .condpart65
   5375  f971		       4c 6f fb 	      jmp	.__Pause_Setup
   5376  f974
   5377  f974				   .skip64then
   5378  f974				   .skipL0157
   5379  f974				   .
   5380  f974							; 
   5381  f974
   5382  f974				   .__AP_Skip_Pause
   5383  f974							; __AP_Skip_Pause
   5384  f974
   5385  f974				   .
   5386  f974							; 
   5387  f974
   5388  f974				   .
   5389  f974							; 
   5390  f974
   5391  f974				   .
   5392  f974							; 
   5393  f974
   5394  f974				   .
   5395  f974							; 
   5396  f974
   5397  f974				   .
   5398  f974							; 
   5399  f974
   5400  f974				   .
   5401  f974							; 
   5402  f974
   5403  f974				   .
   5404  f974							; 
   5405  f974
   5406  f974				   .L0158		;  drawscreen
   5407  f974
   5408  f974		       20 c7 f3 	      jsr	drawscreen
   5409  f977				   .
   5410  f977							; 
   5411  f977
   5412  f977				   .
   5413  f977							; 
   5414  f977
   5415  f977				   .
   5416  f977							; 
   5417  f977
   5418  f977				   .
   5419  f977							; 
   5420  f977
   5421  f977				   .
   5422  f977							; 
   5423  f977
   5424  f977				   .
   5425  f977							; 
   5426  f977
   5427  f977				   .
   5428  f977							; 
   5429  f977
   5430  f977				   .
   5431  f977							; 
   5432  f977
   5433  f977				   .
   5434  f977							; 
   5435  f977
   5436  f977				   .
   5437  f977							; 
   5438  f977
   5439  f977				   .
   5440  f977							; 
   5441  f977
   5442  f977				   .
   5443  f977							; 
   5444  f977
   5445  f977				   .
   5446  f977							; 
   5447  f977
   5448  f977				   .
   5449  f977							; 
   5450  f977
   5451  f977				   .
   5452  f977							; 
   5453  f977
   5454  f977				   .L0159		;  if !_Bit2_Game_Control{2} then goto __Skip_Check_G_Over
   5455  f977
   5456  f977		       a5 ec		      LDA	_Bit2_Game_Control
   5457  f979		       29 04		      AND	#4
   5458  f97b		       d0 03		      BNE	.skipL0159
   5459  f97d				   .condpart66
   5460  f97d		       4c 9e f9 	      jmp	.__Skip_Check_G_Over
   5461  f980
   5462  f980				   .skipL0159
   5463  f980				   .
   5464  f980							; 
   5465  f980
   5466  f980				   .
   5467  f980							; 
   5468  f980
   5469  f980				   .
   5470  f980							; 
   5471  f980
   5472  f980				   .
   5473  f980							; 
   5474  f980
   5475  f980				   .
   5476  f980							; 
   5477  f980
   5478  f980				   .L0160		;  if _Bit3_Auto_Play{3} then _Bit2_Game_Control{2}  =  0  :  _sc1  =	_Score1_Mem  :	_sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem  :  goto __Start_Restart
   5479  f980
   5480  f980		       a5 ec		      LDA	_Bit3_Auto_Play
   5481  f982		       29 08		      AND	#8
   5482  f984		       f0 15		      BEQ	.skipL0160
   5483  f986				   .condpart67
   5484  f986		       a5 ec		      LDA	_Bit2_Game_Control
   5485  f988		       29 fb		      AND	#251
   5486  f98a		       85 ec		      STA	_Bit2_Game_Control
   5487  f98c		       a5 e6		      LDA	_Score1_Mem
   5488  f98e		       85 93		      STA	_sc1
   5489  f990		       a5 e7		      LDA	_Score2_Mem
   5490  f992		       85 94		      STA	_sc2
   5491  f994		       a5 e8		      LDA	_Score3_Mem
   5492  f996		       85 95		      STA	_sc3
   5493  f998		       4c 67 f4 	      jmp	.__Start_Restart
   5494  f99b
   5495  f99b				   .skipL0160
   5496  f99b				   .
   5497  f99b							; 
   5498  f99b
   5499  f99b				   .
   5500  f99b							; 
   5501  f99b
   5502  f99b				   .
   5503  f99b							; 
   5504  f99b
   5505  f99b				   .
   5506  f99b							; 
   5507  f99b
   5508  f99b				   .L0161		;  goto __Game_Over_Setup
   5509  f99b
   5510  f99b		       4c 21 fa 	      jmp	.__Game_Over_Setup
   5511  f99e
   5512  f99e				   .
   5513  f99e							; 
   5514  f99e
   5515  f99e				   .__Skip_Check_G_Over
   5516  f99e							; __Skip_Check_G_Over
   5517  f99e
   5518  f99e				   .
   5519  f99e							; 
   5520  f99e
   5521  f99e				   .
   5522  f99e							; 
   5523  f99e
   5524  f99e				   .
   5525  f99e							; 
   5526  f99e
   5527  f99e				   .
   5528  f99e							; 
   5529  f99e
   5530  f99e				   .
   5531  f99e							; 
   5532  f99e
   5533  f99e				   .
   5534  f99e							; 
   5535  f99e
   5536  f99e				   .
   5537  f99e							; 
   5538  f99e
   5539  f99e				   .
   5540  f99e							; 
   5541  f99e
   5542  f99e				   .
   5543  f99e							; 
   5544  f99e
   5545  f99e				   .
   5546  f99e							; 
   5547  f99e
   5548  f99e				   .
   5549  f99e							; 
   5550  f99e
   5551  f99e				   .
   5552  f99e							; 
   5553  f99e
   5554  f99e				   .
   5555  f99e							; 
   5556  f99e
   5557  f99e				   .
   5558  f99e							; 
   5559  f99e
   5560  f99e				   .L0162		;  if !_Bit3_Auto_Play{3} then goto __AP_Skip_Reset
   5561  f99e
   5562  f99e		       a5 ec		      LDA	_Bit3_Auto_Play
   5563  f9a0		       29 08		      AND	#8
   5564  f9a2		       d0 03		      BNE	.skipL0162
   5565  f9a4				   .condpart68
   5566  f9a4		       4c c4 f9 	      jmp	.__AP_Skip_Reset
   5567  f9a7
   5568  f9a7				   .skipL0162
   5569  f9a7				   .
   5570  f9a7							; 
   5571  f9a7
   5572  f9a7				   .
   5573  f9a7							; 
   5574  f9a7
   5575  f9a7				   .
   5576  f9a7							; 
   5577  f9a7
   5578  f9a7				   .
   5579  f9a7							; 
   5580  f9a7
   5581  f9a7				   .
   5582  f9a7							; 
   5583  f9a7
   5584  f9a7				   .
   5585  f9a7							; 
   5586  f9a7
   5587  f9a7				   .L0163		;  if switchreset  ||	joy0fire then _Bit3_Auto_Play{3}  =  0	:  _Bit2_Game_Control{2}  =  1	:  goto __Start_Restart
   5588  f9a7
   5589  f9a7		       a9 01		      lda	#1
   5590  f9a9		       2c 82 02 	      bit	SWCHB
   5591  f9ac		       d0 03		      BNE	.skipL0163
   5592  f9ae				   .condpart69
   5593  f9ae		       4c b5 f9 	      jmp	.condpart70
   5594  f9b1				   .skipL0163
   5595  f9b1		       24 0c		      bit	INPT4
   5596  f9b3		       30 0f		      BMI	.skip2OR
   5597  f9b5				   .condpart70
   5598  f9b5		       a5 ec		      LDA	_Bit3_Auto_Play
   5599  f9b7		       29 f7		      AND	#247
   5600  f9b9		       85 ec		      STA	_Bit3_Auto_Play
   5601  f9bb		       a5 ec		      LDA	_Bit2_Game_Control
   5602  f9bd		       09 04		      ORA	#4
   5603  f9bf		       85 ec		      STA	_Bit2_Game_Control
   5604  f9c1		       4c 67 f4 	      jmp	.__Start_Restart
   5605  f9c4
   5606  f9c4				   .skip2OR
   5607  f9c4				   .
   5608  f9c4							; 
   5609  f9c4
   5610  f9c4				   .__AP_Skip_Reset
   5611  f9c4							; __AP_Skip_Reset
   5612  f9c4
   5613  f9c4				   .
   5614  f9c4							; 
   5615  f9c4
   5616  f9c4				   .
   5617  f9c4							; 
   5618  f9c4
   5619  f9c4				   .
   5620  f9c4							; 
   5621  f9c4
   5622  f9c4				   .
   5623  f9c4							; 
   5624  f9c4
   5625  f9c4				   .
   5626  f9c4							; 
   5627  f9c4
   5628  f9c4				   .L0164		;  if !switchreset then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Main_Loop
   5629  f9c4
   5630  f9c4		       a9 01		      lda	#1
   5631  f9c6		       2c 82 02 	      bit	SWCHB
   5632  f9c9		       f0 09		      BEQ	.skipL0164
   5633  f9cb				   .condpart71
   5634  f9cb		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5635  f9cd		       29 fe		      AND	#254
   5636  f9cf		       85 ec		      STA	_Bit0_Reset_Restrainer
   5637  f9d1		       4c 14 f6 	      jmp	.__Main_Loop
   5638  f9d4
   5639  f9d4				   .skipL0164
   5640  f9d4				   .
   5641  f9d4							; 
   5642  f9d4
   5643  f9d4				   .
   5644  f9d4							; 
   5645  f9d4
   5646  f9d4				   .
   5647  f9d4							; 
   5648  f9d4
   5649  f9d4				   .
   5650  f9d4							; 
   5651  f9d4
   5652  f9d4				   .
   5653  f9d4							; 
   5654  f9d4
   5655  f9d4				   .L0165		;  if _Bit0_Reset_Restrainer{0} then goto __Main_Loop
   5656  f9d4
   5657  f9d4		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   5658  f9d6		       4a		      LSR
   5659  f9d7		       90 03		      BCC	.skipL0165
   5660  f9d9				   .condpart72
   5661  f9d9		       4c 14 f6 	      jmp	.__Main_Loop
   5662  f9dc
   5663  f9dc				   .skipL0165
   5664  f9dc				   .
   5665  f9dc							; 
   5666  f9dc
   5667  f9dc				   .
   5668  f9dc							; 
   5669  f9dc
   5670  f9dc				   .
   5671  f9dc							; 
   5672  f9dc
   5673  f9dc				   .
   5674  f9dc							; 
   5675  f9dc
   5676  f9dc				   .L0166		;  _Bit2_Game_Control{2}  =  0
   5677  f9dc
   5678  f9dc		       a5 ec		      LDA	_Bit2_Game_Control
   5679  f9de		       29 fb		      AND	#251
   5680  f9e0		       85 ec		      STA	_Bit2_Game_Control
   5681  f9e2				   .
   5682  f9e2							; 
   5683  f9e2
   5684  f9e2				   .
   5685  f9e2							; 
   5686  f9e2
   5687  f9e2				   .
   5688  f9e2							; 
   5689  f9e2
   5690  f9e2				   .
   5691  f9e2							; 
   5692  f9e2
   5693  f9e2				   .
   5694  f9e2							; 
   5695  f9e2
   5696  f9e2				   .L0167		;  goto __Game_Over_Setup
   5697  f9e2
   5698  f9e2		       4c 21 fa 	      jmp	.__Game_Over_Setup
   5699  f9e5
   5700  f9e5				   .
   5701  f9e5							; 
   5702  f9e5
   5703  f9e5				   .
   5704  f9e5							; 
   5705  f9e5
   5706  f9e5				   .
   5707  f9e5							; 
   5708  f9e5
   5709  f9e5				   .
   5710  f9e5							; 
   5711  f9e5
   5712  f9e5				   .
   5713  f9e5							; 
   5714  f9e5
   5715  f9e5				   .
   5716  f9e5							; 
   5717  f9e5
   5718  f9e5				   .
   5719  f9e5							; 
   5720  f9e5
   5721  f9e5				   .
   5722  f9e5							; 
   5723  f9e5
   5724  f9e5				   .
   5725  f9e5							; 
   5726  f9e5
   5727  f9e5				   .
   5728  f9e5							; 
   5729  f9e5
   5730  f9e5				   .
   5731  f9e5							; 
   5732  f9e5
   5733  f9e5				   .
   5734  f9e5							; 
   5735  f9e5
   5736  f9e5				   .
   5737  f9e5							; 
   5738  f9e5
   5739  f9e5				   .
   5740  f9e5							; 
   5741  f9e5
   5742  f9e5				   .
   5743  f9e5							; 
   5744  f9e5
   5745  f9e5				   .
   5746  f9e5							; 
   5747  f9e5
   5748  f9e5				   .
   5749  f9e5							; 
   5750  f9e5
   5751  f9e5				   .
   5752  f9e5							; 
   5753  f9e5
   5754  f9e5				   .
   5755  f9e5							; 
   5756  f9e5
   5757  f9e5				   .
   5758  f9e5							; 
   5759  f9e5
   5760  f9e5				   .__Sq00
   5761  f9e5							; __Sq00
   5762  f9e5
   5763  f9e5				   .L0168		;  player1:
   5764  f9e5
   5765  f9e5		       a2 c1		      LDX	#<playerL0168_1
   5766  f9e7		       86 8c		      STX	player1pointerlo
   5767  f9e9		       a9 fd		      LDA	#>playerL0168_1
   5768  f9eb		       85 8d		      STA	player1pointerhi
   5769  f9ed		       a9 03		      LDA	#3
   5770  f9ef		       85 8f		      STA	player1height
   5771  f9f1				   .
   5772  f9f1							; 
   5773  f9f1
   5774  f9f1				   .L0169		;  goto __Squirrel_Frame_Done
   5775  f9f1
   5776  f9f1		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   5777  f9f4
   5778  f9f4				   .
   5779  f9f4							; 
   5780  f9f4
   5781  f9f4				   .
   5782  f9f4							; 
   5783  f9f4
   5784  f9f4				   .__Sq01
   5785  f9f4							; __Sq01
   5786  f9f4
   5787  f9f4				   .L0170		;  player1:
   5788  f9f4
   5789  f9f4		       a2 c5		      LDX	#<playerL0170_1
   5790  f9f6		       86 8c		      STX	player1pointerlo
   5791  f9f8		       a9 fd		      LDA	#>playerL0170_1
   5792  f9fa		       85 8d		      STA	player1pointerhi
   5793  f9fc		       a9 03		      LDA	#3
   5794  f9fe		       85 8f		      STA	player1height
   5795  fa00				   .
   5796  fa00							; 
   5797  fa00
   5798  fa00				   .L0171		;  goto __Squirrel_Frame_Done
   5799  fa00
   5800  fa00		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   5801  fa03
   5802  fa03				   .
   5803  fa03							; 
   5804  fa03
   5805  fa03				   .
   5806  fa03							; 
   5807  fa03
   5808  fa03				   .__Sq02
   5809  fa03							; __Sq02
   5810  fa03
   5811  fa03				   .L0172		;  player1:
   5812  fa03
   5813  fa03		       a2 c9		      LDX	#<playerL0172_1
   5814  fa05		       86 8c		      STX	player1pointerlo
   5815  fa07		       a9 fd		      LDA	#>playerL0172_1
   5816  fa09		       85 8d		      STA	player1pointerhi
   5817  fa0b		       a9 03		      LDA	#3
   5818  fa0d		       85 8f		      STA	player1height
   5819  fa0f				   .
   5820  fa0f							; 
   5821  fa0f
   5822  fa0f				   .L0173		;  goto __Squirrel_Frame_Done
   5823  fa0f
   5824  fa0f		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   5825  fa12
   5826  fa12				   .
   5827  fa12							; 
   5828  fa12
   5829  fa12				   .
   5830  fa12							; 
   5831  fa12
   5832  fa12				   .__Sq03
   5833  fa12							; __Sq03
   5834  fa12
   5835  fa12				   .L0174		;  player1:
   5836  fa12
   5837  fa12		       a2 cd		      LDX	#<playerL0174_1
   5838  fa14		       86 8c		      STX	player1pointerlo
   5839  fa16		       a9 fd		      LDA	#>playerL0174_1
   5840  fa18		       85 8d		      STA	player1pointerhi
   5841  fa1a		       a9 03		      LDA	#3
   5842  fa1c		       85 8f		      STA	player1height
   5843  fa1e				   .
   5844  fa1e							; 
   5845  fa1e
   5846  fa1e				   .L0175		;  goto __Squirrel_Frame_Done
   5847  fa1e
   5848  fa1e		       4c 5a f6 	      jmp	.__Squirrel_Frame_Done
   5849  fa21
   5850  fa21				   .
   5851  fa21							; 
   5852  fa21
   5853  fa21				   .
   5854  fa21							; 
   5855  fa21
   5856  fa21				   .
   5857  fa21							; 
   5858  fa21
   5859  fa21				   .
   5860  fa21							; 
   5861  fa21
   5862  fa21				   .
   5863  fa21							; 
   5864  fa21
   5865  fa21				   .
   5866  fa21							; 
   5867  fa21
   5868  fa21				   .
   5869  fa21							; 
   5870  fa21
   5871  fa21				   .
   5872  fa21							; 
   5873  fa21
   5874  fa21				   .
   5875  fa21							; 
   5876  fa21
   5877  fa21				   .
   5878  fa21							; 
   5879  fa21
   5880  fa21				   .
   5881  fa21							; 
   5882  fa21
   5883  fa21				   .__Game_Over_Setup
   5884  fa21							; __Game_Over_Setup
   5885  fa21
   5886  fa21				   .
   5887  fa21							; 
   5888  fa21
   5889  fa21				   .
   5890  fa21							; 
   5891  fa21
   5892  fa21				   .
   5893  fa21							; 
   5894  fa21
   5895  fa21				   .
   5896  fa21							; 
   5897  fa21
   5898  fa21				   .
   5899  fa21							; 
   5900  fa21
   5901  fa21				   .
   5902  fa21							; 
   5903  fa21
   5904  fa21				   .
   5905  fa21							; 
   5906  fa21
   5907  fa21				   .
   5908  fa21							; 
   5909  fa21
   5910  fa21				   .
   5911  fa21							; 
   5912  fa21
   5913  fa21				   .
   5914  fa21							; 
   5915  fa21
   5916  fa21				   .
   5917  fa21							; 
   5918  fa21
   5919  fa21				   .L0176		;  if _sc1  >	_High_Score1 then goto __New_High_Score
   5920  fa21
   5921  fa21		       a5 e9		      LDA	_High_Score1
   5922  fa23		       c5 93		      CMP	_sc1
   5923  fa25		       b0 03		      BCS	.skipL0176
   5924  fa27				   .condpart73
   5925  fa27		       4c 5a fa 	      jmp	.__New_High_Score
   5926  fa2a
   5927  fa2a				   .skipL0176
   5928  fa2a				   .L0177		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
   5929  fa2a
   5930  fa2a		       a5 93		      LDA	_sc1
   5931  fa2c		       c5 e9		      CMP	_High_Score1
   5932  fa2e		       b0 03		      BCS	.skipL0177
   5933  fa30				   .condpart74
   5934  fa30		       4c 66 fa 	      jmp	.__Skip_High_Score
   5935  fa33
   5936  fa33				   .skipL0177
   5937  fa33				   .
   5938  fa33							; 
   5939  fa33
   5940  fa33				   .
   5941  fa33							; 
   5942  fa33
   5943  fa33				   .
   5944  fa33							; 
   5945  fa33
   5946  fa33				   .
   5947  fa33							; 
   5948  fa33
   5949  fa33				   .L0178		;  if _sc2  >	_High_Score2 then goto __New_High_Score
   5950  fa33
   5951  fa33		       a5 ea		      LDA	_High_Score2
   5952  fa35		       c5 94		      CMP	_sc2
   5953  fa37		       b0 03		      BCS	.skipL0178
   5954  fa39				   .condpart75
   5955  fa39		       4c 5a fa 	      jmp	.__New_High_Score
   5956  fa3c
   5957  fa3c				   .skipL0178
   5958  fa3c				   .L0179		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
   5959  fa3c
   5960  fa3c		       a5 94		      LDA	_sc2
   5961  fa3e		       c5 ea		      CMP	_High_Score2
   5962  fa40		       b0 03		      BCS	.skipL0179
   5963  fa42				   .condpart76
   5964  fa42		       4c 66 fa 	      jmp	.__Skip_High_Score
   5965  fa45
   5966  fa45				   .skipL0179
   5967  fa45				   .
   5968  fa45							; 
   5969  fa45
   5970  fa45				   .
   5971  fa45							; 
   5972  fa45
   5973  fa45				   .
   5974  fa45							; 
   5975  fa45
   5976  fa45				   .
   5977  fa45							; 
   5978  fa45
   5979  fa45				   .L0180		;  if _sc3  >	_High_Score3 then goto __New_High_Score
   5980  fa45
   5981  fa45		       a5 eb		      LDA	_High_Score3
   5982  fa47		       c5 95		      CMP	_sc3
   5983  fa49		       b0 03		      BCS	.skipL0180
   5984  fa4b				   .condpart77
   5985  fa4b		       4c 5a fa 	      jmp	.__New_High_Score
   5986  fa4e
   5987  fa4e				   .skipL0180
   5988  fa4e				   .L0181		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
   5989  fa4e
   5990  fa4e		       a5 95		      LDA	_sc3
   5991  fa50		       c5 eb		      CMP	_High_Score3
   5992  fa52		       b0 03		      BCS	.skipL0181
   5993  fa54				   .condpart78
   5994  fa54		       4c 66 fa 	      jmp	.__Skip_High_Score
   5995  fa57
   5996  fa57				   .skipL0181
   5997  fa57				   .
   5998  fa57							; 
   5999  fa57
   6000  fa57				   .
   6001  fa57							; 
   6002  fa57
   6003  fa57				   .
   6004  fa57							; 
   6005  fa57
   6006  fa57				   .
   6007  fa57							; 
   6008  fa57
   6009  fa57				   .L0182		;  goto __Skip_High_Score
   6010  fa57
   6011  fa57		       4c 66 fa 	      jmp	.__Skip_High_Score
   6012  fa5a
   6013  fa5a				   .
   6014  fa5a							; 
   6015  fa5a
   6016  fa5a				   .
   6017  fa5a							; 
   6018  fa5a
   6019  fa5a				   .
   6020  fa5a							; 
   6021  fa5a
   6022  fa5a				   .
   6023  fa5a							; 
   6024  fa5a
   6025  fa5a				   .__New_High_Score
   6026  fa5a							; __New_High_Score
   6027  fa5a
   6028  fa5a				   .
   6029  fa5a							; 
   6030  fa5a
   6031  fa5a				   .L0183		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
   6032  fa5a
   6033  fa5a		       a5 93		      LDA	_sc1
   6034  fa5c		       85 e9		      STA	_High_Score1
   6035  fa5e		       a5 94		      LDA	_sc2
   6036  fa60		       85 ea		      STA	_High_Score2
   6037  fa62		       a5 95		      LDA	_sc3
   6038  fa64		       85 eb		      STA	_High_Score3
   6039  fa66				   .
   6040  fa66							; 
   6041  fa66
   6042  fa66				   .__Skip_High_Score
   6043  fa66							; __Skip_High_Score
   6044  fa66
   6045  fa66				   .
   6046  fa66							; 
   6047  fa66
   6048  fa66				   .
   6049  fa66							; 
   6050  fa66
   6051  fa66				   .
   6052  fa66							; 
   6053  fa66
   6054  fa66				   .
   6055  fa66							; 
   6056  fa66
   6057  fa66				   .
   6058  fa66							; 
   6059  fa66
   6060  fa66				   .L0184		;  if !_Bit2_Game_Control{2} then goto __Start_Restart
   6061  fa66
   6062  fa66		       a5 ec		      LDA	_Bit2_Game_Control
   6063  fa68		       29 04		      AND	#4
   6064  fa6a		       d0 03		      BNE	.skipL0184
   6065  fa6c				   .condpart79
   6066  fa6c		       4c 67 f4 	      jmp	.__Start_Restart
   6067  fa6f
   6068  fa6f				   .skipL0184
   6069  fa6f				   .
   6070  fa6f							; 
   6071  fa6f
   6072  fa6f				   .
   6073  fa6f							; 
   6074  fa6f
   6075  fa6f				   .
   6076  fa6f							; 
   6077  fa6f
   6078  fa6f				   .
   6079  fa6f							; 
   6080  fa6f
   6081  fa6f				   .
   6082  fa6f							; 
   6083  fa6f
   6084  fa6f				   .
   6085  fa6f							; 
   6086  fa6f
   6087  fa6f				   .L0185		;  _Score1_Mem  =  _sc1  :  _Score2_Mem  =  _sc2  :  _Score3_Mem  =  _sc3
   6088  fa6f
   6089  fa6f		       a5 93		      LDA	_sc1
   6090  fa71		       85 e6		      STA	_Score1_Mem
   6091  fa73		       a5 94		      LDA	_sc2
   6092  fa75		       85 e7		      STA	_Score2_Mem
   6093  fa77		       a5 95		      LDA	_sc3
   6094  fa79		       85 e8		      STA	_Score3_Mem
   6095  fa7b				   .
   6096  fa7b							; 
   6097  fa7b
   6098  fa7b				   .
   6099  fa7b							; 
   6100  fa7b
   6101  fa7b				   .
   6102  fa7b							; 
   6103  fa7b
   6104  fa7b				   .
   6105  fa7b							; 
   6106  fa7b
   6107  fa7b				   .
   6108  fa7b							; 
   6109  fa7b
   6110  fa7b				   .
   6111  fa7b							; 
   6112  fa7b
   6113  fa7b				   .L0186		;  _Master_Counter  =	0  :  _Frame_Counter  =  0
   6114  fa7b
   6115  fa7b		       a9 00		      LDA	#0
   6116  fa7d		       85 d4		      STA	_Master_Counter
   6117  fa7f		       85 d5		      STA	_Frame_Counter
   6118  fa81				   .
   6119  fa81							; 
   6120  fa81
   6121  fa81				   .
   6122  fa81							; 
   6123  fa81
   6124  fa81				   .
   6125  fa81							; 
   6126  fa81
   6127  fa81				   .
   6128  fa81							; 
   6129  fa81
   6130  fa81				   .
   6131  fa81							; 
   6132  fa81
   6133  fa81				   .
   6134  fa81							; 
   6135  fa81
   6136  fa81				   .L0187		;  player0y  =  200  :  player1y  =  200  :  missile0y  =  200
   6137  fa81
   6138  fa81		       a9 c8		      LDA	#200
   6139  fa83		       85 85		      STA	player0y
   6140  fa85		       85 86		      STA	player1y
   6141  fa87		       85 91		      STA	missile0y
   6142  fa89				   .
   6143  fa89							; 
   6144  fa89
   6145  fa89				   .
   6146  fa89							; 
   6147  fa89
   6148  fa89				   .
   6149  fa89							; 
   6150  fa89
   6151  fa89				   .
   6152  fa89							; 
   6153  fa89
   6154  fa89				   .
   6155  fa89							; 
   6156  fa89
   6157  fa89				   .
   6158  fa89							; 
   6159  fa89
   6160  fa89				   .
   6161  fa89							; 
   6162  fa89
   6163  fa89				   .
   6164  fa89							; 
   6165  fa89
   6166  fa89				   .
   6167  fa89							; 
   6168  fa89
   6169  fa89				   .
   6170  fa89							; 
   6171  fa89
   6172  fa89				   .
   6173  fa89							; 
   6174  fa89
   6175  fa89				   .L0188		;  _Bit0_Reset_Restrainer{0}  =  1
   6176  fa89
   6177  fa89		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6178  fa8b		       09 01		      ORA	#1
   6179  fa8d		       85 ec		      STA	_Bit0_Reset_Restrainer
   6180  fa8f				   .
   6181  fa8f							; 
   6182  fa8f
   6183  fa8f				   .
   6184  fa8f							; 
   6185  fa8f
   6186  fa8f				   .
   6187  fa8f							; 
   6188  fa8f
   6189  fa8f				   .
   6190  fa8f							; 
   6191  fa8f
   6192  fa8f				   .
   6193  fa8f							; 
   6194  fa8f
   6195  fa8f				   .
   6196  fa8f							; 
   6197  fa8f
   6198  fa8f				   .L0189		;  playfield:
   6199  fa8f
   6200  fa8f				  -	      ifconst	pfres
   6201  fa8f				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   6202  fa8f					      else
   6203  fa8f		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   6204  fa91					      endif
   6205  fa91		       4c c0 fa 	      jmp	pflabel2
   6206  fa94				   PF_data2
   6207  fa94		       7e bf		      .byte.b	%01111110, %10111111
   6208  fa96					      if	(pfwidth>2)
   6209  fa96		       ff 7d		      .byte.b	%11111111, %01111101
   6210  fa98					      endif
   6211  fa98		       60 b3		      .byte.b	%01100000, %10110011
   6212  fa9a					      if	(pfwidth>2)
   6213  fa9a		       99 0d		      .byte.b	%10011001, %00001101
   6214  fa9c					      endif
   6215  fa9c		       6e bf		      .byte.b	%01101110, %10111111
   6216  fa9e					      if	(pfwidth>2)
   6217  fa9e		       99 3d		      .byte.b	%10011001, %00111101
   6218  faa0					      endif
   6219  faa0		       66 b3		      .byte.b	%01100110, %10110011
   6220  faa2					      if	(pfwidth>2)
   6221  faa2		       99 0d		      .byte.b	%10011001, %00001101
   6222  faa4					      endif
   6223  faa4		       7e b3		      .byte.b	%01111110, %10110011
   6224  faa6					      if	(pfwidth>2)
   6225  faa6		       99 7d		      .byte.b	%10011001, %01111101
   6226  faa8					      endif
   6227  faa8		       00 00		      .byte.b	%00000000, %00000000
   6228  faaa					      if	(pfwidth>2)
   6229  faaa		       00 00		      .byte.b	%00000000, %00000000
   6230  faac					      endif
   6231  faac		       1f cd		      .byte.b	%00011111, %11001101
   6232  faae					      if	(pfwidth>2)
   6233  faae		       7d 1f		      .byte.b	%01111101, %00011111
   6234  fab0					      endif
   6235  fab0		       19 cd		      .byte.b	%00011001, %11001101
   6236  fab2					      if	(pfwidth>2)
   6237  fab2		       61 19		      .byte.b	%01100001, %00011001
   6238  fab4					      endif
   6239  fab4		       19 cd		      .byte.b	%00011001, %11001101
   6240  fab6					      if	(pfwidth>2)
   6241  fab6		       79 0f		      .byte.b	%01111001, %00001111
   6242  fab8					      endif
   6243  fab8		       19 cd		      .byte.b	%00011001, %11001101
   6244  faba					      if	(pfwidth>2)
   6245  faba		       61 19		      .byte.b	%01100001, %00011001
   6246  fabc					      endif
   6247  fabc		       1f 31		      .byte.b	%00011111, %00110001
   6248  fabe					      if	(pfwidth>2)
   6249  fabe		       7d 19		      .byte.b	%01111101, %00011001
   6250  fac0					      endif
   6251  fac0				   pflabel2
   6252  fac0		       bd 94 fa 	      lda	PF_data2,x
   6253  fac3		       95 a4		      sta	playfield,x
   6254  fac5		       ca		      dex
   6255  fac6		       10 f8		      bpl	pflabel2
   6256  fac8				   .
   6257  fac8							; 
   6258  fac8
   6259  fac8				   .
   6260  fac8							; 
   6261  fac8
   6262  fac8				   .
   6263  fac8							; 
   6264  fac8
   6265  fac8				   .
   6266  fac8							; 
   6267  fac8
   6268  fac8				   .
   6269  fac8							; 
   6270  fac8
   6271  fac8				   .
   6272  fac8							; 
   6273  fac8
   6274  fac8				   .
   6275  fac8							; 
   6276  fac8
   6277  fac8				   .
   6278  fac8							; 
   6279  fac8
   6280  fac8				   .
   6281  fac8							; 
   6282  fac8
   6283  fac8				   .
   6284  fac8							; 
   6285  fac8
   6286  fac8				   .
   6287  fac8							; 
   6288  fac8
   6289  fac8				   .__Game_Over_Loop
   6290  fac8							; __Game_Over_Loop
   6291  fac8
   6292  fac8				   .
   6293  fac8							; 
   6294  fac8
   6295  fac8				   .
   6296  fac8							; 
   6297  fac8
   6298  fac8				   .
   6299  fac8							; 
   6300  fac8
   6301  fac8				   .
   6302  fac8							; 
   6303  fac8
   6304  fac8				   .
   6305  fac8							; 
   6306  fac8
   6307  fac8				   .
   6308  fac8							; 
   6309  fac8
   6310  fac8				   .
   6311  fac8							; 
   6312  fac8
   6313  fac8				   .
   6314  fac8							; 
   6315  fac8
   6316  fac8				   .
   6317  fac8							; 
   6318  fac8
   6319  fac8				   .
   6320  fac8							; 
   6321  fac8
   6322  fac8				   .
   6323  fac8							; 
   6324  fac8
   6325  fac8				   .
   6326  fac8							; 
   6327  fac8
   6328  fac8				   .
   6329  fac8							; 
   6330  fac8
   6331  fac8				   .
   6332  fac8							; 
   6333  fac8
   6334  fac8				   .
   6335  fac8							; 
   6336  fac8
   6337  fac8				   .
   6338  fac8							; 
   6339  fac8
   6340  fac8				   .
   6341  fac8							; 
   6342  fac8
   6343  fac8				   .
   6344  fac8							; 
   6345  fac8
   6346  fac8				   .
   6347  fac8							; 
   6348  fac8
   6349  fac8				   .L0190		;  _Master_Counter  =	_Master_Counter  +  1
   6350  fac8
   6351  fac8		       e6 d4		      INC	_Master_Counter
   6352  faca				   .
   6353  faca							; 
   6354  faca
   6355  faca				   .
   6356  faca							; 
   6357  faca
   6358  faca				   .
   6359  faca							; 
   6360  faca
   6361  faca				   .
   6362  faca							; 
   6363  faca
   6364  faca				   .
   6365  faca							; 
   6366  faca
   6367  faca				   .L0191		;  if _Master_Counter	<  120 then goto __Skip_20_Second_Counter
   6368  faca
   6369  faca		       a5 d4		      LDA	_Master_Counter
   6370  facc		       c9 78		      CMP	#120
   6371  face		       b0 03		      BCS	.skipL0191
   6372  fad0				   .condpart80
   6373  fad0		       4c 2e fb 	      jmp	.__Skip_20_Second_Counter
   6374  fad3
   6375  fad3				   .skipL0191
   6376  fad3				   .
   6377  fad3							; 
   6378  fad3
   6379  fad3				   .
   6380  fad3							; 
   6381  fad3
   6382  fad3				   .
   6383  fad3							; 
   6384  fad3
   6385  fad3				   .
   6386  fad3							; 
   6387  fad3
   6388  fad3				   .
   6389  fad3							; 
   6390  fad3
   6391  fad3				   .L0192		;  _Frame_Counter  =  _Frame_Counter  +  1  :	_Master_Counter  =  0
   6392  fad3
   6393  fad3		       e6 d5		      INC	_Frame_Counter
   6394  fad5		       a9 00		      LDA	#0
   6395  fad7		       85 d4		      STA	_Master_Counter
   6396  fad9				   .
   6397  fad9							; 
   6398  fad9
   6399  fad9				   .
   6400  fad9							; 
   6401  fad9
   6402  fad9				   .
   6403  fad9							; 
   6404  fad9
   6405  fad9				   .
   6406  fad9							; 
   6407  fad9
   6408  fad9				   .
   6409  fad9							; 
   6410  fad9
   6411  fad9				   .
   6412  fad9							; 
   6413  fad9
   6414  fad9				   .
   6415  fad9							; 
   6416  fad9
   6417  fad9				   .
   6418  fad9							; 
   6419  fad9
   6420  fad9				   .L0193		;  if _Frame_Counter  >  9 then _Bit2_Game_Control{2}	=  0  :  _sc1 = _Score1_Mem  :	_sc2 = _Score2_Mem  :  _sc3 = _Score3_Mem :  goto __Start_Restart
   6421  fad9
   6422  fad9		       a9 09		      LDA	#9
   6423  fadb		       c5 d5		      CMP	_Frame_Counter
   6424  fadd		       b0 15		      BCS	.skipL0193
   6425  fadf				   .condpart81
   6426  fadf		       a5 ec		      LDA	_Bit2_Game_Control
   6427  fae1		       29 fb		      AND	#251
   6428  fae3		       85 ec		      STA	_Bit2_Game_Control
   6429  fae5		       a5 e6		      LDA	_Score1_Mem
   6430  fae7		       85 93		      STA	_sc1
   6431  fae9		       a5 e7		      LDA	_Score2_Mem
   6432  faeb		       85 94		      STA	_sc2
   6433  faed		       a5 e8		      LDA	_Score3_Mem
   6434  faef		       85 95		      STA	_sc3
   6435  faf1		       4c 67 f4 	      jmp	.__Start_Restart
   6436  faf4
   6437  faf4				   .skipL0193
   6438  faf4				   .
   6439  faf4							; 
   6440  faf4
   6441  faf4				   .
   6442  faf4							; 
   6443  faf4
   6444  faf4				   .
   6445  faf4							; 
   6446  faf4
   6447  faf4				   .
   6448  faf4							; 
   6449  faf4
   6450  faf4				   .L0194		;  _Bit6_Swap_Scores{6}  =  !_Bit6_Swap_Scores{6}
   6451  faf4
   6452  faf4		       a5 ec		      LDA	_Bit6_Swap_Scores
   6453  faf6		       29 40		      AND	#64
   6454  faf8		       08		      PHP
   6455  faf9		       a5 ec		      LDA	_Bit6_Swap_Scores
   6456  fafb		       29 bf		      AND	#191
   6457  fafd		       28		      PLP
   6458  fafe		       d0 02		      .byte.b	$D0, $02
   6459  fb00		       09 40		      ORA	#64
   6460  fb02		       85 ec		      STA	_Bit6_Swap_Scores
   6461  fb04				   .
   6462  fb04							; 
   6463  fb04
   6464  fb04				   .
   6465  fb04							; 
   6466  fb04
   6467  fb04				   .
   6468  fb04							; 
   6469  fb04
   6470  fb04				   .
   6471  fb04							; 
   6472  fb04
   6473  fb04				   .L0195		;  if !_Bit6_Swap_Scores{6} then goto __GO_Current_Score
   6474  fb04
   6475  fb04		       24 ec		      BIT	_Bit6_Swap_Scores
   6476  fb06		       70 03		      BVS	.skipL0195
   6477  fb08				   .condpart82
   6478  fb08		       4c 1e fb 	      jmp	.__GO_Current_Score
   6479  fb0b
   6480  fb0b				   .skipL0195
   6481  fb0b				   .
   6482  fb0b							; 
   6483  fb0b
   6484  fb0b				   .
   6485  fb0b							; 
   6486  fb0b
   6487  fb0b				   .
   6488  fb0b							; 
   6489  fb0b
   6490  fb0b				   .
   6491  fb0b							; 
   6492  fb0b
   6493  fb0b				   .L0196		;  scorecolor	=  $AE
   6494  fb0b
   6495  fb0b		       a9 ae		      LDA	#$AE
   6496  fb0d		       85 a3		      STA	scorecolor
   6497  fb0f				   .
   6498  fb0f							; 
   6499  fb0f
   6500  fb0f				   .L0197		;  _sc1  =  _High_Score1  :  _sc2  =  _High_Score2  :	_sc3  =  _High_Score3
   6501  fb0f
   6502  fb0f		       a5 e9		      LDA	_High_Score1
   6503  fb11		       85 93		      STA	_sc1
   6504  fb13		       a5 ea		      LDA	_High_Score2
   6505  fb15		       85 94		      STA	_sc2
   6506  fb17		       a5 eb		      LDA	_High_Score3
   6507  fb19		       85 95		      STA	_sc3
   6508  fb1b				   .
   6509  fb1b							; 
   6510  fb1b
   6511  fb1b				   .L0198		;  goto __Skip_20_Second_Counter
   6512  fb1b
   6513  fb1b		       4c 2e fb 	      jmp	.__Skip_20_Second_Counter
   6514  fb1e
   6515  fb1e				   .
   6516  fb1e							; 
   6517  fb1e
   6518  fb1e				   .
   6519  fb1e							; 
   6520  fb1e
   6521  fb1e				   .
   6522  fb1e							; 
   6523  fb1e
   6524  fb1e				   .
   6525  fb1e							; 
   6526  fb1e
   6527  fb1e				   .__GO_Current_Score
   6528  fb1e							; __GO_Current_Score
   6529  fb1e
   6530  fb1e				   .
   6531  fb1e							; 
   6532  fb1e
   6533  fb1e				   .L0199		;  scorecolor	=  $1C
   6534  fb1e
   6535  fb1e		       a9 1c		      LDA	#$1C
   6536  fb20		       85 a3		      STA	scorecolor
   6537  fb22				   .
   6538  fb22							; 
   6539  fb22
   6540  fb22				   .L0200		;  _sc1  =  _Score1_Mem  :  _sc2  =  _Score2_Mem  :  _sc3  =  _Score3_Mem
   6541  fb22
   6542  fb22		       a5 e6		      LDA	_Score1_Mem
   6543  fb24		       85 93		      STA	_sc1
   6544  fb26		       a5 e7		      LDA	_Score2_Mem
   6545  fb28		       85 94		      STA	_sc2
   6546  fb2a		       a5 e8		      LDA	_Score3_Mem
   6547  fb2c		       85 95		      STA	_sc3
   6548  fb2e				   .
   6549  fb2e							; 
   6550  fb2e
   6551  fb2e				   .__Skip_20_Second_Counter
   6552  fb2e							; __Skip_20_Second_Counter
   6553  fb2e
   6554  fb2e				   .
   6555  fb2e							; 
   6556  fb2e
   6557  fb2e				   .
   6558  fb2e							; 
   6559  fb2e
   6560  fb2e				   .
   6561  fb2e							; 
   6562  fb2e
   6563  fb2e				   .
   6564  fb2e							; 
   6565  fb2e
   6566  fb2e				   .
   6567  fb2e							; 
   6568  fb2e
   6569  fb2e				   .
   6570  fb2e							; 
   6571  fb2e
   6572  fb2e				   .
   6573  fb2e							; 
   6574  fb2e
   6575  fb2e				   .L0201		;  COLUBK  =  $44  :  COLUPF  =  $2C
   6576  fb2e
   6577  fb2e		       a9 44		      LDA	#$44
   6578  fb30		       85 09		      STA	COLUBK
   6579  fb32		       a9 2c		      LDA	#$2C
   6580  fb34		       85 08		      STA	COLUPF
   6581  fb36				   .
   6582  fb36							; 
   6583  fb36
   6584  fb36				   .
   6585  fb36							; 
   6586  fb36
   6587  fb36				   .
   6588  fb36							; 
   6589  fb36
   6590  fb36				   .
   6591  fb36							; 
   6592  fb36
   6593  fb36				   .
   6594  fb36							; 
   6595  fb36
   6596  fb36				   .
   6597  fb36							; 
   6598  fb36
   6599  fb36				   .L0202		;  if _Frame_Counter  >  0 then COLUBK  =  $D2  :  COLUPF  =  $DA
   6600  fb36
   6601  fb36		       a9 00		      LDA	#0
   6602  fb38		       c5 d5		      CMP	_Frame_Counter
   6603  fb3a		       b0 08		      BCS	.skipL0202
   6604  fb3c				   .condpart83
   6605  fb3c		       a9 d2		      LDA	#$D2
   6606  fb3e		       85 09		      STA	COLUBK
   6607  fb40		       a9 da		      LDA	#$DA
   6608  fb42		       85 08		      STA	COLUPF
   6609  fb44				   .skipL0202
   6610  fb44				   .
   6611  fb44							; 
   6612  fb44
   6613  fb44				   .
   6614  fb44							; 
   6615  fb44
   6616  fb44				   .
   6617  fb44							; 
   6618  fb44
   6619  fb44				   .
   6620  fb44							; 
   6621  fb44
   6622  fb44				   .
   6623  fb44							; 
   6624  fb44
   6625  fb44				   .
   6626  fb44							; 
   6627  fb44
   6628  fb44				   .
   6629  fb44							; 
   6630  fb44
   6631  fb44				   .L0203		;  drawscreen
   6632  fb44
   6633  fb44		       20 c7 f3 	      jsr	drawscreen
   6634  fb47				   .
   6635  fb47							; 
   6636  fb47
   6637  fb47				   .
   6638  fb47							; 
   6639  fb47
   6640  fb47				   .
   6641  fb47							; 
   6642  fb47
   6643  fb47				   .
   6644  fb47							; 
   6645  fb47
   6646  fb47				   .
   6647  fb47							; 
   6648  fb47
   6649  fb47				   .
   6650  fb47							; 
   6651  fb47
   6652  fb47				   .
   6653  fb47							; 
   6654  fb47
   6655  fb47				   .
   6656  fb47							; 
   6657  fb47
   6658  fb47				   .
   6659  fb47							; 
   6660  fb47
   6661  fb47				   .
   6662  fb47							; 
   6663  fb47
   6664  fb47				   .
   6665  fb47							; 
   6666  fb47
   6667  fb47				   .
   6668  fb47							; 
   6669  fb47
   6670  fb47				   .
   6671  fb47							; 
   6672  fb47
   6673  fb47				   .
   6674  fb47							; 
   6675  fb47
   6676  fb47				   .L0204		;  if _Frame_Counter  =  0 then goto __Game_Over_Loop
   6677  fb47
   6678  fb47		       a5 d5		      LDA	_Frame_Counter
   6679  fb49		       c9 00		      CMP	#0
   6680  fb4b		       d0 03		      BNE	.skipL0204
   6681  fb4d				   .condpart84
   6682  fb4d		       4c c8 fa 	      jmp	.__Game_Over_Loop
   6683  fb50
   6684  fb50				   .skipL0204
   6685  fb50				   .
   6686  fb50							; 
   6687  fb50
   6688  fb50				   .
   6689  fb50							; 
   6690  fb50
   6691  fb50				   .
   6692  fb50							; 
   6693  fb50
   6694  fb50				   .
   6695  fb50							; 
   6696  fb50
   6697  fb50				   .
   6698  fb50							; 
   6699  fb50
   6700  fb50				   .L0205		;  if !switchreset  &&  !joy0fire then _Bit0_Reset_Restrainer{0}  =  0  :  goto __Game_Over_Loop
   6701  fb50
   6702  fb50		       a9 01		      lda	#1
   6703  fb52		       2c 82 02 	      bit	SWCHB
   6704  fb55		       f0 0d		      BEQ	.skipL0205
   6705  fb57				   .condpart85
   6706  fb57		       24 0c		      bit	INPT4
   6707  fb59		       10 09		      BPL	.skip85then
   6708  fb5b				   .condpart86
   6709  fb5b		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6710  fb5d		       29 fe		      AND	#254
   6711  fb5f		       85 ec		      STA	_Bit0_Reset_Restrainer
   6712  fb61		       4c c8 fa 	      jmp	.__Game_Over_Loop
   6713  fb64
   6714  fb64				   .skip85then
   6715  fb64				   .skipL0205
   6716  fb64				   .
   6717  fb64							; 
   6718  fb64
   6719  fb64				   .
   6720  fb64							; 
   6721  fb64
   6722  fb64				   .
   6723  fb64							; 
   6724  fb64
   6725  fb64				   .
   6726  fb64							; 
   6727  fb64
   6728  fb64				   .
   6729  fb64							; 
   6730  fb64
   6731  fb64				   .L0206		;  if _Bit0_Reset_Restrainer{0} then goto __Game_Over_Loop
   6732  fb64
   6733  fb64		       a5 ec		      LDA	_Bit0_Reset_Restrainer
   6734  fb66		       4a		      LSR
   6735  fb67		       90 03		      BCC	.skipL0206
   6736  fb69				   .condpart87
   6737  fb69		       4c c8 fa 	      jmp	.__Game_Over_Loop
   6738  fb6c
   6739  fb6c				   .skipL0206
   6740  fb6c				   .
   6741  fb6c							; 
   6742  fb6c
   6743  fb6c				   .
   6744  fb6c							; 
   6745  fb6c
   6746  fb6c				   .
   6747  fb6c							; 
   6748  fb6c
   6749  fb6c				   .
   6750  fb6c							; 
   6751  fb6c
   6752  fb6c				   .L0207		;  goto __Start_Restart
   6753  fb6c
   6754  fb6c		       4c 67 f4 	      jmp	.__Start_Restart
   6755  fb6f
   6756  fb6f				   .
   6757  fb6f							; 
   6758  fb6f
   6759  fb6f				   .
   6760  fb6f							; 
   6761  fb6f
   6762  fb6f				   .
   6763  fb6f							; 
   6764  fb6f
   6765  fb6f				   .
   6766  fb6f							; 
   6767  fb6f
   6768  fb6f				   .
   6769  fb6f							; 
   6770  fb6f
   6771  fb6f				   .
   6772  fb6f							; 
   6773  fb6f
   6774  fb6f				   .
   6775  fb6f							; 
   6776  fb6f
   6777  fb6f				   .
   6778  fb6f							; 
   6779  fb6f
   6780  fb6f				   .
   6781  fb6f							; 
   6782  fb6f
   6783  fb6f				   .
   6784  fb6f							; 
   6785  fb6f
   6786  fb6f				   .
   6787  fb6f							; 
   6788  fb6f
   6789  fb6f				   .
   6790  fb6f							; 
   6791  fb6f
   6792  fb6f				   .
   6793  fb6f							; 
   6794  fb6f
   6795  fb6f				   .
   6796  fb6f							; 
   6797  fb6f
   6798  fb6f				   .
   6799  fb6f							; 
   6800  fb6f
   6801  fb6f				   .
   6802  fb6f							; 
   6803  fb6f
   6804  fb6f				   .
   6805  fb6f							; 
   6806  fb6f
   6807  fb6f				   .
   6808  fb6f							; 
   6809  fb6f
   6810  fb6f				   .
   6811  fb6f							; 
   6812  fb6f
   6813  fb6f				   .
   6814  fb6f							; 
   6815  fb6f
   6816  fb6f				   .
   6817  fb6f							; 
   6818  fb6f
   6819  fb6f				   .
   6820  fb6f							; 
   6821  fb6f
   6822  fb6f				   .__Pause_Setup
   6823  fb6f							; __Pause_Setup
   6824  fb6f
   6825  fb6f				   .
   6826  fb6f							; 
   6827  fb6f
   6828  fb6f				   .
   6829  fb6f							; 
   6830  fb6f
   6831  fb6f				   .
   6832  fb6f							; 
   6833  fb6f
   6834  fb6f				   .
   6835  fb6f							; 
   6836  fb6f
   6837  fb6f				   .
   6838  fb6f							; 
   6839  fb6f
   6840  fb6f				   .
   6841  fb6f							; 
   6842  fb6f
   6843  fb6f				   .L0208		;  AUDV0  =  0  :  AUDV1  =  0
   6844  fb6f
   6845  fb6f		       a9 00		      LDA	#0
   6846  fb71		       85 19		      STA	AUDV0
   6847  fb73		       85 1a		      STA	AUDV1
   6848  fb75				   .
   6849  fb75							; 
   6850  fb75
   6851  fb75				   .
   6852  fb75							; 
   6853  fb75
   6854  fb75				   .
   6855  fb75							; 
   6856  fb75
   6857  fb75				   .
   6858  fb75							; 
   6859  fb75
   6860  fb75				   .
   6861  fb75							; 
   6862  fb75
   6863  fb75				   .
   6864  fb75							; 
   6865  fb75
   6866  fb75				   .L0209		;  _Bit1_FireB_Restrainer{1}  =  1
   6867  fb75
   6868  fb75		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   6869  fb77		       09 02		      ORA	#2
   6870  fb79		       85 ec		      STA	_Bit1_FireB_Restrainer
   6871  fb7b				   .
   6872  fb7b							; 
   6873  fb7b
   6874  fb7b				   .
   6875  fb7b							; 
   6876  fb7b
   6877  fb7b				   .
   6878  fb7b							; 
   6879  fb7b
   6880  fb7b				   .
   6881  fb7b							; 
   6882  fb7b
   6883  fb7b				   .
   6884  fb7b							; 
   6885  fb7b
   6886  fb7b				   .
   6887  fb7b							; 
   6888  fb7b
   6889  fb7b				   .L0210		;  _Pause_Counter_Tmp	=  0
   6890  fb7b
   6891  fb7b		       a9 00		      LDA	#0
   6892  fb7d		       85 db		      STA	_Pause_Counter_Tmp
   6893  fb7f				   .
   6894  fb7f							; 
   6895  fb7f
   6896  fb7f				   .
   6897  fb7f							; 
   6898  fb7f
   6899  fb7f				   .
   6900  fb7f							; 
   6901  fb7f
   6902  fb7f				   .
   6903  fb7f							; 
   6904  fb7f
   6905  fb7f				   .
   6906  fb7f							; 
   6907  fb7f
   6908  fb7f				   .
   6909  fb7f							; 
   6910  fb7f
   6911  fb7f				   .L0211		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   6912  fb7f
   6913  fb7f							; complex statement detected
   6914  fb7f		       20 b9 f3 	      jsr	randomize
   6915  fb82		       29 07		      AND	#7
   6916  fb84		       85 dd		      STA	_Pause_Color_Tmp
   6917  fb86				   .
   6918  fb86							; 
   6919  fb86
   6920  fb86				   .L0212		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   6921  fb86
   6922  fb86		       a5 dd		      LDA	_Pause_Color_Tmp
   6923  fb88		       85 dc		      STA	_Pause_Mem_Color_Tmp
   6924  fb8a				   .
   6925  fb8a							; 
   6926  fb8a
   6927  fb8a				   .
   6928  fb8a							; 
   6929  fb8a
   6930  fb8a				   .
   6931  fb8a							; 
   6932  fb8a
   6933  fb8a				   .
   6934  fb8a							; 
   6935  fb8a
   6936  fb8a				   .
   6937  fb8a							; 
   6938  fb8a
   6939  fb8a				   .
   6940  fb8a							; 
   6941  fb8a
   6942  fb8a				   .
   6943  fb8a							; 
   6944  fb8a
   6945  fb8a				   .
   6946  fb8a							; 
   6947  fb8a
   6948  fb8a				   .
   6949  fb8a							; 
   6950  fb8a
   6951  fb8a				   .
   6952  fb8a							; 
   6953  fb8a
   6954  fb8a				   .__Pause_Game
   6955  fb8a							; __Pause_Game
   6956  fb8a
   6957  fb8a				   .
   6958  fb8a							; 
   6959  fb8a
   6960  fb8a				   .
   6961  fb8a							; 
   6962  fb8a
   6963  fb8a				   .
   6964  fb8a							; 
   6965  fb8a
   6966  fb8a				   .
   6967  fb8a							; 
   6968  fb8a
   6969  fb8a				   .
   6970  fb8a							; 
   6971  fb8a
   6972  fb8a				   .
   6973  fb8a							; 
   6974  fb8a
   6975  fb8a				   .
   6976  fb8a							; 
   6977  fb8a
   6978  fb8a				   .L0213		;  NUSIZ0  =  $10
   6979  fb8a
   6980  fb8a		       a9 10		      LDA	#$10
   6981  fb8c		       85 04		      STA	NUSIZ0
   6982  fb8e				   .
   6983  fb8e							; 
   6984  fb8e
   6985  fb8e				   .
   6986  fb8e							; 
   6987  fb8e
   6988  fb8e				   .
   6989  fb8e							; 
   6990  fb8e
   6991  fb8e				   .
   6992  fb8e							; 
   6993  fb8e
   6994  fb8e				   .
   6995  fb8e							; 
   6996  fb8e
   6997  fb8e				   .
   6998  fb8e							; 
   6999  fb8e
   7000  fb8e				   .
   7001  fb8e							; 
   7002  fb8e
   7003  fb8e				   .L0214		;  NUSIZ1  =  $05
   7004  fb8e
   7005  fb8e		       a9 05		      LDA	#$05
   7006  fb90		       85 05		      STA	NUSIZ1
   7007  fb92				   .
   7008  fb92							; 
   7009  fb92
   7010  fb92				   .
   7011  fb92							; 
   7012  fb92
   7013  fb92				   .
   7014  fb92							; 
   7015  fb92
   7016  fb92				   .
   7017  fb92							; 
   7018  fb92
   7019  fb92				   .
   7020  fb92							; 
   7021  fb92
   7022  fb92				   .
   7023  fb92							; 
   7024  fb92
   7025  fb92				   .
   7026  fb92							; 
   7027  fb92
   7028  fb92				   .
   7029  fb92							; 
   7030  fb92
   7031  fb92				   .
   7032  fb92							; 
   7033  fb92
   7034  fb92				   .
   7035  fb92							; 
   7036  fb92
   7037  fb92				   .L0215		;  _Pause_Counter_Tmp	=  _Pause_Counter_Tmp  +  1
   7038  fb92
   7039  fb92		       e6 db		      INC	_Pause_Counter_Tmp
   7040  fb94				   .
   7041  fb94							; 
   7042  fb94
   7043  fb94				   .
   7044  fb94							; 
   7045  fb94
   7046  fb94				   .
   7047  fb94							; 
   7048  fb94
   7049  fb94				   .
   7050  fb94							; 
   7051  fb94
   7052  fb94				   .L0216		;  if _Pause_Counter_Tmp  <  240 then goto __Skip_Pause_Counter
   7053  fb94
   7054  fb94		       a5 db		      LDA	_Pause_Counter_Tmp
   7055  fb96		       c9 f0		      CMP	#240
   7056  fb98		       b0 03		      BCS	.skipL0216
   7057  fb9a				   .condpart88
   7058  fb9a		       4c e9 fb 	      jmp	.__Skip_Pause_Counter
   7059  fb9d
   7060  fb9d				   .skipL0216
   7061  fb9d				   .
   7062  fb9d							; 
   7063  fb9d
   7064  fb9d				   .
   7065  fb9d							; 
   7066  fb9d
   7067  fb9d				   .
   7068  fb9d							; 
   7069  fb9d
   7070  fb9d				   .
   7071  fb9d							; 
   7072  fb9d
   7073  fb9d				   .L0217		;  _Pause_Counter_Tmp	=  0
   7074  fb9d
   7075  fb9d		       a9 00		      LDA	#0
   7076  fb9f		       85 db		      STA	_Pause_Counter_Tmp
   7077  fba1				   .
   7078  fba1							; 
   7079  fba1
   7080  fba1				   .
   7081  fba1							; 
   7082  fba1
   7083  fba1				   .
   7084  fba1							; 
   7085  fba1
   7086  fba1				   .
   7087  fba1							; 
   7088  fba1
   7089  fba1				   .L0218		;  _Pause_Color_Tmp  =   ( rand & 7 ) 
   7090  fba1
   7091  fba1							; complex statement detected
   7092  fba1		       20 b9 f3 	      jsr	randomize
   7093  fba4		       29 07		      AND	#7
   7094  fba6		       85 dd		      STA	_Pause_Color_Tmp
   7095  fba8				   .
   7096  fba8							; 
   7097  fba8
   7098  fba8				   .
   7099  fba8							; 
   7100  fba8
   7101  fba8				   .
   7102  fba8							; 
   7103  fba8
   7104  fba8				   .
   7105  fba8							; 
   7106  fba8
   7107  fba8				   .
   7108  fba8							; 
   7109  fba8
   7110  fba8				   .L0219		;  if _Pause_Color_Tmp  =  _Pause_Mem_Color_Tmp then _Pause_Color_Tmp	=  _Pause_Color_Tmp  +	 ( rand & 3 )	+  1  :  if _Pause_Color_Tmp  >  7 then _Pause_Color_Tmp  =  _Pause_Color_Tmp  -  8
   7111  fba8
   7112  fba8		       a5 dd		      LDA	_Pause_Color_Tmp
   7113  fbaa		       c5 dc		      CMP	_Pause_Mem_Color_Tmp
   7114  fbac		       d0 20		      BNE	.skipL0219
   7115  fbae				   .condpart89
   7116  fbae							; complex statement detected
   7117  fbae		       a5 dd		      LDA	_Pause_Color_Tmp
   7118  fbb0		       48		      PHA
   7119  fbb1		       20 b9 f3 	      jsr	randomize
   7120  fbb4		       29 03		      AND	#3
   7121  fbb6		       ba		      TSX
   7122  fbb7		       e8		      INX
   7123  fbb8		       9a		      TXS
   7124  fbb9		       18		      CLC
   7125  fbba		       75 00		      ADC	$00,x
   7126  fbbc		       18		      CLC
   7127  fbbd		       69 01		      ADC	#1
   7128  fbbf		       85 dd		      STA	_Pause_Color_Tmp
   7129  fbc1		       a9 07		      LDA	#7
   7130  fbc3		       c5 dd		      CMP	_Pause_Color_Tmp
   7131  fbc5		       b0 07		      BCS	.skip89then
   7132  fbc7				   .condpart90
   7133  fbc7		       a5 dd		      LDA	_Pause_Color_Tmp
   7134  fbc9		       38		      SEC
   7135  fbca		       e9 08		      SBC	#8
   7136  fbcc		       85 dd		      STA	_Pause_Color_Tmp
   7137  fbce				   .skip89then
   7138  fbce				   .skipL0219
   7139  fbce				   .
   7140  fbce							; 
   7141  fbce
   7142  fbce				   .
   7143  fbce							; 
   7144  fbce
   7145  fbce				   .
   7146  fbce							; 
   7147  fbce
   7148  fbce				   .
   7149  fbce							; 
   7150  fbce
   7151  fbce				   .L0220		;  _Pause_Mem_Color_Tmp  =  _Pause_Color_Tmp
   7152  fbce
   7153  fbce		       a5 dd		      LDA	_Pause_Color_Tmp
   7154  fbd0		       85 dc		      STA	_Pause_Mem_Color_Tmp
   7155  fbd2				   .
   7156  fbd2							; 
   7157  fbd2
   7158  fbd2				   .
   7159  fbd2							; 
   7160  fbd2
   7161  fbd2				   .
   7162  fbd2							; 
   7163  fbd2
   7164  fbd2				   .
   7165  fbd2							; 
   7166  fbd2
   7167  fbd2				   .L0221		;  _Bit2_Pause_Clr_Scheme{2}  =  0
   7168  fbd2
   7169  fbd2		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7170  fbd4		       29 fb		      AND	#251
   7171  fbd6		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7172  fbd8				   .
   7173  fbd8							; 
   7174  fbd8
   7175  fbd8				   .L0222		;  temp5  =  rand  :  if temp5  <  128 then _Bit2_Pause_Clr_Scheme{2}	=  1
   7176  fbd8
   7177  fbd8		       20 b9 f3 	      jsr	randomize
   7178  fbdb		       85 a0		      STA	temp5
   7179  fbdd		       a5 a0		      LDA	temp5
   7180  fbdf		       c9 80		      CMP	#128
   7181  fbe1		       b0 06		      BCS	.skipL0222
   7182  fbe3				   .condpart91
   7183  fbe3		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7184  fbe5		       09 04		      ORA	#4
   7185  fbe7		       85 e5		      STA	_Bit2_Pause_Clr_Scheme
   7186  fbe9				   .skipL0222
   7187  fbe9				   .
   7188  fbe9							; 
   7189  fbe9
   7190  fbe9				   .__Skip_Pause_Counter
   7191  fbe9							; __Skip_Pause_Counter
   7192  fbe9
   7193  fbe9				   .
   7194  fbe9							; 
   7195  fbe9
   7196  fbe9				   .
   7197  fbe9							; 
   7198  fbe9
   7199  fbe9				   .
   7200  fbe9							; 
   7201  fbe9
   7202  fbe9				   .
   7203  fbe9							; 
   7204  fbe9
   7205  fbe9				   .
   7206  fbe9							; 
   7207  fbe9
   7208  fbe9				   .
   7209  fbe9							; 
   7210  fbe9
   7211  fbe9				   .
   7212  fbe9							; 
   7213  fbe9
   7214  fbe9				   .L0223		;  on _Pause_Color_Tmp goto __Ps0 __Ps1 __Ps2 __Ps3 __Ps4 __Ps5 __Ps6 __Ps7
   7215  fbe9
   7216  fbe9		       a6 dd		      LDX	_Pause_Color_Tmp
   7217  fbeb		       bd f4 fb 	      LDA	.L0223jumptablehi,x
   7218  fbee		       48		      PHA
   7219  fbef		       bd fc fb 	      LDA	.L0223jumptablelo,x
   7220  fbf2		       48		      PHA
   7221  fbf3		       60		      RTS
   7222  fbf4				   .L0223jumptablehi
   7223  fbf4		       fc		      .byte.b	>(.__Ps0-1)
   7224  fbf5		       fc		      .byte.b	>(.__Ps1-1)
   7225  fbf6		       fc		      .byte.b	>(.__Ps2-1)
   7226  fbf7		       fc		      .byte.b	>(.__Ps3-1)
   7227  fbf8		       fc		      .byte.b	>(.__Ps4-1)
   7228  fbf9		       fd		      .byte.b	>(.__Ps5-1)
   7229  fbfa		       fd		      .byte.b	>(.__Ps6-1)
   7230  fbfb		       fd		      .byte.b	>(.__Ps7-1)
   7231  fbfc				   .L0223jumptablelo
   7232  fbfc		       40		      .byte.b	<(.__Ps0-1)
   7233  fbfd		       6f		      .byte.b	<(.__Ps1-1)
   7234  fbfe		       9e		      .byte.b	<(.__Ps2-1)
   7235  fbff		       cd		      .byte.b	<(.__Ps3-1)
   7236  fc00		       fc		      .byte.b	<(.__Ps4-1)
   7237  fc01		       2b		      .byte.b	<(.__Ps5-1)
   7238  fc02		       5a		      .byte.b	<(.__Ps6-1)
   7239  fc03		       89		      .byte.b	<(.__Ps7-1)
   7240  fc04				   .
   7241  fc04							; 
   7242  fc04
   7243  fc04				   .__Got_Pause_Colors
   7244  fc04							; __Got_Pause_Colors
   7245  fc04
   7246  fc04				   .
   7247  fc04							; 
   7248  fc04
   7249  fc04				   .
   7250  fc04							; 
   7251  fc04
   7252  fc04				   .
   7253  fc04							; 
   7254  fc04
   7255  fc04				   .
   7256  fc04							; 
   7257  fc04
   7258  fc04				   .
   7259  fc04							; 
   7260  fc04
   7261  fc04				   .
   7262  fc04							; 
   7263  fc04
   7264  fc04				   .
   7265  fc04							; 
   7266  fc04
   7267  fc04				   .L0224		;  drawscreen
   7268  fc04
   7269  fc04		       20 c7 f3 	      jsr	drawscreen
   7270  fc07				   .
   7271  fc07							; 
   7272  fc07
   7273  fc07				   .
   7274  fc07							; 
   7275  fc07
   7276  fc07				   .
   7277  fc07							; 
   7278  fc07
   7279  fc07				   .
   7280  fc07							; 
   7281  fc07
   7282  fc07				   .
   7283  fc07							; 
   7284  fc07
   7285  fc07				   .
   7286  fc07							; 
   7287  fc07
   7288  fc07				   .
   7289  fc07							; 
   7290  fc07
   7291  fc07				   .
   7292  fc07							; 
   7293  fc07
   7294  fc07				   .
   7295  fc07							; 
   7296  fc07
   7297  fc07				   .
   7298  fc07							; 
   7299  fc07
   7300  fc07				   .
   7301  fc07							; 
   7302  fc07
   7303  fc07				   .L0225		;  if !joy0fire then _Bit1_FireB_Restrainer{1}  =  0  :  goto __Pause_Game
   7304  fc07
   7305  fc07		       24 0c		      bit	INPT4
   7306  fc09		       10 09		      BPL	.skipL0225
   7307  fc0b				   .condpart92
   7308  fc0b		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7309  fc0d		       29 fd		      AND	#253
   7310  fc0f		       85 ec		      STA	_Bit1_FireB_Restrainer
   7311  fc11		       4c 8a fb 	      jmp	.__Pause_Game
   7312  fc14
   7313  fc14				   .skipL0225
   7314  fc14				   .
   7315  fc14							; 
   7316  fc14
   7317  fc14				   .
   7318  fc14							; 
   7319  fc14
   7320  fc14				   .
   7321  fc14							; 
   7322  fc14
   7323  fc14				   .
   7324  fc14							; 
   7325  fc14
   7326  fc14				   .
   7327  fc14							; 
   7328  fc14
   7329  fc14				   .L0226		;  if _Bit1_FireB_Restrainer{1} then goto __Pause_Game
   7330  fc14
   7331  fc14		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7332  fc16		       29 02		      AND	#2
   7333  fc18		       f0 03		      BEQ	.skipL0226
   7334  fc1a				   .condpart93
   7335  fc1a		       4c 8a fb 	      jmp	.__Pause_Game
   7336  fc1d
   7337  fc1d				   .skipL0226
   7338  fc1d				   .
   7339  fc1d							; 
   7340  fc1d
   7341  fc1d				   .
   7342  fc1d							; 
   7343  fc1d
   7344  fc1d				   .
   7345  fc1d							; 
   7346  fc1d
   7347  fc1d				   .
   7348  fc1d							; 
   7349  fc1d
   7350  fc1d				   .L0227		;  _Bit0_BW_Mem{0}  =	0  :  if switchbw then _Bit0_BW_Mem{0}	=  1
   7351  fc1d
   7352  fc1d		       a5 e5		      LDA	_Bit0_BW_Mem
   7353  fc1f		       29 fe		      AND	#254
   7354  fc21		       85 e5		      STA	_Bit0_BW_Mem
   7355  fc23		       a9 08		      lda	#8
   7356  fc25		       2c 82 02 	      bit	SWCHB
   7357  fc28		       d0 06		      BNE	.skipL0227
   7358  fc2a				   .condpart94
   7359  fc2a		       a5 e5		      LDA	_Bit0_BW_Mem
   7360  fc2c		       09 01		      ORA	#1
   7361  fc2e		       85 e5		      STA	_Bit0_BW_Mem
   7362  fc30				   .skipL0227
   7363  fc30				   .
   7364  fc30							; 
   7365  fc30
   7366  fc30				   .
   7367  fc30							; 
   7368  fc30
   7369  fc30				   .
   7370  fc30							; 
   7371  fc30
   7372  fc30				   .
   7373  fc30							; 
   7374  fc30
   7375  fc30				   .
   7376  fc30							; 
   7377  fc30
   7378  fc30				   .
   7379  fc30							; 
   7380  fc30
   7381  fc30				   .
   7382  fc30							; 
   7383  fc30
   7384  fc30				   .
   7385  fc30							; 
   7386  fc30
   7387  fc30				   .
   7388  fc30							; 
   7389  fc30
   7390  fc30				   .
   7391  fc30							; 
   7392  fc30
   7393  fc30				   .
   7394  fc30							; 
   7395  fc30
   7396  fc30				   .
   7397  fc30							; 
   7398  fc30
   7399  fc30				   .
   7400  fc30							; 
   7401  fc30
   7402  fc30				   .
   7403  fc30							; 
   7404  fc30
   7405  fc30				   .
   7406  fc30							; 
   7407  fc30
   7408  fc30				   .
   7409  fc30							; 
   7410  fc30
   7411  fc30				   .
   7412  fc30							; 
   7413  fc30
   7414  fc30				   .
   7415  fc30							; 
   7416  fc30
   7417  fc30				   .
   7418  fc30							; 
   7419  fc30
   7420  fc30				   .
   7421  fc30							; 
   7422  fc30
   7423  fc30				   .
   7424  fc30							; 
   7425  fc30
   7426  fc30				   .
   7427  fc30							; 
   7428  fc30
   7429  fc30				   .
   7430  fc30							; 
   7431  fc30
   7432  fc30				   .
   7433  fc30							; 
   7434  fc30
   7435  fc30				   .__Restore_Game_from_Pause
   7436  fc30							; __Restore_Game_from_Pause
   7437  fc30
   7438  fc30				   .
   7439  fc30							; 
   7440  fc30
   7441  fc30				   .
   7442  fc30							; 
   7443  fc30
   7444  fc30				   .
   7445  fc30							; 
   7446  fc30
   7447  fc30				   .
   7448  fc30							; 
   7449  fc30
   7450  fc30				   .
   7451  fc30							; 
   7452  fc30
   7453  fc30				   .
   7454  fc30							; 
   7455  fc30
   7456  fc30				   .L0228		;  _Bit1_FireB_Restrainer{1}  =  1
   7457  fc30
   7458  fc30		       a5 ec		      LDA	_Bit1_FireB_Restrainer
   7459  fc32		       09 02		      ORA	#2
   7460  fc34		       85 ec		      STA	_Bit1_FireB_Restrainer
   7461  fc36				   .
   7462  fc36							; 
   7463  fc36
   7464  fc36				   .
   7465  fc36							; 
   7466  fc36
   7467  fc36				   .
   7468  fc36							; 
   7469  fc36
   7470  fc36				   .
   7471  fc36							; 
   7472  fc36
   7473  fc36				   .
   7474  fc36							; 
   7475  fc36
   7476  fc36				   .
   7477  fc36							; 
   7478  fc36
   7479  fc36				   .L0229		;  scorecolor	=  $1C	:  pfscorecolor  =  $D2
   7480  fc36
   7481  fc36		       a9 1c		      LDA	#$1C
   7482  fc38		       85 a3		      STA	scorecolor
   7483  fc3a		       a9 d2		      LDA	#$D2
   7484  fc3c		       85 f4		      STA	pfscorecolor
   7485  fc3e				   .
   7486  fc3e							; 
   7487  fc3e
   7488  fc3e				   .
   7489  fc3e							; 
   7490  fc3e
   7491  fc3e				   .L0230		;  goto __Main_Loop
   7492  fc3e
   7493  fc3e		       4c 14 f6 	      jmp	.__Main_Loop
   7494  fc41
   7495  fc41				   .
   7496  fc41							; 
   7497  fc41
   7498  fc41				   .
   7499  fc41							; 
   7500  fc41
   7501  fc41				   .
   7502  fc41							; 
   7503  fc41
   7504  fc41				   .
   7505  fc41							; 
   7506  fc41
   7507  fc41				   .
   7508  fc41							; 
   7509  fc41
   7510  fc41				   .
   7511  fc41							; 
   7512  fc41
   7513  fc41				   .
   7514  fc41							; 
   7515  fc41
   7516  fc41				   .
   7517  fc41							; 
   7518  fc41
   7519  fc41				   .
   7520  fc41							; 
   7521  fc41
   7522  fc41				   .__Ps0
   7523  fc41							; __Ps0
   7524  fc41
   7525  fc41				   .
   7526  fc41							; 
   7527  fc41
   7528  fc41				   .L0231		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps0B
   7529  fc41
   7530  fc41		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7531  fc43		       29 04		      AND	#4
   7532  fc45		       f0 03		      BEQ	.skipL0231
   7533  fc47				   .condpart95
   7534  fc47		       4c 5d fc 	      jmp	.__Ps0B
   7535  fc4a
   7536  fc4a				   .skipL0231
   7537  fc4a				   .
   7538  fc4a							; 
   7539  fc4a
   7540  fc4a				   .L0232		;  COLUPF  =  $0C  :  COLUP0  =  $0C  :  COLUP1  =  $0C  :  pfscorecolor  =  $0C  :  scorecolor  =  $0C
   7541  fc4a
   7542  fc4a		       a9 0c		      LDA	#$0C
   7543  fc4c		       85 08		      STA	COLUPF
   7544  fc4e		       85 06		      STA	COLUP0
   7545  fc50		       85 07		      STA	COLUP1
   7546  fc52		       85 f4		      STA	pfscorecolor
   7547  fc54		       85 a3		      STA	scorecolor
   7548  fc56				   .
   7549  fc56							; 
   7550  fc56
   7551  fc56				   .L0233		;  COLUBK  =  $0A
   7552  fc56
   7553  fc56		       a9 0a		      LDA	#$0A
   7554  fc58		       85 09		      STA	COLUBK
   7555  fc5a				   .
   7556  fc5a							; 
   7557  fc5a
   7558  fc5a				   .L0234		;  goto __Got_Pause_Colors
   7559  fc5a
   7560  fc5a		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7561  fc5d
   7562  fc5d				   .
   7563  fc5d							; 
   7564  fc5d
   7565  fc5d				   .
   7566  fc5d							; 
   7567  fc5d
   7568  fc5d				   .
   7569  fc5d							; 
   7570  fc5d
   7571  fc5d				   .
   7572  fc5d							; 
   7573  fc5d
   7574  fc5d				   .
   7575  fc5d							; 
   7576  fc5d
   7577  fc5d				   .
   7578  fc5d							; 
   7579  fc5d
   7580  fc5d				   .
   7581  fc5d							; 
   7582  fc5d
   7583  fc5d				   .__Ps0B
   7584  fc5d							; __Ps0B
   7585  fc5d
   7586  fc5d				   .
   7587  fc5d							; 
   7588  fc5d
   7589  fc5d				   .L0235		;  COLUPF  =  $0A  :  COLUP0  =  $0A  :  COLUP1  =  $0A  :  pfscorecolor  =  $0A  :  scorecolor  =  $0A
   7590  fc5d
   7591  fc5d		       a9 0a		      LDA	#$0A
   7592  fc5f		       85 08		      STA	COLUPF
   7593  fc61		       85 06		      STA	COLUP0
   7594  fc63		       85 07		      STA	COLUP1
   7595  fc65		       85 f4		      STA	pfscorecolor
   7596  fc67		       85 a3		      STA	scorecolor
   7597  fc69				   .
   7598  fc69							; 
   7599  fc69
   7600  fc69				   .L0236		;  COLUBK  =  $0C
   7601  fc69
   7602  fc69		       a9 0c		      LDA	#$0C
   7603  fc6b		       85 09		      STA	COLUBK
   7604  fc6d				   .
   7605  fc6d							; 
   7606  fc6d
   7607  fc6d				   .L0237		;  goto __Got_Pause_Colors
   7608  fc6d
   7609  fc6d		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7610  fc70
   7611  fc70				   .
   7612  fc70							; 
   7613  fc70
   7614  fc70				   .
   7615  fc70							; 
   7616  fc70
   7617  fc70				   .
   7618  fc70							; 
   7619  fc70
   7620  fc70				   .
   7621  fc70							; 
   7622  fc70
   7623  fc70				   .
   7624  fc70							; 
   7625  fc70
   7626  fc70				   .
   7627  fc70							; 
   7628  fc70
   7629  fc70				   .
   7630  fc70							; 
   7631  fc70
   7632  fc70				   .__Ps1
   7633  fc70							; __Ps1
   7634  fc70
   7635  fc70				   .
   7636  fc70							; 
   7637  fc70
   7638  fc70				   .L0238		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps1B
   7639  fc70
   7640  fc70		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7641  fc72		       29 04		      AND	#4
   7642  fc74		       f0 03		      BEQ	.skipL0238
   7643  fc76				   .condpart96
   7644  fc76		       4c 8c fc 	      jmp	.__Ps1B
   7645  fc79
   7646  fc79				   .skipL0238
   7647  fc79				   .
   7648  fc79							; 
   7649  fc79
   7650  fc79				   .L0239		;  COLUPF  =  $3C  :  COLUP0  =  $3C  :  COLUP1  =  $3C  :  pfscorecolor  =  $3C  :  scorecolor  =  $3C
   7651  fc79
   7652  fc79		       a9 3c		      LDA	#$3C
   7653  fc7b		       85 08		      STA	COLUPF
   7654  fc7d		       85 06		      STA	COLUP0
   7655  fc7f		       85 07		      STA	COLUP1
   7656  fc81		       85 f4		      STA	pfscorecolor
   7657  fc83		       85 a3		      STA	scorecolor
   7658  fc85				   .
   7659  fc85							; 
   7660  fc85
   7661  fc85				   .L0240		;  COLUBK  =  $3A
   7662  fc85
   7663  fc85		       a9 3a		      LDA	#$3A
   7664  fc87		       85 09		      STA	COLUBK
   7665  fc89				   .
   7666  fc89							; 
   7667  fc89
   7668  fc89				   .L0241		;  goto __Got_Pause_Colors
   7669  fc89
   7670  fc89		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7671  fc8c
   7672  fc8c				   .
   7673  fc8c							; 
   7674  fc8c
   7675  fc8c				   .
   7676  fc8c							; 
   7677  fc8c
   7678  fc8c				   .
   7679  fc8c							; 
   7680  fc8c
   7681  fc8c				   .
   7682  fc8c							; 
   7683  fc8c
   7684  fc8c				   .
   7685  fc8c							; 
   7686  fc8c
   7687  fc8c				   .
   7688  fc8c							; 
   7689  fc8c
   7690  fc8c				   .
   7691  fc8c							; 
   7692  fc8c
   7693  fc8c				   .__Ps1B
   7694  fc8c							; __Ps1B
   7695  fc8c
   7696  fc8c				   .
   7697  fc8c							; 
   7698  fc8c
   7699  fc8c				   .L0242		;  COLUPF  =  $3A  :  COLUP0  =  $3A  :  COLUP1  =  $3A  :  pfscorecolor  =  $3A  :  scorecolor  =  $3A
   7700  fc8c
   7701  fc8c		       a9 3a		      LDA	#$3A
   7702  fc8e		       85 08		      STA	COLUPF
   7703  fc90		       85 06		      STA	COLUP0
   7704  fc92		       85 07		      STA	COLUP1
   7705  fc94		       85 f4		      STA	pfscorecolor
   7706  fc96		       85 a3		      STA	scorecolor
   7707  fc98				   .
   7708  fc98							; 
   7709  fc98
   7710  fc98				   .L0243		;  COLUBK  =  $3C
   7711  fc98
   7712  fc98		       a9 3c		      LDA	#$3C
   7713  fc9a		       85 09		      STA	COLUBK
   7714  fc9c				   .
   7715  fc9c							; 
   7716  fc9c
   7717  fc9c				   .L0244		;  goto __Got_Pause_Colors
   7718  fc9c
   7719  fc9c		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7720  fc9f
   7721  fc9f				   .
   7722  fc9f							; 
   7723  fc9f
   7724  fc9f				   .
   7725  fc9f							; 
   7726  fc9f
   7727  fc9f				   .
   7728  fc9f							; 
   7729  fc9f
   7730  fc9f				   .
   7731  fc9f							; 
   7732  fc9f
   7733  fc9f				   .
   7734  fc9f							; 
   7735  fc9f
   7736  fc9f				   .
   7737  fc9f							; 
   7738  fc9f
   7739  fc9f				   .
   7740  fc9f							; 
   7741  fc9f
   7742  fc9f				   .__Ps2
   7743  fc9f							; __Ps2
   7744  fc9f
   7745  fc9f				   .
   7746  fc9f							; 
   7747  fc9f
   7748  fc9f				   .L0245		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps2B
   7749  fc9f
   7750  fc9f		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7751  fca1		       29 04		      AND	#4
   7752  fca3		       f0 03		      BEQ	.skipL0245
   7753  fca5				   .condpart97
   7754  fca5		       4c bb fc 	      jmp	.__Ps2B
   7755  fca8
   7756  fca8				   .skipL0245
   7757  fca8				   .
   7758  fca8							; 
   7759  fca8
   7760  fca8				   .L0246		;  COLUPF  =  $6C  :  COLUP0  =  $6C  :  COLUP1  =  $6C  :  pfscorecolor  =  $6C  :  scorecolor  =  $6C
   7761  fca8
   7762  fca8		       a9 6c		      LDA	#$6C
   7763  fcaa		       85 08		      STA	COLUPF
   7764  fcac		       85 06		      STA	COLUP0
   7765  fcae		       85 07		      STA	COLUP1
   7766  fcb0		       85 f4		      STA	pfscorecolor
   7767  fcb2		       85 a3		      STA	scorecolor
   7768  fcb4				   .
   7769  fcb4							; 
   7770  fcb4
   7771  fcb4				   .L0247		;  COLUBK  =  $6A
   7772  fcb4
   7773  fcb4		       a9 6a		      LDA	#$6A
   7774  fcb6		       85 09		      STA	COLUBK
   7775  fcb8				   .
   7776  fcb8							; 
   7777  fcb8
   7778  fcb8				   .L0248		;  goto __Got_Pause_Colors
   7779  fcb8
   7780  fcb8		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7781  fcbb
   7782  fcbb				   .
   7783  fcbb							; 
   7784  fcbb
   7785  fcbb				   .
   7786  fcbb							; 
   7787  fcbb
   7788  fcbb				   .
   7789  fcbb							; 
   7790  fcbb
   7791  fcbb				   .
   7792  fcbb							; 
   7793  fcbb
   7794  fcbb				   .
   7795  fcbb							; 
   7796  fcbb
   7797  fcbb				   .
   7798  fcbb							; 
   7799  fcbb
   7800  fcbb				   .
   7801  fcbb							; 
   7802  fcbb
   7803  fcbb				   .__Ps2B
   7804  fcbb							; __Ps2B
   7805  fcbb
   7806  fcbb				   .
   7807  fcbb							; 
   7808  fcbb
   7809  fcbb				   .L0249		;  COLUPF  =  $6A  :  COLUP0  =  $6A  :  COLUP1  =  $6A  :  pfscorecolor  =  $6A  :  scorecolor  =  $6A
   7810  fcbb
   7811  fcbb		       a9 6a		      LDA	#$6A
   7812  fcbd		       85 08		      STA	COLUPF
   7813  fcbf		       85 06		      STA	COLUP0
   7814  fcc1		       85 07		      STA	COLUP1
   7815  fcc3		       85 f4		      STA	pfscorecolor
   7816  fcc5		       85 a3		      STA	scorecolor
   7817  fcc7				   .
   7818  fcc7							; 
   7819  fcc7
   7820  fcc7				   .
   7821  fcc7							; 
   7822  fcc7
   7823  fcc7				   .
   7824  fcc7							; 
   7825  fcc7
   7826  fcc7				   .L0250		;  COLUBK  =  $6C
   7827  fcc7
   7828  fcc7		       a9 6c		      LDA	#$6C
   7829  fcc9		       85 09		      STA	COLUBK
   7830  fccb				   .
   7831  fccb							; 
   7832  fccb
   7833  fccb				   .L0251		;  goto __Got_Pause_Colors
   7834  fccb
   7835  fccb		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7836  fcce
   7837  fcce				   .
   7838  fcce							; 
   7839  fcce
   7840  fcce				   .
   7841  fcce							; 
   7842  fcce
   7843  fcce				   .
   7844  fcce							; 
   7845  fcce
   7846  fcce				   .
   7847  fcce							; 
   7848  fcce
   7849  fcce				   .
   7850  fcce							; 
   7851  fcce
   7852  fcce				   .
   7853  fcce							; 
   7854  fcce
   7855  fcce				   .
   7856  fcce							; 
   7857  fcce
   7858  fcce				   .__Ps3
   7859  fcce							; __Ps3
   7860  fcce
   7861  fcce				   .
   7862  fcce							; 
   7863  fcce
   7864  fcce				   .L0252		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps3B
   7865  fcce
   7866  fcce		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7867  fcd0		       29 04		      AND	#4
   7868  fcd2		       f0 03		      BEQ	.skipL0252
   7869  fcd4				   .condpart98
   7870  fcd4		       4c ea fc 	      jmp	.__Ps3B
   7871  fcd7
   7872  fcd7				   .skipL0252
   7873  fcd7				   .
   7874  fcd7							; 
   7875  fcd7
   7876  fcd7				   .L0253		;  COLUPF  =  $9C  :  COLUP0  =  $9C  :  COLUP1  =  $9C  :  pfscorecolor  =  $9C  :  scorecolor  =  $9C
   7877  fcd7
   7878  fcd7		       a9 9c		      LDA	#$9C
   7879  fcd9		       85 08		      STA	COLUPF
   7880  fcdb		       85 06		      STA	COLUP0
   7881  fcdd		       85 07		      STA	COLUP1
   7882  fcdf		       85 f4		      STA	pfscorecolor
   7883  fce1		       85 a3		      STA	scorecolor
   7884  fce3				   .
   7885  fce3							; 
   7886  fce3
   7887  fce3				   .L0254		;  COLUBK  =  $9A
   7888  fce3
   7889  fce3		       a9 9a		      LDA	#$9A
   7890  fce5		       85 09		      STA	COLUBK
   7891  fce7				   .
   7892  fce7							; 
   7893  fce7
   7894  fce7				   .L0255		;  goto __Got_Pause_Colors
   7895  fce7
   7896  fce7		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7897  fcea
   7898  fcea				   .
   7899  fcea							; 
   7900  fcea
   7901  fcea				   .
   7902  fcea							; 
   7903  fcea
   7904  fcea				   .
   7905  fcea							; 
   7906  fcea
   7907  fcea				   .
   7908  fcea							; 
   7909  fcea
   7910  fcea				   .
   7911  fcea							; 
   7912  fcea
   7913  fcea				   .
   7914  fcea							; 
   7915  fcea
   7916  fcea				   .
   7917  fcea							; 
   7918  fcea
   7919  fcea				   .__Ps3B
   7920  fcea							; __Ps3B
   7921  fcea
   7922  fcea				   .
   7923  fcea							; 
   7924  fcea
   7925  fcea				   .L0256		;  COLUPF  =  $9A  :  COLUP0  =  $9A  :  COLUP1  =  $9A  :  pfscorecolor  =  $9A  :  scorecolor  =  $9A
   7926  fcea
   7927  fcea		       a9 9a		      LDA	#$9A
   7928  fcec		       85 08		      STA	COLUPF
   7929  fcee		       85 06		      STA	COLUP0
   7930  fcf0		       85 07		      STA	COLUP1
   7931  fcf2		       85 f4		      STA	pfscorecolor
   7932  fcf4		       85 a3		      STA	scorecolor
   7933  fcf6				   .
   7934  fcf6							; 
   7935  fcf6
   7936  fcf6				   .L0257		;  COLUBK  =  $9C
   7937  fcf6
   7938  fcf6		       a9 9c		      LDA	#$9C
   7939  fcf8		       85 09		      STA	COLUBK
   7940  fcfa				   .
   7941  fcfa							; 
   7942  fcfa
   7943  fcfa				   .L0258		;  goto __Got_Pause_Colors
   7944  fcfa
   7945  fcfa		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   7946  fcfd
   7947  fcfd				   .
   7948  fcfd							; 
   7949  fcfd
   7950  fcfd				   .
   7951  fcfd							; 
   7952  fcfd
   7953  fcfd				   .
   7954  fcfd							; 
   7955  fcfd
   7956  fcfd				   .
   7957  fcfd							; 
   7958  fcfd
   7959  fcfd				   .
   7960  fcfd							; 
   7961  fcfd
   7962  fcfd				   .
   7963  fcfd							; 
   7964  fcfd
   7965  fcfd				   .
   7966  fcfd							; 
   7967  fcfd
   7968  fcfd				   .__Ps4
   7969  fcfd							; __Ps4
   7970  fcfd
   7971  fcfd				   .
   7972  fcfd							; 
   7973  fcfd
   7974  fcfd				   .L0259		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps4B
   7975  fcfd
   7976  fcfd		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   7977  fcff		       29 04		      AND	#4
   7978  fd01		       f0 03		      BEQ	.skipL0259
   7979  fd03				   .condpart99
   7980  fd03		       4c 19 fd 	      jmp	.__Ps4B
   7981  fd06
   7982  fd06				   .skipL0259
   7983  fd06				   .
   7984  fd06							; 
   7985  fd06
   7986  fd06				   .L0260		;  COLUPF  =  $CC  :  COLUP0  =  $CC  :  COLUP1  =  $CC  :  pfscorecolor  =  $CC  :  scorecolor  =  $CC
   7987  fd06
   7988  fd06		       a9 cc		      LDA	#$CC
   7989  fd08		       85 08		      STA	COLUPF
   7990  fd0a		       85 06		      STA	COLUP0
   7991  fd0c		       85 07		      STA	COLUP1
   7992  fd0e		       85 f4		      STA	pfscorecolor
   7993  fd10		       85 a3		      STA	scorecolor
   7994  fd12				   .
   7995  fd12							; 
   7996  fd12
   7997  fd12				   .L0261		;  COLUBK  =  $CA
   7998  fd12
   7999  fd12		       a9 ca		      LDA	#$CA
   8000  fd14		       85 09		      STA	COLUBK
   8001  fd16				   .
   8002  fd16							; 
   8003  fd16
   8004  fd16				   .L0262		;  goto __Got_Pause_Colors
   8005  fd16
   8006  fd16		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8007  fd19
   8008  fd19				   .
   8009  fd19							; 
   8010  fd19
   8011  fd19				   .
   8012  fd19							; 
   8013  fd19
   8014  fd19				   .
   8015  fd19							; 
   8016  fd19
   8017  fd19				   .
   8018  fd19							; 
   8019  fd19
   8020  fd19				   .
   8021  fd19							; 
   8022  fd19
   8023  fd19				   .
   8024  fd19							; 
   8025  fd19
   8026  fd19				   .
   8027  fd19							; 
   8028  fd19
   8029  fd19				   .__Ps4B
   8030  fd19							; __Ps4B
   8031  fd19
   8032  fd19				   .
   8033  fd19							; 
   8034  fd19
   8035  fd19				   .L0263		;  COLUPF  =  $CA  :  COLUP0  =  $CA  :  COLUP1  =  $CA  :  pfscorecolor  =  $CA  :  scorecolor  =  $CA
   8036  fd19
   8037  fd19		       a9 ca		      LDA	#$CA
   8038  fd1b		       85 08		      STA	COLUPF
   8039  fd1d		       85 06		      STA	COLUP0
   8040  fd1f		       85 07		      STA	COLUP1
   8041  fd21		       85 f4		      STA	pfscorecolor
   8042  fd23		       85 a3		      STA	scorecolor
   8043  fd25				   .
   8044  fd25							; 
   8045  fd25
   8046  fd25				   .L0264		;  COLUBK  =  $CC
   8047  fd25
   8048  fd25		       a9 cc		      LDA	#$CC
   8049  fd27		       85 09		      STA	COLUBK
   8050  fd29				   .
   8051  fd29							; 
   8052  fd29
   8053  fd29				   .L0265		;  goto __Got_Pause_Colors
   8054  fd29
   8055  fd29		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8056  fd2c
   8057  fd2c				   .
   8058  fd2c							; 
   8059  fd2c
   8060  fd2c				   .
   8061  fd2c							; 
   8062  fd2c
   8063  fd2c				   .
   8064  fd2c							; 
   8065  fd2c
   8066  fd2c				   .
   8067  fd2c							; 
   8068  fd2c
   8069  fd2c				   .
   8070  fd2c							; 
   8071  fd2c
   8072  fd2c				   .
   8073  fd2c							; 
   8074  fd2c
   8075  fd2c				   .
   8076  fd2c							; 
   8077  fd2c
   8078  fd2c				   .__Ps5
   8079  fd2c							; __Ps5
   8080  fd2c
   8081  fd2c				   .
   8082  fd2c							; 
   8083  fd2c
   8084  fd2c				   .L0266		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps5B
   8085  fd2c
   8086  fd2c		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8087  fd2e		       29 04		      AND	#4
   8088  fd30		       f0 03		      BEQ	.skipL0266
   8089  fd32				   .condpart100
   8090  fd32		       4c 48 fd 	      jmp	.__Ps5B
   8091  fd35
   8092  fd35				   .skipL0266
   8093  fd35				   .
   8094  fd35							; 
   8095  fd35
   8096  fd35				   .L0267		;  COLUPF  =  $FC  :  COLUP0  =  $FC  :  COLUP1  =  $FC  :  pfscorecolor  =  $FC  :  scorecolor  =  $FC
   8097  fd35
   8098  fd35		       a9 fc		      LDA	#$FC
   8099  fd37		       85 08		      STA	COLUPF
   8100  fd39		       85 06		      STA	COLUP0
   8101  fd3b		       85 07		      STA	COLUP1
   8102  fd3d		       85 f4		      STA	pfscorecolor
   8103  fd3f		       85 a3		      STA	scorecolor
   8104  fd41				   .
   8105  fd41							; 
   8106  fd41
   8107  fd41				   .L0268		;  COLUBK  =  $FA
   8108  fd41
   8109  fd41		       a9 fa		      LDA	#$FA
   8110  fd43		       85 09		      STA	COLUBK
   8111  fd45				   .
   8112  fd45							; 
   8113  fd45
   8114  fd45				   .L0269		;  goto __Got_Pause_Colors
   8115  fd45
   8116  fd45		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8117  fd48
   8118  fd48				   .
   8119  fd48							; 
   8120  fd48
   8121  fd48				   .
   8122  fd48							; 
   8123  fd48
   8124  fd48				   .
   8125  fd48							; 
   8126  fd48
   8127  fd48				   .
   8128  fd48							; 
   8129  fd48
   8130  fd48				   .
   8131  fd48							; 
   8132  fd48
   8133  fd48				   .
   8134  fd48							; 
   8135  fd48
   8136  fd48				   .
   8137  fd48							; 
   8138  fd48
   8139  fd48				   .__Ps5B
   8140  fd48							; __Ps5B
   8141  fd48
   8142  fd48				   .
   8143  fd48							; 
   8144  fd48
   8145  fd48				   .L0270		;  COLUPF  =  $FA  :  COLUP0  =  $FA  :  COLUP1  =  $FA  :  pfscorecolor  =  $FA :  scorecolor  =  $FA
   8146  fd48
   8147  fd48		       a9 fa		      LDA	#$FA
   8148  fd4a		       85 08		      STA	COLUPF
   8149  fd4c		       85 06		      STA	COLUP0
   8150  fd4e		       85 07		      STA	COLUP1
   8151  fd50		       85 f4		      STA	pfscorecolor
   8152  fd52		       85 a3		      STA	scorecolor
   8153  fd54				   .
   8154  fd54							; 
   8155  fd54
   8156  fd54				   .L0271		;  COLUBK  =  $FC
   8157  fd54
   8158  fd54		       a9 fc		      LDA	#$FC
   8159  fd56		       85 09		      STA	COLUBK
   8160  fd58				   .
   8161  fd58							; 
   8162  fd58
   8163  fd58				   .L0272		;  goto __Got_Pause_Colors
   8164  fd58
   8165  fd58		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8166  fd5b
   8167  fd5b				   .
   8168  fd5b							; 
   8169  fd5b
   8170  fd5b				   .
   8171  fd5b							; 
   8172  fd5b
   8173  fd5b				   .
   8174  fd5b							; 
   8175  fd5b
   8176  fd5b				   .
   8177  fd5b							; 
   8178  fd5b
   8179  fd5b				   .
   8180  fd5b							; 
   8181  fd5b
   8182  fd5b				   .
   8183  fd5b							; 
   8184  fd5b
   8185  fd5b				   .
   8186  fd5b							; 
   8187  fd5b
   8188  fd5b				   .__Ps6
   8189  fd5b							; __Ps6
   8190  fd5b
   8191  fd5b				   .
   8192  fd5b							; 
   8193  fd5b
   8194  fd5b				   .L0273		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps6B
   8195  fd5b
   8196  fd5b		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8197  fd5d		       29 04		      AND	#4
   8198  fd5f		       f0 03		      BEQ	.skipL0273
   8199  fd61				   .condpart101
   8200  fd61		       4c 77 fd 	      jmp	.__Ps6B
   8201  fd64
   8202  fd64				   .skipL0273
   8203  fd64				   .
   8204  fd64							; 
   8205  fd64
   8206  fd64				   .L0274		;  COLUPF  =  $8C  :  COLUP0  =  $8C  :  COLUP1  =  $8C  :  pfscorecolor  =  $8C  :  scorecolor  =  $8C
   8207  fd64
   8208  fd64		       a9 8c		      LDA	#$8C
   8209  fd66		       85 08		      STA	COLUPF
   8210  fd68		       85 06		      STA	COLUP0
   8211  fd6a		       85 07		      STA	COLUP1
   8212  fd6c		       85 f4		      STA	pfscorecolor
   8213  fd6e		       85 a3		      STA	scorecolor
   8214  fd70				   .
   8215  fd70							; 
   8216  fd70
   8217  fd70				   .L0275		;  COLUBK  =  $8A
   8218  fd70
   8219  fd70		       a9 8a		      LDA	#$8A
   8220  fd72		       85 09		      STA	COLUBK
   8221  fd74				   .
   8222  fd74							; 
   8223  fd74
   8224  fd74				   .L0276		;  goto __Got_Pause_Colors
   8225  fd74
   8226  fd74		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8227  fd77
   8228  fd77				   .
   8229  fd77							; 
   8230  fd77
   8231  fd77				   .
   8232  fd77							; 
   8233  fd77
   8234  fd77				   .
   8235  fd77							; 
   8236  fd77
   8237  fd77				   .
   8238  fd77							; 
   8239  fd77
   8240  fd77				   .
   8241  fd77							; 
   8242  fd77
   8243  fd77				   .
   8244  fd77							; 
   8245  fd77
   8246  fd77				   .
   8247  fd77							; 
   8248  fd77
   8249  fd77				   .__Ps6B
   8250  fd77							; __Ps6B
   8251  fd77
   8252  fd77				   .
   8253  fd77							; 
   8254  fd77
   8255  fd77				   .L0277		;  COLUPF  =  $8A  :  COLUP0  =  $8A  :  COLUP1  =  $8A  :  pfscorecolor  =  $8A  :  scorecolor  =  $8A
   8256  fd77
   8257  fd77		       a9 8a		      LDA	#$8A
   8258  fd79		       85 08		      STA	COLUPF
   8259  fd7b		       85 06		      STA	COLUP0
   8260  fd7d		       85 07		      STA	COLUP1
   8261  fd7f		       85 f4		      STA	pfscorecolor
   8262  fd81		       85 a3		      STA	scorecolor
   8263  fd83				   .
   8264  fd83							; 
   8265  fd83
   8266  fd83				   .L0278		;  COLUBK  =  $8C
   8267  fd83
   8268  fd83		       a9 8c		      LDA	#$8C
   8269  fd85		       85 09		      STA	COLUBK
   8270  fd87				   .
   8271  fd87							; 
   8272  fd87
   8273  fd87				   .L0279		;  goto __Got_Pause_Colors
   8274  fd87
   8275  fd87		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8276  fd8a
   8277  fd8a				   .
   8278  fd8a							; 
   8279  fd8a
   8280  fd8a				   .
   8281  fd8a							; 
   8282  fd8a
   8283  fd8a				   .
   8284  fd8a							; 
   8285  fd8a
   8286  fd8a				   .
   8287  fd8a							; 
   8288  fd8a
   8289  fd8a				   .
   8290  fd8a							; 
   8291  fd8a
   8292  fd8a				   .
   8293  fd8a							; 
   8294  fd8a
   8295  fd8a				   .
   8296  fd8a							; 
   8297  fd8a
   8298  fd8a				   .__Ps7
   8299  fd8a							; __Ps7
   8300  fd8a
   8301  fd8a				   .
   8302  fd8a							; 
   8303  fd8a
   8304  fd8a				   .L0280		;  if _Bit2_Pause_Clr_Scheme{2} then goto __Ps7B
   8305  fd8a
   8306  fd8a		       a5 e5		      LDA	_Bit2_Pause_Clr_Scheme
   8307  fd8c		       29 04		      AND	#4
   8308  fd8e		       f0 03		      BEQ	.skipL0280
   8309  fd90				   .condpart102
   8310  fd90		       4c a6 fd 	      jmp	.__Ps7B
   8311  fd93
   8312  fd93				   .skipL0280
   8313  fd93				   .
   8314  fd93							; 
   8315  fd93
   8316  fd93				   .L0281		;  COLUPF  =  $2C  :  COLUP0  =  $2C  :  COLUP1  =  $2C  :  pfscorecolor  =  $2C  :  scorecolor  =  $2C
   8317  fd93
   8318  fd93		       a9 2c		      LDA	#$2C
   8319  fd95		       85 08		      STA	COLUPF
   8320  fd97		       85 06		      STA	COLUP0
   8321  fd99		       85 07		      STA	COLUP1
   8322  fd9b		       85 f4		      STA	pfscorecolor
   8323  fd9d		       85 a3		      STA	scorecolor
   8324  fd9f				   .
   8325  fd9f							; 
   8326  fd9f
   8327  fd9f				   .L0282		;  COLUBK  =  $2A
   8328  fd9f
   8329  fd9f		       a9 2a		      LDA	#$2A
   8330  fda1		       85 09		      STA	COLUBK
   8331  fda3				   .
   8332  fda3							; 
   8333  fda3
   8334  fda3				   .L0283		;  goto __Got_Pause_Colors
   8335  fda3
   8336  fda3		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8337  fda6
   8338  fda6				   .
   8339  fda6							; 
   8340  fda6
   8341  fda6				   .
   8342  fda6							; 
   8343  fda6
   8344  fda6				   .
   8345  fda6							; 
   8346  fda6
   8347  fda6				   .
   8348  fda6							; 
   8349  fda6
   8350  fda6				   .
   8351  fda6							; 
   8352  fda6
   8353  fda6				   .
   8354  fda6							; 
   8355  fda6
   8356  fda6				   .
   8357  fda6							; 
   8358  fda6
   8359  fda6				   .__Ps7B
   8360  fda6							; __Ps7B
   8361  fda6
   8362  fda6				   .
   8363  fda6							; 
   8364  fda6
   8365  fda6				   .L0284		;  COLUPF  =  $2A  :  COLUP0  =  $2A  :  COLUP1  =  $2A  :  pfscorecolor  =  $2A  :  scorecolor  =  $2A
   8366  fda6
   8367  fda6		       a9 2a		      LDA	#$2A
   8368  fda8		       85 08		      STA	COLUPF
   8369  fdaa		       85 06		      STA	COLUP0
   8370  fdac		       85 07		      STA	COLUP1
   8371  fdae		       85 f4		      STA	pfscorecolor
   8372  fdb0		       85 a3		      STA	scorecolor
   8373  fdb2				   .
   8374  fdb2							; 
   8375  fdb2
   8376  fdb2				   .L0285		;  COLUBK  =  $2C
   8377  fdb2
   8378  fdb2		       a9 2c		      LDA	#$2C
   8379  fdb4		       85 09		      STA	COLUBK
   8380  fdb6				   .
   8381  fdb6							; 
   8382  fdb6
   8383  fdb6				   .L0286		;  goto __Got_Pause_Colors
   8384  fdb6
   8385  fdb6		       4c 04 fc 	      jmp	.__Got_Pause_Colors
   8386  fdb9
   8387  fdb9				  -	      if	(<*) > (<(*+7))
   8388  fdb9				  -	      repeat	($100-<*)
   8389  fdb9				  -	      .byte	0
   8390  fdb9				  -	      repend
   8391  fdb9					      endif
   8392  fdb9				   playerL068_0
   8393  fdb9		       18		      .byte.b	%00011000
   8394  fdba		       3c		      .byte.b	%00111100
   8395  fdbb		       3c		      .byte.b	%00111100
   8396  fdbc		       7e		      .byte.b	%01111110
   8397  fdbd		       7e		      .byte.b	%01111110
   8398  fdbe		       ff		      .byte.b	%11111111
   8399  fdbf		       7e		      .byte.b	%01111110
   8400  fdc0		       18		      .byte.b	%00011000
   8401  fdc1				  -	      if	(<*) > (<(*+3))
   8402  fdc1				  -	      repeat	($100-<*)
   8403  fdc1				  -	      .byte	0
   8404  fdc1				  -	      repend
   8405  fdc1					      endif
   8406  fdc1				   playerL0168_1
   8407  fdc1		       0a		      .byte.b	%00001010
   8408  fdc2		       0e		      .byte.b	%00001110
   8409  fdc3		       33		      .byte.b	%00110011
   8410  fdc4		       74		      .byte.b	%01110100
   8411  fdc5				  -	      if	(<*) > (<(*+3))
   8412  fdc5				  -	      repeat	($100-<*)
   8413  fdc5				  -	      .byte	0
   8414  fdc5				  -	      repend
   8415  fdc5					      endif
   8416  fdc5				   playerL0170_1
   8417  fdc5		       09		      .byte.b	%00001001
   8418  fdc6		       0e		      .byte.b	%00001110
   8419  fdc7		       33		      .byte.b	%00110011
   8420  fdc8		       74		      .byte.b	%01110100
   8421  fdc9				  -	      if	(<*) > (<(*+3))
   8422  fdc9				  -	      repeat	($100-<*)
   8423  fdc9				  -	      .byte	0
   8424  fdc9				  -	      repend
   8425  fdc9					      endif
   8426  fdc9				   playerL0172_1
   8427  fdc9		       11		      .byte.b	%00010001
   8428  fdca		       0e		      .byte.b	%00001110
   8429  fdcb		       33		      .byte.b	%00110011
   8430  fdcc		       74		      .byte.b	%01110100
   8431  fdcd				  -	      if	(<*) > (<(*+3))
   8432  fdcd				  -	      repeat	($100-<*)
   8433  fdcd				  -	      .byte	0
   8434  fdcd				  -	      repend
   8435  fdcd					      endif
   8436  fdcd				   playerL0174_1
   8437  fdcd		       12		      .byte.b	%00010010
   8438  fdce		       0e		      .byte.b	%00001110
   8439  fdcf		       33		      .byte.b	%00110011
   8440  fdd0		       74		      .byte.b	%01110100
   8441  fdd1					      if	ECHOFIRST
      459 bytes of ROM space left
   8442  fdd1					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   8443  fdd1					      endif
   8444  fdd1		       00 01	   ECHOFIRST  =	1
   8445  fdd1
   8446  fdd1
   8447  fdd1
   8448  fdd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8449  fdd1
   8450  fdd1							; feel free to modify the score graphics - just keep each digit 8 high
   8451  fdd1							; and keep the conditional compilation stuff intact
   8452  fdd1				  -	      ifconst	ROM2k
   8453  fdd1				  -	      ORG	$F7AC-8
   8454  fdd1					      else
   8455  fdd1				  -	      ifconst	bankswitch
   8456  fdd1				  -	      if	bankswitch == 8
   8457  fdd1				  -	      ORG	$2F94-bscode_length
   8458  fdd1				  -	      RORG	$FF94-bscode_length
   8459  fdd1				  -	      endif
   8460  fdd1				  -	      if	bankswitch == 16
   8461  fdd1				  -	      ORG	$4F94-bscode_length
   8462  fdd1				  -	      RORG	$FF94-bscode_length
   8463  fdd1				  -	      endif
   8464  fdd1				  -	      if	bankswitch == 32
   8465  fdd1				  -	      ORG	$8F94-bscode_length
   8466  fdd1				  -	      RORG	$FF94-bscode_length
   8467  fdd1				  -	      endif
   8468  fdd1				  -	      if	bankswitch == 64
   8469  fdd1				  -	      ORG	$10F80-bscode_length
   8470  fdd1				  -	      RORG	$1FF80-bscode_length
   8471  fdd1				  -	      endif
   8472  fdd1					      else
   8473  ff9c					      ORG	$FF9C
   8474  ff9c					      endif
   8475  ff9c					      endif
   8476  ff9c
   8477  ff9c							; font equates
   8478  ff9c		       00 01	   .21stcentury =	1
   8479  ff9c		       00 02	   alarmclock =	2
   8480  ff9c		       00 03	   handwritten =	3
   8481  ff9c		       00 04	   interrupted =	4
   8482  ff9c		       00 05	   retroputer =	5
   8483  ff9c		       00 06	   whimsey    =	6
   8484  ff9c		       00 07	   tiny       =	7
   8485  ff9c		       00 08	   hex	      =	8
   8486  ff9c
   8487  ff9c				  -	      ifconst	font
   8488  ff9c				  -	      if	font == hex
   8489  ff9c				  -	      ORG	. - 48
   8490  ff9c				  -	      endif
   8491  ff9c					      endif
   8492  ff9c
   8493  ff9c				   scoretable
   8494  ff9c
   8495  ff9c				  -	      ifconst	font
   8496  ff9c				  -	      if	font == .21stcentury
   8497  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   8498  ff9c				  -	      endif
   8499  ff9c				  -	      if	font == alarmclock
   8500  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   8501  ff9c				  -	      endif
   8502  ff9c				  -	      if	font == handwritten
   8503  ff9c				  -	      include	"score_graphics.asm.handwritten"
   8504  ff9c				  -	      endif
   8505  ff9c				  -	      if	font == interrupted
   8506  ff9c				  -	      include	"score_graphics.asm.interrupted"
   8507  ff9c				  -	      endif
   8508  ff9c				  -	      if	font == retroputer
   8509  ff9c				  -	      include	"score_graphics.asm.retroputer"
   8510  ff9c				  -	      endif
   8511  ff9c				  -	      if	font == whimsey
   8512  ff9c				  -	      include	"score_graphics.asm.whimsey"
   8513  ff9c				  -	      endif
   8514  ff9c				  -	      if	font == tiny
   8515  ff9c				  -	      include	"score_graphics.asm.tiny"
   8516  ff9c				  -	      endif
   8517  ff9c				  -	      if	font == hex
   8518  ff9c				  -	      include	"score_graphics.asm.hex"
   8519  ff9c				  -	      endif
   8520  ff9c					      else		; default font
   8521  ff9c
   8522  ff9c		       3c		      .byte.b	%00111100
   8523  ff9d		       66		      .byte.b	%01100110
   8524  ff9e		       66		      .byte.b	%01100110
   8525  ff9f		       66		      .byte.b	%01100110
   8526  ffa0		       66		      .byte.b	%01100110
   8527  ffa1		       66		      .byte.b	%01100110
   8528  ffa2		       66		      .byte.b	%01100110
   8529  ffa3		       3c		      .byte.b	%00111100
   8530  ffa4
   8531  ffa4		       7e		      .byte.b	%01111110
   8532  ffa5		       18		      .byte.b	%00011000
   8533  ffa6		       18		      .byte.b	%00011000
   8534  ffa7		       18		      .byte.b	%00011000
   8535  ffa8		       18		      .byte.b	%00011000
   8536  ffa9		       38		      .byte.b	%00111000
   8537  ffaa		       18		      .byte.b	%00011000
   8538  ffab		       08		      .byte.b	%00001000
   8539  ffac
   8540  ffac		       7e		      .byte.b	%01111110
   8541  ffad		       60		      .byte.b	%01100000
   8542  ffae		       60		      .byte.b	%01100000
   8543  ffaf		       3c		      .byte.b	%00111100
   8544  ffb0		       06		      .byte.b	%00000110
   8545  ffb1		       06		      .byte.b	%00000110
   8546  ffb2		       46		      .byte.b	%01000110
   8547  ffb3		       3c		      .byte.b	%00111100
   8548  ffb4
   8549  ffb4		       3c		      .byte.b	%00111100
   8550  ffb5		       46		      .byte.b	%01000110
   8551  ffb6		       06		      .byte.b	%00000110
   8552  ffb7		       06		      .byte.b	%00000110
   8553  ffb8		       1c		      .byte.b	%00011100
   8554  ffb9		       06		      .byte.b	%00000110
   8555  ffba		       46		      .byte.b	%01000110
   8556  ffbb		       3c		      .byte.b	%00111100
   8557  ffbc
   8558  ffbc		       0c		      .byte.b	%00001100
   8559  ffbd		       0c		      .byte.b	%00001100
   8560  ffbe		       7e		      .byte.b	%01111110
   8561  ffbf		       4c		      .byte.b	%01001100
   8562  ffc0		       4c		      .byte.b	%01001100
   8563  ffc1		       2c		      .byte.b	%00101100
   8564  ffc2		       1c		      .byte.b	%00011100
   8565  ffc3		       0c		      .byte.b	%00001100
   8566  ffc4
   8567  ffc4		       3c		      .byte.b	%00111100
   8568  ffc5		       46		      .byte.b	%01000110
   8569  ffc6		       06		      .byte.b	%00000110
   8570  ffc7		       06		      .byte.b	%00000110
   8571  ffc8		       3c		      .byte.b	%00111100
   8572  ffc9		       60		      .byte.b	%01100000
   8573  ffca		       60		      .byte.b	%01100000
   8574  ffcb		       7e		      .byte.b	%01111110
   8575  ffcc
   8576  ffcc		       3c		      .byte.b	%00111100
   8577  ffcd		       66		      .byte.b	%01100110
   8578  ffce		       66		      .byte.b	%01100110
   8579  ffcf		       66		      .byte.b	%01100110
   8580  ffd0		       7c		      .byte.b	%01111100
   8581  ffd1		       60		      .byte.b	%01100000
   8582  ffd2		       62		      .byte.b	%01100010
   8583  ffd3		       3c		      .byte.b	%00111100
   8584  ffd4
   8585  ffd4		       30		      .byte.b	%00110000
   8586  ffd5		       30		      .byte.b	%00110000
   8587  ffd6		       30		      .byte.b	%00110000
   8588  ffd7		       18		      .byte.b	%00011000
   8589  ffd8		       0c		      .byte.b	%00001100
   8590  ffd9		       06		      .byte.b	%00000110
   8591  ffda		       42		      .byte.b	%01000010
   8592  ffdb		       3e		      .byte.b	%00111110
   8593  ffdc
   8594  ffdc		       3c		      .byte.b	%00111100
   8595  ffdd		       66		      .byte.b	%01100110
   8596  ffde		       66		      .byte.b	%01100110
   8597  ffdf		       66		      .byte.b	%01100110
   8598  ffe0		       3c		      .byte.b	%00111100
   8599  ffe1		       66		      .byte.b	%01100110
   8600  ffe2		       66		      .byte.b	%01100110
   8601  ffe3		       3c		      .byte.b	%00111100
   8602  ffe4
   8603  ffe4		       3c		      .byte.b	%00111100
   8604  ffe5		       46		      .byte.b	%01000110
   8605  ffe6		       06		      .byte.b	%00000110
   8606  ffe7		       3e		      .byte.b	%00111110
   8607  ffe8		       66		      .byte.b	%01100110
   8608  ffe9		       66		      .byte.b	%01100110
   8609  ffea		       66		      .byte.b	%01100110
   8610  ffeb		       3c		      .byte.b	%00111100
   8611  ffec
   8612  ffec					      ifnconst	DPC_kernel_options
   8613  ffec
   8614  ffec		       00		      .byte.b	%00000000
   8615  ffed		       00		      .byte.b	%00000000
   8616  ffee		       00		      .byte.b	%00000000
   8617  ffef		       00		      .byte.b	%00000000
   8618  fff0		       00		      .byte.b	%00000000
   8619  fff1		       00		      .byte.b	%00000000
   8620  fff2		       00		      .byte.b	%00000000
   8621  fff3		       00		      .byte.b	%00000000
   8622  fff4
   8623  fff4					      endif
   8624  fff4
   8625  fff4					      endif
   8626  fff4
   8627  fff4				  -	      ifconst	ROM2k
   8628  fff4				  -	      ORG	$F7FC
   8629  fff4					      else
   8630  fff4				  -	      ifconst	bankswitch
   8631  fff4				  -	      if	bankswitch == 8
   8632  fff4				  -	      ORG	$2FF4-bscode_length
   8633  fff4				  -	      RORG	$FFF4-bscode_length
   8634  fff4				  -	      endif
   8635  fff4				  -	      if	bankswitch == 16
   8636  fff4				  -	      ORG	$4FF4-bscode_length
   8637  fff4				  -	      RORG	$FFF4-bscode_length
   8638  fff4				  -	      endif
   8639  fff4				  -	      if	bankswitch == 32
   8640  fff4				  -	      ORG	$8FF4-bscode_length
   8641  fff4				  -	      RORG	$FFF4-bscode_length
   8642  fff4				  -	      endif
   8643  fff4				  -	      if	bankswitch == 64
   8644  fff4				  -	      ORG	$10FE0-bscode_length
   8645  fff4				  -	      RORG	$1FFE0-bscode_length
   8646  fff4				  -	      endif
   8647  fff4					      else
   8648  fffc					      ORG	$FFFC
   8649  fffc					      endif
   8650  fffc					      endif
   8651  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8652  fffc
   8653  fffc				  -	      ifconst	bankswitch
   8654  fffc				  -	      if	bankswitch == 8
   8655  fffc				  -	      ORG	$2FFC
   8656  fffc				  -	      RORG	$FFFC
   8657  fffc				  -	      endif
   8658  fffc				  -	      if	bankswitch == 16
   8659  fffc				  -	      ORG	$4FFC
   8660  fffc				  -	      RORG	$FFFC
   8661  fffc				  -	      endif
   8662  fffc				  -	      if	bankswitch == 32
   8663  fffc				  -	      ORG	$8FFC
   8664  fffc				  -	      RORG	$FFFC
   8665  fffc				  -	      endif
   8666  fffc				  -	      if	bankswitch == 64
   8667  fffc				  -	      ORG	$10FF0
   8668  fffc				  -	      RORG	$1FFF0
   8669  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   8670  fffc				  -	      ORG	$10FF8
   8671  fffc				  -	      RORG	$1FFF8
   8672  fffc				  -	      ifconst	superchip
   8673  fffc				  -	      .byte	"E","F","S","C"
   8674  fffc				  -	      else
   8675  fffc				  -	      .byte	"E","F","E","F"
   8676  fffc				  -	      endif
   8677  fffc				  -	      ORG	$10FFC
   8678  fffc				  -	      RORG	$1FFFC
   8679  fffc				  -	      endif
   8680  fffc					      else
   8681  fffc				  -	      ifconst	ROM2k
   8682  fffc				  -	      ORG	$F7FC
   8683  fffc					      else
   8684  fffc					      ORG	$FFFC
   8685  fffc					      endif
   8686  fffc					      endif
   8687  fffc		       00 f0		      .word.w	(start & $ffff)
   8688  fffe		       00 f0		      .word.w	(start & $ffff)
